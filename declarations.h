typedef void(__cdecl* tPDNetObtainSystemUserName)(char* pName, int pMax_length);
static tPDNetObtainSystemUserName PDNetObtainSystemUserName = (tPDNetObtainSystemUserName)0x4552be;
HOOK_VARIABLE_IMPLEMENT_ARRAY(tGraf_spec, gGraf_specs, 2, 0x51d608);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gTemp_screen, 0x51d59c);
typedef void(__cdecl* tKeyBegin)();
static tKeyBegin KeyBegin = (tKeyBegin)0x4a6b34;
typedef void(__cdecl* tPDSetKeyArray)(int* pKeys, int pMark);
static tPDSetKeyArray PDSetKeyArray = (tPDSetKeyArray)0x4a7d4c;
typedef int(__cdecl* tPDGetASCIIFromKey)(int pKey);
static tPDGetASCIIFromKey PDGetASCIIFromKey = (tPDGetASCIIFromKey)0x4a7a49;
typedef void(__cdecl* tPDFatalError)(char* pThe_str);
static tPDFatalError PDFatalError = (tPDFatalError)0x4a633f;
typedef void(__cdecl* tPDInitialiseSystem)();
static tPDInitialiseSystem PDInitialiseSystem = (tPDInitialiseSystem)0x4a692c;
typedef void(__cdecl* tPDShutdownSystem)();
static tPDShutdownSystem PDShutdownSystem = (tPDShutdownSystem)0x4a6f6d;
typedef void(__cdecl* tPDRevertPalette)();
static tPDRevertPalette PDRevertPalette = (tPDRevertPalette)0x4a70a2;
typedef int(__cdecl* tPDInitScreenVars)(int pArgc, char** pArgv);
static tPDInitScreenVars PDInitScreenVars = (tPDInitScreenVars)0x4a70ad;
typedef void(__cdecl* tPDAllocateScreenAndBack)();
static tPDAllocateScreenAndBack PDAllocateScreenAndBack = (tPDAllocateScreenAndBack)0x4a728d;
typedef void(__cdecl* tPDScreenBufferSwap)(int pRendering_area_only);
static tPDScreenBufferSwap PDScreenBufferSwap = (tPDScreenBufferSwap)0x4a758e;
typedef void(__cdecl* tPDInstallErrorHandlers)();
static tPDInstallErrorHandlers PDInstallErrorHandlers = (tPDInstallErrorHandlers)0x4a7766;
typedef void(__cdecl* tPDSetFileVariables)();
static tPDSetFileVariables PDSetFileVariables = (tPDSetFileVariables)0x4a779c;
typedef void(__cdecl* tPDBuildAppPath)(char* pThe_path);
static tPDBuildAppPath PDBuildAppPath = (tPDBuildAppPath)0x4a77b3;
typedef void(__cdecl* tPDForEveryFile)(char* pThe_path, void (*pAction_routine)(char*));
static tPDForEveryFile PDForEveryFile = (tPDForEveryFile)0x4a7807;
typedef void(__cdecl* tPDSetPalette)(br_pixelmap* pThe_palette);
static tPDSetPalette PDSetPalette = (tPDSetPalette)0x4a7903;
typedef void(__cdecl* tPDSwitchToRealResolution)();
static tPDSwitchToRealResolution PDSwitchToRealResolution = (tPDSwitchToRealResolution)0x4a71ce;
typedef void(__cdecl* tPDSwitchToLoresMode)();
static tPDSwitchToLoresMode PDSwitchToLoresMode = (tPDSwitchToLoresMode)0x4a71f1;
typedef void(__cdecl* tPDGetMousePosition)(int* pX_coord, int* pY_coord);
static tPDGetMousePosition PDGetMousePosition = (tPDGetMousePosition)0x4a7a11;
typedef int(__cdecl* tPDGetTotalTime)();
static tPDGetTotalTime PDGetTotalTime = (tPDGetTotalTime)0x4a83c5;
typedef int(__cdecl* tPDServiceSystem)(tU32 pTime_since_last_call);
static tPDServiceSystem PDServiceSystem = (tPDServiceSystem)0x4a7b63;
typedef void(__cdecl* tPDAllocateActionReplayBuffer)(char** pBuffer, tU32* pBuffer_size);
static tPDAllocateActionReplayBuffer PDAllocateActionReplayBuffer = (tPDAllocateActionReplayBuffer)0x4a68e2;
typedef void(__cdecl* tPDEnterDebugger)(char* pStr);
static tPDEnterDebugger PDEnterDebugger = (tPDEnterDebugger)0x4a60e3;
typedef void(__cdecl* tPDReadJoySticks)();
static tPDReadJoySticks PDReadJoySticks = (tPDReadJoySticks)0x4a8152;
typedef tS32(__cdecl* tPDGetJoy1X)();
static tPDGetJoy1X PDGetJoy1X = (tPDGetJoy1X)0x4a81b5;
typedef tS32(__cdecl* tPDGetJoy1Y)();
static tPDGetJoy1Y PDGetJoy1Y = (tPDGetJoy1Y)0x4a81e1;
typedef int(__cdecl* tPDGetJoy1Button1)();
static tPDGetJoy1Button1 PDGetJoy1Button1 = (tPDGetJoy1Button1)0x4a8265;
typedef int(__cdecl* tPDFileUnlock)(char* pThe_path);
static tPDFileUnlock PDFileUnlock = (tPDFileUnlock)0x4a83e6;
typedef int(__cdecl* tPDCheckDriveExists2)(char* pThe_path, char* pFile_name, tU32 pMin_size);
static tPDCheckDriveExists2 PDCheckDriveExists2 = (tPDCheckDriveExists2)0x4a8429;
typedef int(__cdecl* tPDDoWeLeadAnAustereExistance)();
static tPDDoWeLeadAnAustereExistance PDDoWeLeadAnAustereExistance = (tPDDoWeLeadAnAustereExistance)0x4a856f;
HOOK_VARIABLE_IMPLEMENT(int, gNext_spark, 0x5149e8);
HOOK_VARIABLE_IMPLEMENT(int, gSpark_flags, 0x5149ec);
HOOK_VARIABLE_IMPLEMENT(int, gNext_shrapnel, 0x5149f0);
HOOK_VARIABLE_IMPLEMENT(int, gShrapnel_flags, 0x5149f4);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_model*, gShrapnel_model, 2, 0x5149f8);
HOOK_VARIABLE_IMPLEMENT(int, gSmoke_flags, 0x514a00);
HOOK_VARIABLE_IMPLEMENT(int, gSmoke_num, 0x514a04);
HOOK_VARIABLE_IMPLEMENT(int, gOffset, 0x514a08);
HOOK_VARIABLE_IMPLEMENT(int, gColumn_flags, 0x514a0c);
HOOK_VARIABLE_IMPLEMENT(int, gNext_column, 0x514a10);
HOOK_VARIABLE_IMPLEMENT(int, gNum_splash_types, 0x514a24);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_pixelmap*, gFlame_map, 20, 0x538618);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tSplash, gSplash, 32, 0x538298);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_material*, gSplash_material, 20, 0x538b00);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tSmoke_column, gSmoke_column, 25, 0x538de8);
HOOK_VARIABLE_IMPLEMENT(br_matrix4, gCameraToScreen, 0x538668);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tSpark, gSparks, 32, 0x5398d8);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_pixelmap*, gShade_list, 16, 0x5509c0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tSmoke, gSmoke, 25, 0x5386b0);
HOOK_VARIABLE_IMPLEMENT(tU32, gSplash_flags, 0x53a0e0);
HOOK_VARIABLE_IMPLEMENT(tU32, gNext_splash, 0x53828c);
HOOK_VARIABLE_IMPLEMENT(br_model*, gLollipop_model, 0x53a0d8);
HOOK_VARIABLE_IMPLEMENT(int, gNum_dust_tables, 0x538294);
HOOK_VARIABLE_IMPLEMENT(br_model*, gSplash_model, 0x5386a8);
HOOK_VARIABLE_IMPLEMENT(int, gDust_rotate, 0x53a0dc);
HOOK_VARIABLE_IMPLEMENT(br_camera*, gSpark_cam, 0x538290);
HOOK_VARIABLE_IMPLEMENT(br_material*, gBlack_material, 0x538288);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tShrapnel, gShrapnel, 15, 0x538b50);
typedef void(__cdecl* tDrawDot)(br_scalar z, tU8* scr_ptr, tU16* depth_ptr, tU8* shade_ptr);
static tDrawDot DrawDot = (tDrawDot)0x466310;
typedef void(__cdecl* tSetWorldToScreen)(br_pixelmap* pScreen);
static tSetWorldToScreen SetWorldToScreen = (tSetWorldToScreen)0x466be2;
typedef int(__cdecl* tDrawLine3D)(br_vector3* start, br_vector3* end, br_pixelmap* pScreen, br_pixelmap* pDepth_buffer, br_pixelmap* shade_table);
static tDrawLine3D DrawLine3D = (tDrawLine3D)0x4658e0;
typedef int(__cdecl* tDrawLine2D)(br_vector3* o, br_vector3* p, br_pixelmap* pScreen, br_pixelmap* pDepth_buffer, br_scalar brightness, br_pixelmap* shade_table);
static tDrawLine2D DrawLine2D = (tDrawLine2D)0x465ab7;
typedef void(__cdecl* tReplaySparks)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera, tU32 pTime);
static tReplaySparks ReplaySparks = (tReplaySparks)0x466c92;
typedef void(__cdecl* tRenderSparks)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world, tU32 pTime);
static tRenderSparks RenderSparks = (tRenderSparks)0x46636c;
typedef void(__cdecl* tCreateSingleSpark)(tCar_spec* pCar, br_vector3* pPos, br_vector3* pVel);
static tCreateSingleSpark CreateSingleSpark = (tCreateSingleSpark)0x46e43e;
typedef void(__cdecl* tCreateSparks)(br_vector3* pos, br_vector3* v, br_vector3* pForce, br_scalar sparkiness, tCar_spec* pCar);
static tCreateSparks CreateSparks = (tCreateSparks)0x466e70;
typedef void(__cdecl* tCreateSparkShower)(br_vector3* pos, br_vector3* v, br_vector3* pForce, tCar_spec* pCar1, tCar_spec* pCar2);
static tCreateSparkShower CreateSparkShower = (tCreateSparkShower)0x4674b1;
typedef void(__cdecl* tResetSparks)();
static tResetSparks ResetSparks = (tResetSparks)0x467abf;
typedef void(__cdecl* tCreateShrapnelShower)(br_vector3* pos, br_vector3* v, br_vector3* pNormal, br_scalar pForce, tCar_spec* c1, tCar_spec* c2);
static tCreateShrapnelShower CreateShrapnelShower = (tCreateShrapnelShower)0x467b4e;
typedef void(__cdecl* tInitShrapnel)();
static tInitShrapnel InitShrapnel = (tInitShrapnel)0x46ec02;
typedef void(__cdecl* tLoadInShrapnel)();
static tLoadInShrapnel LoadInShrapnel = (tLoadInShrapnel)0x467f43;
typedef void(__cdecl* tKillShrapnel)(int i);
static tKillShrapnel KillShrapnel = (tKillShrapnel)0x468567;
typedef void(__cdecl* tReplayShrapnel)(tU32 pTime);
static tReplayShrapnel ReplayShrapnel = (tReplayShrapnel)0x4685a0;
typedef void(__cdecl* tMungeShrapnel)(tU32 pTime);
static tMungeShrapnel MungeShrapnel = (tMungeShrapnel)0x46805c;
typedef void(__cdecl* tDrMatrix34Rotate)(br_matrix34* mat, br_angle r, br_vector3* a);
static tDrMatrix34Rotate DrMatrix34Rotate = (tDrMatrix34Rotate)0x4686c8;
typedef void(__cdecl* tSmokeLine)(int l, int x, br_scalar zbuff, int r_squared, tU8* scr_ptr, tU16* depth_ptr, tU8* shade_ptr, br_scalar r_multiplier, br_scalar z_multiplier, br_scalar shade_offset);
static tSmokeLine SmokeLine = (tSmokeLine)0x469fc0;
typedef void(__cdecl* tSmokeCircle)(br_vector3* o, br_scalar r, br_scalar extra_z, br_scalar strength, br_scalar pAspect, br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_pixelmap* pShade_table);
static tSmokeCircle SmokeCircle = (tSmokeCircle)0x46969c;
typedef void(__cdecl* tSmokeCircle3D)(br_vector3* o, br_scalar r, br_scalar strength, br_scalar pAspect, br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_pixelmap* pShade_table, br_actor* pCam);
static tSmokeCircle3D SmokeCircle3D = (tSmokeCircle3D)0x469551;
typedef void(__cdecl* tReplaySmoke)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera);
static tReplaySmoke ReplaySmoke = (tReplaySmoke)0x46a09d;
typedef void(__cdecl* tGenerateContinuousSmoke)(tCar_spec* pCar, int wheel, tU32 pTime);
static tGenerateContinuousSmoke GenerateContinuousSmoke = (tGenerateContinuousSmoke)0x4687dc;
typedef void(__cdecl* tDustRotate)();
static tDustRotate DustRotate = (tDustRotate)0x468bc5;
typedef void(__cdecl* tRenderSmoke)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world, tU32 pTime);
static tRenderSmoke RenderSmoke = (tRenderSmoke)0x468c09;
typedef void(__cdecl* tCreatePuffOfSmoke)(br_vector3* pos, br_vector3* v, br_scalar strength, br_scalar pDecay_factor, int pType, tCar_spec* pC);
static tCreatePuffOfSmoke CreatePuffOfSmoke = (tCreatePuffOfSmoke)0x46a225;
typedef void(__cdecl* tCreateSmokeColumn)(tCar_spec* pCar, int pColour, int pVertex_index, tU32 pLifetime);
static tCreateSmokeColumn CreateSmokeColumn = (tCreateSmokeColumn)0x46a79c;
typedef void(__cdecl* tReplayFlame)(tSmoke_column* col, br_actor* actor);
static tReplayFlame ReplayFlame = (tReplayFlame)0x46b722;
typedef void(__cdecl* tFlameAnimate)(int c, br_vector3* pPos, tU32 pTime);
static tFlameAnimate FlameAnimate = (tFlameAnimate)0x46b391;
typedef void(__cdecl* tDoSmokeColumn)(int i, tU32 pTime, br_vector3* pRet_car_pos);
static tDoSmokeColumn DoSmokeColumn = (tDoSmokeColumn)0x46b86d;
typedef void(__cdecl* tReplaySmokeColumn)(tU32 pTime);
static tReplaySmokeColumn ReplaySmokeColumn = (tReplaySmokeColumn)0x46bb0b;
typedef void(__cdecl* tMungeSmokeColumn)(tU32 pTime);
static tMungeSmokeColumn MungeSmokeColumn = (tMungeSmokeColumn)0x46ada4;
typedef void(__cdecl* tInitFlame)();
static tInitFlame InitFlame = (tInitFlame)0x46bcf7;
typedef void(__cdecl* tInitSplash)(FILE* pF);
static tInitSplash InitSplash = (tInitSplash)0x46ef01;
typedef void(__cdecl* tDrawTheGlow)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera);
static tDrawTheGlow DrawTheGlow = (tDrawTheGlow)0x46c133;
typedef void(__cdecl* tSmudgeCar)(tCar_spec* pCar, int fire_point);
static tSmudgeCar SmudgeCar = (tSmudgeCar)0x46c72d;
typedef void(__cdecl* tStopCarSmoking)(tCar_spec* pCar);
static tStopCarSmoking StopCarSmoking = (tStopCarSmoking)0x46d0be;
typedef void(__cdecl* tConditionalSmokeColumn)(tCar_spec* pCar, int pDamage_index, int pColour);
static tConditionalSmokeColumn ConditionalSmokeColumn = (tConditionalSmokeColumn)0x46d19e;
typedef void(__cdecl* tSingleSplash)(tCar_spec* pCar, br_vector3* sp, br_vector3* normal, tU32 pTime);
static tSingleSplash SingleSplash = (tSingleSplash)0x46dffa;
typedef void(__cdecl* tCreateSplash)(tCar_spec* pCar, tU32 pTime);
static tCreateSplash CreateSplash = (tCreateSplash)0x46d2ab;
typedef void(__cdecl* tMungeSplash)(tU32 pTime);
static tMungeSplash MungeSplash = (tMungeSplash)0x46e559;
typedef void(__cdecl* tRenderSplashes)();
static tRenderSplashes RenderSplashes = (tRenderSplashes)0x46ea05;
typedef void(__cdecl* tGetSmokeShadeTables)(FILE* f);
static tGetSmokeShadeTables GetSmokeShadeTables = (tGetSmokeShadeTables)0x46eaa6;
typedef void(__cdecl* tLoadInKevStuff)(FILE* pF);
static tLoadInKevStuff LoadInKevStuff = (tLoadInKevStuff)0x46ebc8;
typedef void(__cdecl* tStopCarBeingIt)(tCar_spec* pCar);
static tStopCarBeingIt StopCarBeingIt = (tStopCarBeingIt)0x46fa75;
HOOK_VARIABLE_IMPLEMENT(float, gReplay_rate, 0x531dcc);
HOOK_VARIABLE_IMPLEMENT(tAction_replay_camera_type, gAction_replay_camera_mode, 0x551db4);
typedef int(__cdecl* tReplayIsPaused)();
static tReplayIsPaused ReplayIsPaused = (tReplayIsPaused)0x41adc0;
typedef float(__cdecl* tGetReplayRate)();
static tGetReplayRate GetReplayRate = (tGetReplayRate)0x41adf3;
typedef void(__cdecl* tDoActionReplayPostSwap)();
static tDoActionReplayPostSwap DoActionReplayPostSwap = (tDoActionReplayPostSwap)0x41ae1e;
typedef void(__cdecl* tDoActionReplayHeadups)();
static tDoActionReplayHeadups DoActionReplayHeadups = (tDoActionReplayHeadups)0x41ae33;
typedef void(__cdecl* tToggleReplay)();
static tToggleReplay ToggleReplay = (tToggleReplay)0x41b661;
typedef void(__cdecl* tReverseSound)(tS3_effect_tag pEffect_index, tS3_sound_tag pSound_tag);
static tReverseSound ReverseSound = (tReverseSound)0x41b7fe;
typedef void(__cdecl* tPollActionReplayControls)(tU32 pFrame_period);
static tPollActionReplayControls PollActionReplayControls = (tPollActionReplayControls)0x41b925;
typedef void(__cdecl* tCheckReplayTurnOn)();
static tCheckReplayTurnOn CheckReplayTurnOn = (tCheckReplayTurnOn)0x41c03b;
typedef void(__cdecl* tInitializeActionReplay)();
static tInitializeActionReplay InitializeActionReplay = (tInitializeActionReplay)0x41c093;
typedef void(__cdecl* tDoActionReplay)(tU32 pFrame_period);
static tDoActionReplay DoActionReplay = (tDoActionReplay)0x41c0e6;
typedef void(__cdecl* tSynchronizeActionReplay)();
static tSynchronizeActionReplay SynchronizeActionReplay = (tSynchronizeActionReplay)0x41c11c;
HOOK_VARIABLE_IMPLEMENT(tNet_mode, gNet_mode, 0x50dd94);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tNet_game_player_info, gNet_players, 6, 0x550fa0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tCar_detail_info, gCar_details, 60, 0x550af0);
HOOK_VARIABLE_IMPLEMENT(int, gThis_net_player_index, 0x550ae0);
HOOK_VARIABLE_IMPLEMENT(int, gPending_race, 0x551434);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_net_players, 0x550ae4);
HOOK_VARIABLE_IMPLEMENT(int, gStart_race_sent, 0x550ad8);
HOOK_VARIABLE_IMPLEMENT(tNet_game_details*, gCurrent_net_game, 0x550adc);
HOOK_VARIABLE_IMPLEMENT(int, gWaiting_for_unpause, 0x550ae8);
typedef void(__cdecl* tShutdownNetIfRequired)();
static tShutdownNetIfRequired ShutdownNetIfRequired = (tShutdownNetIfRequired)0x4465d1;
typedef void(__cdecl* tNetSendHeadupToAllPlayers)(char* pMessage);
static tNetSendHeadupToAllPlayers NetSendHeadupToAllPlayers = (tNetSendHeadupToAllPlayers)0x44666f;
typedef void(__cdecl* tNetSendHeadupToEverybody)(char* pMessage);
static tNetSendHeadupToEverybody NetSendHeadupToEverybody = (tNetSendHeadupToEverybody)0x4466c1;
typedef void(__cdecl* tNetLeaveGame)(tNet_game_details* pNet_game);
static tNetLeaveGame NetLeaveGame = (tNetLeaveGame)0x44692a;
typedef void(__cdecl* tNetObtainSystemUserName)(char* pName, int pMax_length);
static tNetObtainSystemUserName NetObtainSystemUserName = (tNetObtainSystemUserName)0x4478a3;
typedef tNet_message* (__cdecl* tNetBuildMessage)(tNet_message_type pType, tS32 pSize_decider);
static tNetBuildMessage NetBuildMessage = (tNetBuildMessage)0x447e7f;
typedef void(__cdecl* tNetSendMessageStacks)();
static tNetSendMessageStacks NetSendMessageStacks = (tNetSendMessageStacks)0x4480b4;
typedef void(__cdecl* tNetFullScreenMessage)(int pStr_index, int pLeave_it_up_there);
static tNetFullScreenMessage NetFullScreenMessage = (tNetFullScreenMessage)0x448495;
typedef void(__cdecl* tNetReceiveAndProcessMessages)();
static tNetReceiveAndProcessMessages NetReceiveAndProcessMessages = (tNetReceiveAndProcessMessages)0x449f82;
typedef void(__cdecl* tNetService)(int pIn_race);
static tNetService NetService = (tNetService)0x44a08a;
typedef void(__cdecl* tNetFinishRace)(tNet_game_details* pDetails, tRace_over_reason pReason);
static tNetFinishRace NetFinishRace = (tNetFinishRace)0x44a4e1;
typedef void(__cdecl* tNetPlayerStatusChanged)(tPlayer_status pNew_status);
static tNetPlayerStatusChanged NetPlayerStatusChanged = (tNetPlayerStatusChanged)0x44a525;
typedef tPlayer_status(__cdecl* tNetGetPlayerStatus)();
static tNetGetPlayerStatus NetGetPlayerStatus = (tNetGetPlayerStatus)0x44a5d0;
typedef int(__cdecl* tNetGuaranteedSendMessageToEverybody)(tNet_game_details* pDetails, tNet_message* pMessage, int (*pNotifyFail)(tU32, tNet_message*));
static tNetGuaranteedSendMessageToEverybody NetGuaranteedSendMessageToEverybody = (tNetGuaranteedSendMessageToEverybody)0x44a689;
typedef tNet_game_player_info* (__cdecl* tNetPlayerFromCar)(tCar_spec* pCar);
static tNetPlayerFromCar NetPlayerFromCar = (tNetPlayerFromCar)0x44ae15;
HOOK_VARIABLE_IMPLEMENT(br_actor*, gOppo_path_actor, 0x5070d0);
HOOK_VARIABLE_IMPLEMENT(br_model*, gOppo_path_model, 0x5070d4);
HOOK_VARIABLE_IMPLEMENT(int, gMellow_opponents, 0x507110);
HOOK_VARIABLE_IMPLEMENT(int, gTest_toggle, 0x507114);
HOOK_VARIABLE_IMPLEMENT(int, gAlready_elasticating, 0x507118);
HOOK_VARIABLE_IMPLEMENT(int, gMax_bangness, 0x507148);
HOOK_VARIABLE_IMPLEMENT(tU32, gNext_elastication, 0x50714c);
HOOK_VARIABLE_IMPLEMENT(tU32, gNext_write_during_elastication, 0x507150);
HOOK_VARIABLE_IMPLEMENT(int, gSFS_count, 0x507160);
HOOK_VARIABLE_IMPLEMENT(int, gSFS_total_cycles, 0x507164);
HOOK_VARIABLE_IMPLEMENT(int, gSFS_max_cycles, 0x507168);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gIn_view_distance, 0x530df0);
HOOK_VARIABLE_IMPLEMENT(tU8*, gBit_per_node, 0x530de8);
HOOK_VARIABLE_IMPLEMENT(int, gGrudge_reduction_per_period, 0x530da8);
HOOK_VARIABLE_IMPLEMENT(int, gSFS_cycles_this_time, 0x530df8);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gMinimum_yness_before_knackerisation, 0x530dec);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gHead_on_cos_value, 0x530df4);
HOOK_VARIABLE_IMPLEMENT(tU32, gNext_grudge_reduction, 0x530de0);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCop_pursuit_speed_percentage_multiplier, 0x530dd0);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gDefinite_cop_pursuit_speed, 0x530db8);
HOOK_VARIABLE_IMPLEMENT(int, gAcknowledged_start, 0x530dd8);
HOOK_VARIABLE_IMPLEMENT(int, gStart_jumped, 0x530ca0);
HOOK_VARIABLE_IMPLEMENT(int, gNum_of_opponents_getting_near, 0x530dc8);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_cops_before_faffage, 0x530dcc);
HOOK_VARIABLE_IMPLEMENT(int, gFirst_frame, 0x530dc0);
HOOK_VARIABLE_IMPLEMENT(tU32, gAcme_frame_count, 0x530dac);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gDefinite_no_cop_pursuit_speed, 0x530dbc);
HOOK_VARIABLE_IMPLEMENT(int, gNum_of_opponents_completing_race, 0x530de4);
HOOK_VARIABLE_IMPLEMENT(int, gNum_of_opponents_pursuing, 0x530c98);
HOOK_VARIABLE_IMPLEMENT(int, gActive_car_list_rebuild_required, 0x530dc4);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gFrame_period_for_this_munging_in_secs, 0x530db4);
HOOK_VARIABLE_IMPLEMENT(int, gBig_bang, 0x530c94);
HOOK_VARIABLE_IMPLEMENT(int, gProcessing_opponents, 0x530ddc);
HOOK_VARIABLE_IMPLEMENT(tU32, gFrame_period_for_this_munging, 0x5520e0);
HOOK_VARIABLE_IMPLEMENT(tU32, gTime_stamp_for_this_munging, 0x5520e4);
HOOK_VARIABLE_IMPLEMENT(tS16, gMobile_section, 0x530c90);
typedef void(__cdecl* tPointActorAlongThisBloodyVector)(br_actor* pThe_actor, br_vector3* pThe_vector);
static tPointActorAlongThisBloodyVector PointActorAlongThisBloodyVector = (tPointActorAlongThisBloodyVector)0x402390;
typedef void(__cdecl* tProcessCurrentObjective)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessCurrentObjective ProcessCurrentObjective = (tProcessCurrentObjective)0x4065e0;
typedef tS16(__cdecl* tReallocExtraPathNodes)(int pHow_many_then);
static tReallocExtraPathNodes ReallocExtraPathNodes = (tReallocExtraPathNodes)0x4057a1;
typedef tS16(__cdecl* tReallocExtraPathSections)(int pHow_many_then);
static tReallocExtraPathSections ReallocExtraPathSections = (tReallocExtraPathSections)0x405855;
typedef int(__cdecl* tPointVisibleFromHere)(br_vector3* pFrom, br_vector3* pTo);
static tPointVisibleFromHere PointVisibleFromHere = (tPointVisibleFromHere)0x4063ac;
typedef tS16(__cdecl* tFindNearestPathSection)(br_vector3* pActor_coords, br_vector3* pPath_direction, br_vector3* pIntersect, br_scalar* pDistance);
static tFindNearestPathSection FindNearestPathSection = (tFindNearestPathSection)0x40294b;
typedef tS16(__cdecl* tFindNearestGeneralSection)(tCar_spec* pPursuee, br_vector3* pActor_coords, br_vector3* pPath_direction, br_vector3* pIntersect, br_scalar* pDistance);
static tFindNearestGeneralSection FindNearestGeneralSection = (tFindNearestGeneralSection)0x402975;
typedef void(__cdecl* tDeadStopCar)(tCar_spec* pCar_spec);
static tDeadStopCar DeadStopCar = (tDeadStopCar)0x402481;
typedef void(__cdecl* tTurnOpponentPhysicsOff)(tOpponent_spec* pOpponent_spec);
static tTurnOpponentPhysicsOff TurnOpponentPhysicsOff = (tTurnOpponentPhysicsOff)0x40243f;
typedef void(__cdecl* tNewObjective)(tOpponent_spec* pOpponent_spec, tOpponent_objective_type pObjective_type, ...);
static tNewObjective NewObjective = (tNewObjective)0x40694d;
typedef void(__cdecl* tCalcRaceRoute)(tOpponent_spec* pOpponent_spec);
static tCalcRaceRoute CalcRaceRoute = (tCalcRaceRoute)0x402512;
typedef void(__cdecl* tTopUpRandomRoute)(tOpponent_spec* pOpponent_spec, int pSections_to_add);
static tTopUpRandomRoute TopUpRandomRoute = (tTopUpRandomRoute)0x402e11;
typedef int(__cdecl* tSearchForSection)(tRoute_section* pTemp_store, tRoute_section* pPerm_store, int* pNum_of_perm_store_sections, tS16 pTarget_section, int pDepth, br_scalar pDistance_so_far, tOpponent_spec* pOpponent_spec);
static tSearchForSection SearchForSection = (tSearchForSection)0x407f5d;
typedef void(__cdecl* tCalcGetNearPlayerRoute)(tOpponent_spec* pOpponent_spec, tCar_spec* pPlayer);
static tCalcGetNearPlayerRoute CalcGetNearPlayerRoute = (tCalcGetNearPlayerRoute)0x4089bf;
typedef void(__cdecl* tClearOpponentsProjectedRoute)(tOpponent_spec* pOpponent_spec);
static tClearOpponentsProjectedRoute ClearOpponentsProjectedRoute = (tClearOpponentsProjectedRoute)0x404684;
typedef int(__cdecl* tAddToOpponentsProjectedRoute)(tOpponent_spec* pOpponent_spec, tS16 pSection_no, int pDirection);
static tAddToOpponentsProjectedRoute AddToOpponentsProjectedRoute = (tAddToOpponentsProjectedRoute)0x4030ef;
typedef int(__cdecl* tShiftOpponentsProjectedRoute)(tOpponent_spec* pOpponent_spec, int pPlaces);
static tShiftOpponentsProjectedRoute ShiftOpponentsProjectedRoute = (tShiftOpponentsProjectedRoute)0x404699;
typedef void(__cdecl* tStunTheBugger)(tOpponent_spec* pOpponent_spec, int pMilliseconds);
static tStunTheBugger StunTheBugger = (tStunTheBugger)0x40b12d;
typedef void(__cdecl* tUnStunTheBugger)(tOpponent_spec* pOpponent_spec);
static tUnStunTheBugger UnStunTheBugger = (tUnStunTheBugger)0x405e44;
typedef void(__cdecl* tProcessCompleteRace)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessCompleteRace ProcessCompleteRace = (tProcessCompleteRace)0x406732;
typedef void(__cdecl* tStartRecordingTrail)(tCar_spec* pPursuee);
static tStartRecordingTrail StartRecordingTrail = (tStartRecordingTrail)0x405e59;
typedef void(__cdecl* tRecordNextTrailNode)(tCar_spec* pPursuee);
static tRecordNextTrailNode RecordNextTrailNode = (tRecordNextTrailNode)0x405f97;
typedef tS16(__cdecl* tCalcNextTrailSection)(tOpponent_spec* pOpponent_spec, int pSection);
static tCalcNextTrailSection CalcNextTrailSection = (tCalcNextTrailSection)0x403145;
typedef void(__cdecl* tProcessPursueAndTwat)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessPursueAndTwat ProcessPursueAndTwat = (tProcessPursueAndTwat)0x406a69;
typedef void(__cdecl* tProcessWaitForSomeHaplessSod)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessWaitForSomeHaplessSod ProcessWaitForSomeHaplessSod = (tProcessWaitForSomeHaplessSod)0x4079da;
typedef void(__cdecl* tProcessReturnToStart)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessReturnToStart ProcessReturnToStart = (tProcessReturnToStart)0x407a66;
typedef void(__cdecl* tProcessLevitate)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessLevitate ProcessLevitate = (tProcessLevitate)0x408349;
typedef void(__cdecl* tProcessGetNearPlayer)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessGetNearPlayer ProcessGetNearPlayer = (tProcessGetNearPlayer)0x4086fe;
typedef void(__cdecl* tProcessFrozen)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand);
static tProcessFrozen ProcessFrozen = (tProcessFrozen)0x408d47;
typedef int(__cdecl* tHeadOnWithPlayerPossible)(tOpponent_spec* pOpponent_spec);
static tHeadOnWithPlayerPossible HeadOnWithPlayerPossible = (tHeadOnWithPlayerPossible)0x409cd5;
typedef int(__cdecl* tAlreadyPursuingCar)(tOpponent_spec* pOpponent_spec, tCar_spec* pPursuee);
static tAlreadyPursuingCar AlreadyPursuingCar = (tAlreadyPursuingCar)0x409e29;
typedef int(__cdecl* tLastTwatteeAPlayer)(tOpponent_spec* pOpponent_spec);
static tLastTwatteeAPlayer LastTwatteeAPlayer = (tLastTwatteeAPlayer)0x409e64;
typedef int(__cdecl* tLastTwatterAPlayer)(tOpponent_spec* pOpponent_spec);
static tLastTwatterAPlayer LastTwatterAPlayer = (tLastTwatterAPlayer)0x409ea9;
typedef void(__cdecl* tObjectiveComplete)(tOpponent_spec* pOpponent_spec);
static tObjectiveComplete ObjectiveComplete = (tObjectiveComplete)0x408e2d;
typedef void(__cdecl* tTeleportOpponentToNearestSafeLocation)(tOpponent_spec* pOpponent_spec);
static tTeleportOpponentToNearestSafeLocation TeleportOpponentToNearestSafeLocation = (tTeleportOpponentToNearestSafeLocation)0x404464;
typedef void(__cdecl* tChooseNewObjective)(tOpponent_spec* pOpponent_spec, int pMust_choose_one);
static tChooseNewObjective ChooseNewObjective = (tChooseNewObjective)0x408ec5;
typedef void(__cdecl* tProcessThisOpponent)(tOpponent_spec* pOpponent_spec);
static tProcessThisOpponent ProcessThisOpponent = (tProcessThisOpponent)0x406458;
typedef int(__cdecl* tIsNetCarActive)(br_vector3* pPoint);
static tIsNetCarActive IsNetCarActive = (tIsNetCarActive)0x4034b7;
typedef void(__cdecl* tRebuildActiveCarList)();
static tRebuildActiveCarList RebuildActiveCarList = (tRebuildActiveCarList)0x4031c3;
typedef void(__cdecl* tForceRebuildActiveCarList)();
static tForceRebuildActiveCarList ForceRebuildActiveCarList = (tForceRebuildActiveCarList)0x40319c;
typedef void(__cdecl* tStartToCheat)(tOpponent_spec* pOpponent_spec);
static tStartToCheat StartToCheat = (tStartToCheat)0x409eee;
typedef void(__cdecl* tOiStopCheating)(tOpponent_spec* pOpponent_spec);
static tOiStopCheating OiStopCheating = (tOiStopCheating)0x409f78;
typedef void(__cdecl* tCalcDistanceFromHome)(tOpponent_spec* pOpponent_spec);
static tCalcDistanceFromHome CalcDistanceFromHome = (tCalcDistanceFromHome)0x40a13d;
typedef int(__cdecl* tRematerialiseOpponentOnNearestSection)(tOpponent_spec* pOpponent_spec, br_scalar pSpeed);
static tRematerialiseOpponentOnNearestSection RematerialiseOpponentOnNearestSection = (tRematerialiseOpponentOnNearestSection)0x4038fe;
typedef int(__cdecl* tRematerialiseOpponent)(tOpponent_spec* pOpponent_spec, br_scalar pSpeed);
static tRematerialiseOpponent RematerialiseOpponent = (tRematerialiseOpponent)0x403ad9;
typedef void(__cdecl* tCalcPlayerConspicuousness)(tOpponent_spec* pOpponent_spec);
static tCalcPlayerConspicuousness CalcPlayerConspicuousness = (tCalcPlayerConspicuousness)0x40a1ab;
typedef void(__cdecl* tCalcOpponentConspicuousnessWithAViewToCheatingLikeFuck)(tOpponent_spec* pOpponent_spec);
static tCalcOpponentConspicuousnessWithAViewToCheatingLikeFuck CalcOpponentConspicuousnessWithAViewToCheatingLikeFuck = (tCalcOpponentConspicuousnessWithAViewToCheatingLikeFuck)0x404a0e;
typedef void(__cdecl* tLoadCopCars)();
static tLoadCopCars LoadCopCars = (tLoadCopCars)0x404ad9;
typedef void(__cdecl* tLoadInOppoPaths)(FILE* pF);
static tLoadInOppoPaths LoadInOppoPaths = (tLoadInOppoPaths)0x404b9b;
typedef void(__cdecl* tMungeOpponents)(tU32 pFrame_period);
static tMungeOpponents MungeOpponents = (tMungeOpponents)0x4059a0;
typedef void(__cdecl* tSetInitialCopPositions)();
static tSetInitialCopPositions SetInitialCopPositions = (tSetInitialCopPositions)0x40a3a5;
typedef void(__cdecl* tInitOpponents)(tRace_info* pRace_info);
static tInitOpponents InitOpponents = (tInitOpponents)0x40a4ce;
typedef void(__cdecl* tDisposeOpponents)();
static tDisposeOpponents DisposeOpponents = (tDisposeOpponents)0x40b186;
typedef void(__cdecl* tWakeUpOpponentsToTheFactThatTheStartHasBeenJumped)(int pWhat_the_countdown_was);
static tWakeUpOpponentsToTheFactThatTheStartHasBeenJumped WakeUpOpponentsToTheFactThatTheStartHasBeenJumped = (tWakeUpOpponentsToTheFactThatTheStartHasBeenJumped)0x40b20f;
typedef int(__cdecl* tGetCarCount)(tVehicle_type pCategory);
static tGetCarCount GetCarCount = (tGetCarCount)0x40b412;
typedef tCar_spec* (__cdecl* tGetCarSpec)(tVehicle_type pCategory, int pIndex);
static tGetCarSpec GetCarSpec = (tGetCarSpec)0x40b4b1;
typedef tOpponent_spec* (__cdecl* tGetOpponentSpecFromCarSpec)(tCar_spec* pCar_spec);
static tGetOpponentSpecFromCarSpec GetOpponentSpecFromCarSpec = (tGetOpponentSpecFromCarSpec)0x40b639;
typedef tCar_spec* (__cdecl* tGetCarSpecFromGlobalOppoIndex)(int pIndex);
static tGetCarSpecFromGlobalOppoIndex GetCarSpecFromGlobalOppoIndex = (tGetCarSpecFromGlobalOppoIndex)0x40b74d;
typedef int(__cdecl* tGetOpponentsRealSection)(tOpponent_spec* pOpponent_spec, int pSection_no);
static tGetOpponentsRealSection GetOpponentsRealSection = (tGetOpponentsRealSection)0x40b7b7;
typedef int(__cdecl* tGetOpponentsFirstSection)(tOpponent_spec* pOpponent_spec);
static tGetOpponentsFirstSection GetOpponentsFirstSection = (tGetOpponentsFirstSection)0x40b806;
typedef int(__cdecl* tGetOpponentsNextSection)(tOpponent_spec* pOpponent_spec, tS16 pCurrent_section);
static tGetOpponentsNextSection GetOpponentsNextSection = (tGetOpponentsNextSection)0x40b86e;
typedef br_vector3* (__cdecl* tGetOpponentsSectionStartNodePoint)(tOpponent_spec* pOpponent_spec, tS16 pSection);
static tGetOpponentsSectionStartNodePoint GetOpponentsSectionStartNodePoint = (tGetOpponentsSectionStartNodePoint)0x40baa1;
typedef br_vector3* (__cdecl* tGetOpponentsSectionFinishNodePoint)(tOpponent_spec* pOpponent_spec, tS16 pSection);
static tGetOpponentsSectionFinishNodePoint GetOpponentsSectionFinishNodePoint = (tGetOpponentsSectionFinishNodePoint)0x40bbc3;
typedef br_scalar(__cdecl* tGetOpponentsSectionWidth)(tOpponent_spec* pOpponent_spec, tS16 pSection);
static tGetOpponentsSectionWidth GetOpponentsSectionWidth = (tGetOpponentsSectionWidth)0x40bccd;
typedef int(__cdecl* tGetOpponentsSectionMinSpeed)(tOpponent_spec* pOpponent_spec, tS16 pSection, int pTowards_finish);
static tGetOpponentsSectionMinSpeed GetOpponentsSectionMinSpeed = (tGetOpponentsSectionMinSpeed)0x40bd7a;
typedef int(__cdecl* tGetOpponentsSectionMaxSpeed)(tOpponent_spec* pOpponent_spec, tS16 pSection, int pTowards_finish);
static tGetOpponentsSectionMaxSpeed GetOpponentsSectionMaxSpeed = (tGetOpponentsSectionMaxSpeed)0x40be6e;
typedef void(__cdecl* tClearTwattageOccurrenceVariables)(tOpponent_spec* pOpponent_spec);
static tClearTwattageOccurrenceVariables ClearTwattageOccurrenceVariables = (tClearTwattageOccurrenceVariables)0x40bf8d;
typedef void(__cdecl* tTwoCarsHitEachOther)(tCar_spec* pA_car, tCar_spec* pAnother_car);
static tTwoCarsHitEachOther TwoCarsHitEachOther = (tTwoCarsHitEachOther)0x40bfdf;
typedef void(__cdecl* tRecordOpponentTwattageOccurrence)(tCar_spec* pTwatter, tCar_spec* pTwattee);
static tRecordOpponentTwattageOccurrence RecordOpponentTwattageOccurrence = (tRecordOpponentTwattageOccurrence)0x40c020;
typedef void(__cdecl* tToggleOpponentTest)();
static tToggleOpponentTest ToggleOpponentTest = (tToggleOpponentTest)0x40c537;
typedef void(__cdecl* tToggleOpponentProcessing)();
static tToggleOpponentProcessing ToggleOpponentProcessing = (tToggleOpponentProcessing)0x40c568;
typedef void(__cdecl* tToggleMellowOpponents)();
static tToggleMellowOpponents ToggleMellowOpponents = (tToggleMellowOpponents)0x40c6dd;
typedef void(__cdecl* tDeleteSection)(tS16 pSection_to_delete);
static tDeleteSection DeleteSection = (tDeleteSection)0x40c868;
typedef void(__cdecl* tDeleteNode)(tS16 pNode_to_delete, int pAnd_sections);
static tDeleteNode DeleteNode = (tDeleteNode)0x40caf4;
typedef void(__cdecl* tDeleteOrphanNodes)();
static tDeleteOrphanNodes DeleteOrphanNodes = (tDeleteOrphanNodes)0x40ca84;
typedef void(__cdecl* tTrackElasticateyPath)();
static tTrackElasticateyPath TrackElasticateyPath = (tTrackElasticateyPath)0x40ce66;
typedef void(__cdecl* tCalcNegativeXVector)(br_vector3* pNegative_x_vector, br_vector3* pStart, br_vector3* pFinish, br_scalar pLength);
static tCalcNegativeXVector CalcNegativeXVector = (tCalcNegativeXVector)0x40cf4e;
typedef void(__cdecl* tRebuildOppoPathModel)();
static tRebuildOppoPathModel RebuildOppoPathModel = (tRebuildOppoPathModel)0x40d097;
typedef int(__cdecl* tConsistencyCheck)();
static tConsistencyCheck ConsistencyCheck = (tConsistencyCheck)0x40e436;
typedef void(__cdecl* tWriteOutOppoPaths)();
static tWriteOutOppoPaths WriteOutOppoPaths = (tWriteOutOppoPaths)0x40e9d4;
typedef void(__cdecl* tShowHideOppoPaths)();
static tShowHideOppoPaths ShowHideOppoPaths = (tShowHideOppoPaths)0x40ed4b;
typedef void(__cdecl* tDropElasticateyNode)();
static tDropElasticateyNode DropElasticateyNode = (tDropElasticateyNode)0x40ee30;
typedef void(__cdecl* tInsertAndElasticate)();
static tInsertAndElasticate InsertAndElasticate = (tInsertAndElasticate)0x40f565;
typedef void(__cdecl* tInsertAndDontElasticate)();
static tInsertAndDontElasticate InsertAndDontElasticate = (tInsertAndDontElasticate)0x40fdf3;
typedef void(__cdecl* tDropDeadEndNode)();
static tDropDeadEndNode DropDeadEndNode = (tDropDeadEndNode)0x4100f3;
typedef void(__cdecl* tDropNodeOnNodeAndStopElasticating)();
static tDropNodeOnNodeAndStopElasticating DropNodeOnNodeAndStopElasticating = (tDropNodeOnNodeAndStopElasticating)0x41020c;
typedef void(__cdecl* tWidenOppoPathSection)();
static tWidenOppoPathSection WidenOppoPathSection = (tWidenOppoPathSection)0x4103c5;
typedef void(__cdecl* tNarrowOppoPathSection)();
static tNarrowOppoPathSection NarrowOppoPathSection = (tNarrowOppoPathSection)0x410573;
typedef void(__cdecl* tIncreaseSectionMinSpeed)();
static tIncreaseSectionMinSpeed IncreaseSectionMinSpeed = (tIncreaseSectionMinSpeed)0x41059d;
typedef void(__cdecl* tDecreaseSectionMinSpeed)();
static tDecreaseSectionMinSpeed DecreaseSectionMinSpeed = (tDecreaseSectionMinSpeed)0x410a7f;
typedef void(__cdecl* tIncreaseSectionMaxSpeed)();
static tIncreaseSectionMaxSpeed IncreaseSectionMaxSpeed = (tIncreaseSectionMaxSpeed)0x410aa8;
typedef void(__cdecl* tDecreaseSectionMaxSpeed)();
static tDecreaseSectionMaxSpeed DecreaseSectionMaxSpeed = (tDecreaseSectionMaxSpeed)0x410ad1;
typedef void(__cdecl* tPullOppoPoint)();
static tPullOppoPoint PullOppoPoint = (tPullOppoPoint)0x410afa;
typedef void(__cdecl* tShowNodeInfo)();
static tShowNodeInfo ShowNodeInfo = (tShowNodeInfo)0x410bfa;
typedef void(__cdecl* tShowSectionInfo1)();
static tShowSectionInfo1 ShowSectionInfo1 = (tShowSectionInfo1)0x410d28;
typedef void(__cdecl* tShowSectionInfo2)();
static tShowSectionInfo2 ShowSectionInfo2 = (tShowSectionInfo2)0x410e9b;
typedef void(__cdecl* tDeleteOppoPathSection)();
static tDeleteOppoPathSection DeleteOppoPathSection = (tDeleteOppoPathSection)0x411124;
typedef void(__cdecl* tDeleteOppoPathNodeAndSections)();
static tDeleteOppoPathNodeAndSections DeleteOppoPathNodeAndSections = (tDeleteOppoPathNodeAndSections)0x411206;
typedef void(__cdecl* tDeleteOppoPathNodeAndJoin)();
static tDeleteOppoPathNodeAndJoin DeleteOppoPathNodeAndJoin = (tDeleteOppoPathNodeAndJoin)0x4112e2;
typedef void(__cdecl* tReverseSectionDirection)();
static tReverseSectionDirection ReverseSectionDirection = (tReverseSectionDirection)0x4114dd;
typedef void(__cdecl* tCycleSectionType)();
static tCycleSectionType CycleSectionType = (tCycleSectionType)0x41169c;
typedef void(__cdecl* tToggleOneWayNess)();
static tToggleOneWayNess ToggleOneWayNess = (tToggleOneWayNess)0x4117ee;
typedef void(__cdecl* tCopStartPointInfo)();
static tCopStartPointInfo CopStartPointInfo = (tCopStartPointInfo)0x411947;
typedef void(__cdecl* tDropCopStartPoint)();
static tDropCopStartPoint DropCopStartPoint = (tDropCopStartPoint)0x411ae8;
typedef void(__cdecl* tDeleteCopStartPoint)();
static tDeleteCopStartPoint DeleteCopStartPoint = (tDeleteCopStartPoint)0x411c18;
HOOK_VARIABLE_IMPLEMENT_ARRAY(char*, gOil_pixie_names, 1, 0x509a38);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_pixelmap*, gOil_pixies, 1, 0x551dc0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tOil_spill_info, gOily_spills, 15, 0x551dd0);
typedef void(__cdecl* tInitOilSpills)();
static tInitOilSpills InitOilSpills = (tInitOilSpills)0x412510;
typedef void(__cdecl* tResetOilSpills)();
static tResetOilSpills ResetOilSpills = (tResetOilSpills)0x412859;
typedef void(__cdecl* tQueueOilSpill)(tCar_spec* pCar);
static tQueueOilSpill QueueOilSpill = (tQueueOilSpill)0x4128c7;
typedef void(__cdecl* tVector3Interpolate)(br_vector3* pDst, br_vector3* pFrom, br_vector3* pTo, br_scalar pP);
static tVector3Interpolate Vector3Interpolate = (tVector3Interpolate)0x412b76;
typedef void(__cdecl* tEnsureGroundDetailVisible)(br_vector3* pNew_pos, br_vector3* pGround_normal, br_vector3* pOld_pos);
static tEnsureGroundDetailVisible EnsureGroundDetailVisible = (tEnsureGroundDetailVisible)0x412a81;
typedef void(__cdecl* tMungeIndexedOilsHeightAboveGround)(int pIndex);
static tMungeIndexedOilsHeightAboveGround MungeIndexedOilsHeightAboveGround = (tMungeIndexedOilsHeightAboveGround)0x412bce;
typedef void(__cdecl* tProcessOilSpills)(tU32 pFrame_period);
static tProcessOilSpills ProcessOilSpills = (tProcessOilSpills)0x412c20;
typedef int(__cdecl* tGetOilSpillCount)();
static tGetOilSpillCount GetOilSpillCount = (tGetOilSpillCount)0x413852;
typedef void(__cdecl* tGetOilSpillDetails)(int pIndex, br_actor** pActor, br_scalar* pSize);
static tGetOilSpillDetails GetOilSpillDetails = (tGetOilSpillDetails)0x413867;
typedef int(__cdecl* tPointInSpill)(br_vector3* pV, int pSpill);
static tPointInSpill PointInSpill = (tPointInSpill)0x413b72;
typedef void(__cdecl* tGetOilFrictionFactors)(tCar_spec* pCar, br_scalar* pFl_factor, br_scalar* pFr_factor, br_scalar* pRl_factor, br_scalar* pRr_factor);
static tGetOilFrictionFactors GetOilFrictionFactors = (tGetOilFrictionFactors)0x4138c7;
HOOK_VARIABLE_IMPLEMENT(tU8*, gPipe_buffer_start, 0x50ba00);
typedef int(__cdecl* tIsActionReplayAvailable)();
static tIsActionReplayAvailable IsActionReplayAvailable = (tIsActionReplayAvailable)0x428078;
typedef void(__cdecl* tStartPipingSession)(tPipe_chunk_type pThe_type);
static tStartPipingSession StartPipingSession = (tStartPipingSession)0x42868f;
typedef void(__cdecl* tEndPipingSession)();
static tEndPipingSession EndPipingSession = (tEndPipingSession)0x42884c;
typedef void(__cdecl* tAddSmudgeToPipingSession)(tU16 pCar_ID, int pModel_index, int pVertex_count, tSmudged_vertex* pCoordinates);
static tAddSmudgeToPipingSession AddSmudgeToPipingSession = (tAddSmudgeToPipingSession)0x42898f;
typedef void(__cdecl* tAddPedestrianToPipingSession)(int pPedestrian_index, br_matrix34* pTrans, tU8 pAction_index, tU8 pFrame_index, tS8 pHit_points, int pDone_initial, tU16 pParent_ID, float pSpin_period, br_scalar pJump_magnitude, br_vector3* pOffset);
static tAddPedestrianToPipingSession AddPedestrianToPipingSession = (tAddPedestrianToPipingSession)0x428a1a;
typedef void(__cdecl* tAddSparkToPipingSession)(int pSpark_index, br_vector3* pPos, br_vector3* pV);
static tAddSparkToPipingSession AddSparkToPipingSession = (tAddSparkToPipingSession)0x428af9;
typedef void(__cdecl* tAddShrapnelToPipingSession)(int pShrapnel_index, br_vector3* pPos, tU16 pAge, br_material* pMaterial);
static tAddShrapnelToPipingSession AddShrapnelToPipingSession = (tAddShrapnelToPipingSession)0x428b4d;
typedef void(__cdecl* tAddNonCarToPipingSession)(int pIndex, br_actor* pActor);
static tAddNonCarToPipingSession AddNonCarToPipingSession = (tAddNonCarToPipingSession)0x428c26;
typedef void(__cdecl* tAddSmokeToPipingSession)(int pIndex, tU8 pType, br_vector3* pPos, br_scalar pRadius, br_scalar pStrength);
static tAddSmokeToPipingSession AddSmokeToPipingSession = (tAddSmokeToPipingSession)0x428c5f;
typedef void(__cdecl* tAddSmokeColumnToPipingSession)(int pIndex, tCar_spec* pCar, int pVertex, int pColour);
static tAddSmokeColumnToPipingSession AddSmokeColumnToPipingSession = (tAddSmokeColumnToPipingSession)0x428cb8;
typedef void(__cdecl* tAddFlameToPipingSession)(int pIndex, int pFrame_count, br_scalar pScale_x, br_scalar pScale_y, br_scalar pOffset_x, br_scalar pOffset_z);
static tAddFlameToPipingSession AddFlameToPipingSession = (tAddFlameToPipingSession)0x428cf7;
typedef void(__cdecl* tAddSplashToPipingSession)(tCollision_info* pCar);
static tAddSplashToPipingSession AddSplashToPipingSession = (tAddSplashToPipingSession)0x428d36;
typedef void(__cdecl* tAddSoundToPipingSession)(tS3_outlet_ptr pOutlet, int pSound_index, tS3_volume pL_volume, tS3_volume pR_volume, tS3_pitch pPitch, br_vector3* pPos);
static tAddSoundToPipingSession AddSoundToPipingSession = (tAddSoundToPipingSession)0x428f38;
typedef void(__cdecl* tPipeSingleModelGeometry)(tU16 pCar_ID, int pModel_index, int pVertex_count, tChanged_vertex* pCoordinates);
static tPipeSingleModelGeometry PipeSingleModelGeometry = (tPipeSingleModelGeometry)0x429186;
typedef void(__cdecl* tPipeSingleSound)(tS3_outlet_ptr pOutlet, int pSound_index, tS3_volume pL_volume, tS3_volume pR_volume, tS3_pitch pPitch, br_vector3* pPos);
static tPipeSingleSound PipeSingleSound = (tPipeSingleSound)0x429254;
typedef void(__cdecl* tPipeSingleSpecial)(tSpecial_type pType);
static tPipeSingleSpecial PipeSingleSpecial = (tPipeSingleSpecial)0x429318;
typedef void(__cdecl* tPipeSingleCarIncident)(float pSeverity, tCar_spec* pCar, br_vector3* pImpact_point);
static tPipeSingleCarIncident PipeSingleCarIncident = (tPipeSingleCarIncident)0x429374;
typedef void(__cdecl* tPipeSingleWallIncident)(float pSeverity, br_vector3* pImpact_point);
static tPipeSingleWallIncident PipeSingleWallIncident = (tPipeSingleWallIncident)0x4293d6;
typedef void(__cdecl* tPipeSingleGrooveStop)(int pGroove_index, br_matrix34* pMatrix, int pPath_interrupt, int pObject_interrupt, float pPath_resumption, float pObject_resumption);
static tPipeSingleGrooveStop PipeSingleGrooveStop = (tPipeSingleGrooveStop)0x42943f;
typedef void(__cdecl* tPipeFrameFinish)();
static tPipeFrameFinish PipeFrameFinish = (tPipeFrameFinish)0x429479;
typedef void(__cdecl* tPipeSingleSkidAdjustment)(int pSkid_num, br_matrix34* pMatrix, int pMaterial_index);
static tPipeSingleSkidAdjustment PipeSingleSkidAdjustment = (tPipeSingleSkidAdjustment)0x42952b;
typedef void(__cdecl* tInitialisePiping)();
static tInitialisePiping InitialisePiping = (tInitialisePiping)0x429596;
typedef void(__cdecl* tInitLastDamageArrayEtc)();
static tInitLastDamageArrayEtc InitLastDamageArrayEtc = (tInitLastDamageArrayEtc)0x4296e9;
typedef void(__cdecl* tPipeCarPositions)();
static tPipeCarPositions PipeCarPositions = (tPipeCarPositions)0x42987f;
HOOK_VARIABLE_IMPLEMENT_ARRAY(tHeadup_info, gHeadup_image_info, 32, 0x50a3f0);
HOOK_VARIABLE_IMPLEMENT(char*, gDamage_names, 0x50a530);
HOOK_VARIABLE_IMPLEMENT(char*, gWheel_actor_names, 0x50a560);
HOOK_VARIABLE_IMPLEMENT(char*, gFloorpan_names, 0x50a5b0);
HOOK_VARIABLE_IMPLEMENT(char, gDecode_string, 0x50a5d0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gFunk_groove_flags, 30, 0x531f00);
HOOK_VARIABLE_IMPLEMENT_ARRAY(char, gDef_def_water_screen_name, 32, 0x531f80);
HOOK_VARIABLE_IMPLEMENT(br_material*, gDestn_screen_mat, 0x531dfc);
HOOK_VARIABLE_IMPLEMENT(br_material*, gSource_screen_mat, 0x531f78);
HOOK_VARIABLE_IMPLEMENT(int, gGroove_funk_offset, 0x531df8);
HOOK_VARIABLE_IMPLEMENT(int, gDemo_armour, 0x551da8);
HOOK_VARIABLE_IMPLEMENT(int, gDemo_rank, 0x551db0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gDemo_opponents, 5, 0x551d90);
HOOK_VARIABLE_IMPLEMENT(int, gDemo_power, 0x551da4);
HOOK_VARIABLE_IMPLEMENT(int, gDemo_offensive, 0x551dac);
typedef tS32(__cdecl* tReadS32)(FILE* pF);
static tReadS32 ReadS32 = (tReadS32)0x41c32f;
typedef tU16(__cdecl* tMemReadU16)(char** pPtr);
static tMemReadU16 MemReadU16 = (tMemReadU16)0x41c4e5;
typedef tU8(__cdecl* tMemReadU8)(char** pPtr);
static tMemReadU8 MemReadU8 = (tMemReadU8)0x41c50e;
typedef tS16(__cdecl* tMemReadS16)(char** pPtr);
static tMemReadS16 MemReadS16 = (tMemReadS16)0x41c559;
typedef tS8(__cdecl* tMemReadS8)(char** pPtr);
static tMemReadS8 MemReadS8 = (tMemReadS8)0x41c582;
typedef void(__cdecl* tLoadGeneralParameters)();
static tLoadGeneralParameters LoadGeneralParameters = (tLoadGeneralParameters)0x41c5ba;
typedef void(__cdecl* tFinishLoadingGeneral)();
static tFinishLoadingGeneral FinishLoadingGeneral = (tFinishLoadingGeneral)0x41d210;
typedef br_pixelmap* (__cdecl* tLoadPixelmap)(char* pName);
static tLoadPixelmap LoadPixelmap = (tLoadPixelmap)0x41d22d;
typedef br_material* (__cdecl* tLoadMaterial)(char* pName);
static tLoadMaterial LoadMaterial = (tLoadMaterial)0x41d4c8;
typedef br_model* (__cdecl* tLoadModel)(char* pName);
static tLoadModel LoadModel = (tLoadModel)0x41d525;
typedef br_actor* (__cdecl* tLoadActor)(char* pName);
static tLoadActor LoadActor = (tLoadActor)0x41d582;
typedef void(__cdecl* tLoadInRegisteeDir)(char* pThe_dir_path);
static tLoadInRegisteeDir LoadInRegisteeDir = (tLoadInRegisteeDir)0x41d5fd;
typedef void(__cdecl* tLoadInRegistees)();
static tLoadInRegistees LoadInRegistees = (tLoadInRegistees)0x41d5df;
typedef void(__cdecl* tLoadKeyMapping)();
static tLoadKeyMapping LoadKeyMapping = (tLoadKeyMapping)0x41d992;
typedef void(__cdecl* tInitInterfaceLoadState)();
static tInitInterfaceLoadState InitInterfaceLoadState = (tInitInterfaceLoadState)0x41dcc7;
typedef tS8* (__cdecl* tConvertPixToStripMap)(br_pixelmap* pThe_br_map);
static tConvertPixToStripMap ConvertPixToStripMap = (tConvertPixToStripMap)0x41dd01;
typedef void(__cdecl* tKillWindscreen)(br_model* pModel, br_material* pMaterial);
static tKillWindscreen KillWindscreen = (tKillWindscreen)0x41e4de;
typedef void(__cdecl* tDropOffDyingPeds)(tCar_spec* pCar);
static tDropOffDyingPeds DropOffDyingPeds = (tDropOffDyingPeds)0x41e564;
typedef void(__cdecl* tDisposeCar)(tCar_spec* pCar_spec, int pOwner);
static tDisposeCar DisposeCar = (tDisposeCar)0x41dfbd;
typedef void(__cdecl* tAdjustCarCoordinates)(tCar_spec* pCar);
static tAdjustCarCoordinates AdjustCarCoordinates = (tAdjustCarCoordinates)0x422a79;
typedef void(__cdecl* tLoadSpeedo)(FILE* pF, int pIndex, tCar_spec* pCar_spec);
static tLoadSpeedo LoadSpeedo = (tLoadSpeedo)0x422d43;
typedef void(__cdecl* tLoadTacho)(FILE* pF, int pIndex, tCar_spec* pCar_spec);
static tLoadTacho LoadTacho = (tLoadTacho)0x4230de;
typedef void(__cdecl* tLoadHeadups)(FILE* pF, int pIndex, tCar_spec* pCar_spec);
static tLoadHeadups LoadHeadups = (tLoadHeadups)0x4233d3;
typedef void(__cdecl* tReadNonCarMechanicsData)(FILE* pF, tNon_car_spec* non_car);
static tReadNonCarMechanicsData ReadNonCarMechanicsData = (tReadNonCarMechanicsData)0x41e5d0;
typedef void(__cdecl* tReadMechanicsData)(FILE* pF, tCar_spec* c);
static tReadMechanicsData ReadMechanicsData = (tReadMechanicsData)0x41edfb;
typedef void(__cdecl* tLoadGear)(FILE* pF, int pIndex, tCar_spec* pCar_spec);
static tLoadGear LoadGear = (tLoadGear)0x4237be;
typedef void(__cdecl* tAddRefOffset)(int* pRef_holder);
static tAddRefOffset AddRefOffset = (tAddRefOffset)0x42387c;
typedef void(__cdecl* tGetDamageProgram)(FILE* pF, tCar_spec* pCar_spec, tImpact_location pImpact_location);
static tGetDamageProgram GetDamageProgram = (tGetDamageProgram)0x42389d;
typedef intptr_t(__cdecl* tLinkModel)(br_actor* pActor, tModel_pool* pModel_pool);
static tLinkModel LinkModel = (tLinkModel)0x423d40;
typedef void(__cdecl* tFreeUpBonnetModels)(br_model** pModel_array, int pModel_count);
static tFreeUpBonnetModels FreeUpBonnetModels = (tFreeUpBonnetModels)0x423c66;
typedef void(__cdecl* tLinkModelsToActor)(br_actor* pActor, br_model** pModel_array, int pModel_count);
static tLinkModelsToActor LinkModelsToActor = (tLinkModelsToActor)0x423d11;
typedef void(__cdecl* tReadShrapnelMaterials)(FILE* pF, tCollision_info* pCar_spec);
static tReadShrapnelMaterials ReadShrapnelMaterials = (tReadShrapnelMaterials)0x41fde3;
typedef int(__cdecl* tRemoveDoubleSided)(br_model* pModel);
static tRemoveDoubleSided RemoveDoubleSided = (tRemoveDoubleSided)0x41ff58;
typedef void(__cdecl* tMungeWindscreen)(br_model* pModel);
static tMungeWindscreen MungeWindscreen = (tMungeWindscreen)0x423e17;
typedef void(__cdecl* tSetModelFlags)(br_model* pModel, int pOwner);
static tSetModelFlags SetModelFlags = (tSetModelFlags)0x423f0b;
typedef void(__cdecl* tLoadCar)(char* pCar_name, tDriver pDriver, tCar_spec* pCar_spec, int pOwner, char* pDriver_name, tBrender_storage* pStorage_space);
static tLoadCar LoadCar = (tLoadCar)0x420144;
typedef void(__cdecl* tLoadHeadupImages)();
static tLoadHeadupImages LoadHeadupImages = (tLoadHeadupImages)0x423fad;
typedef FILE* (__cdecl* tOpenRaceFile)();
static tOpenRaceFile OpenRaceFile = (tOpenRaceFile)0x4240b1;
typedef void(__cdecl* tSkipRestOfRace)(FILE* pF);
static tSkipRestOfRace SkipRestOfRace = (tSkipRestOfRace)0x42434a;
typedef void(__cdecl* tLoadRaces)(tRace_list_spec* pRace_list, int* pCount, int pRace_type_index);
static tLoadRaces LoadRaces = (tLoadRaces)0x424116;
typedef void(__cdecl* tUnlockOpponentMugshot)(int pIndex);
static tUnlockOpponentMugshot UnlockOpponentMugshot = (tUnlockOpponentMugshot)0x424466;
typedef void(__cdecl* tLoadRaceInfo)(int pRace_index, tRace_info* pRace_info);
static tLoadRaceInfo LoadRaceInfo = (tLoadRaceInfo)0x42466e;
typedef void(__cdecl* tDisposeRaceInfo)(tRace_info* pRace_info);
static tDisposeRaceInfo DisposeRaceInfo = (tDisposeRaceInfo)0x424ac0;
typedef void(__cdecl* tLoadOpponents)();
static tLoadOpponents LoadOpponents = (tLoadOpponents)0x424d15;
typedef int(__cdecl* tGetALineAndInterpretCommand)(FILE* pF, char** pString_list, int pCount);
static tGetALineAndInterpretCommand GetALineAndInterpretCommand = (tGetALineAndInterpretCommand)0x4257b0;
typedef int(__cdecl* tGetAnInt)(FILE* pF);
static tGetAnInt GetAnInt = (tGetAnInt)0x425878;
typedef float(__cdecl* tGetAFloat)(FILE* pF);
static tGetAFloat GetAFloat = (tGetAFloat)0x4258d0;
typedef void(__cdecl* tGetPairOfFloats)(FILE* pF, float* pF1, float* pF2);
static tGetPairOfFloats GetPairOfFloats = (tGetPairOfFloats)0x425986;
typedef void(__cdecl* tGetThreeFloats)(FILE* pF, float* pF1, float* pF2, float* pF3);
static tGetThreeFloats GetThreeFloats = (tGetThreeFloats)0x4259fd;
typedef void(__cdecl* tGetPairOfInts)(FILE* pF, int* pF1, int* pF2);
static tGetPairOfInts GetPairOfInts = (tGetPairOfInts)0x425a9b;
typedef void(__cdecl* tGetThreeInts)(FILE* pF, int* pF1, int* pF2, int* pF3);
static tGetThreeInts GetThreeInts = (tGetThreeInts)0x425b12;
typedef void(__cdecl* tGetFourInts)(FILE* pF, int* pF1, int* pF2, int* pF3, int* pF4);
static tGetFourInts GetFourInts = (tGetFourInts)0x425c85;
typedef br_scalar(__cdecl* tGetAScalar)(FILE* pF);
static tGetAScalar GetAScalar = (tGetAScalar)0x425d4a;
typedef void(__cdecl* tGetThreeScalars)(FILE* pF, br_scalar* pS1, br_scalar* pS2, br_scalar* pS3);
static tGetThreeScalars GetThreeScalars = (tGetThreeScalars)0x425d98;
typedef void(__cdecl* tGetFourScalars)(FILE* pF, br_scalar* pF1, br_scalar* pF2, br_scalar* pF3, br_scalar* pF4);
static tGetFourScalars GetFourScalars = (tGetFourScalars)0x425dd6;
typedef void(__cdecl* tGetNScalars)(FILE* pF, int pNumber, br_scalar* pScalars);
static tGetNScalars GetNScalars = (tGetNScalars)0x425fdb;
typedef void(__cdecl* tGetPairOfFloatPercents)(FILE* pF, float* pF1, float* pF2);
static tGetPairOfFloatPercents GetPairOfFloatPercents = (tGetPairOfFloatPercents)0x42607b;
typedef void(__cdecl* tGetThreeFloatPercents)(FILE* pF, float* pF1, float* pF2, float* pF3);
static tGetThreeFloatPercents GetThreeFloatPercents = (tGetThreeFloatPercents)0x426112;
typedef void(__cdecl* tGetAString)(FILE* pF, char* pString);
static tGetAString GetAString = (tGetAString)0x4261e0;
typedef void(__cdecl* tLoadOpponentsCars)(tRace_info* pRace_info);
static tLoadOpponentsCars LoadOpponentsCars = (tLoadOpponentsCars)0x42625a;
typedef void(__cdecl* tDisposeOpponentsCars)(tRace_info* pRace_info);
static tDisposeOpponentsCars DisposeOpponentsCars = (tDisposeOpponentsCars)0x426359;
typedef void(__cdecl* tLoadMiscStrings)();
static tLoadMiscStrings LoadMiscStrings = (tLoadMiscStrings)0x426410;
typedef void(__cdecl* tFillInRaceInfo)(tRace_info* pThe_race);
static tFillInRaceInfo FillInRaceInfo = (tFillInRaceInfo)0x42652d;
typedef FILE* (__cdecl* tOldDRfopen)(char* pFilename, char* pMode);
static tOldDRfopen OldDRfopen = (tOldDRfopen)0x426654;
typedef void(__cdecl* tAllowOpenToFail)();
static tAllowOpenToFail AllowOpenToFail = (tAllowOpenToFail)0x426563;
typedef FILE* (__cdecl* tDRfopen)(char* pFilename, char* pMode);
static tDRfopen DRfopen = (tDRfopen)0x426583;
typedef int(__cdecl* tGetCDPathFromPathsTxtFile)(char* pPath_name);
static tGetCDPathFromPathsTxtFile GetCDPathFromPathsTxtFile = (tGetCDPathFromPathsTxtFile)0x426cc5;
typedef int(__cdecl* tTestForOriginalCarmaCDinDrive)();
static tTestForOriginalCarmaCDinDrive TestForOriginalCarmaCDinDrive = (tTestForOriginalCarmaCDinDrive)0x426d7a;
typedef int(__cdecl* tOriginalCarmaCDinDrive)();
static tOriginalCarmaCDinDrive OriginalCarmaCDinDrive = (tOriginalCarmaCDinDrive)0x427158;
typedef int(__cdecl* tSaveOptions)();
static tSaveOptions SaveOptions = (tSaveOptions)0x4273e5;
typedef int(__cdecl* tRestoreOptions)();
static tRestoreOptions RestoreOptions = (tRestoreOptions)0x4278be;
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gWobble_spam_y, 8, 0x521370);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gWobble_spam_z, 8, 0x521390);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU8, gSmoke_damage_step, 12, 0x5213b8);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gSteal_ranks, 5, 0x5213c4);
typedef int(__cdecl* tReadCrushData)(FILE* pF, tCrush_data* pCrush_data);
static tReadCrushData ReadCrushData = (tReadCrushData)0x4bca50;
typedef float(__cdecl* tSkipCrushData)(FILE* pF);
static tSkipCrushData SkipCrushData = (tSkipCrushData)0x4bcd40;
typedef void(__cdecl* tDisposeCrushData)(tCrush_data* pCrush_data);
static tDisposeCrushData DisposeCrushData = (tDisposeCrushData)0x4bd0f7;
typedef void(__cdecl* tCrushModelPoint)(tCar_spec* pCar, int pModel_index, br_model* pModel, int pCrush_point_index, br_vector3* pEnergy_vector, br_scalar total_energy, tCrush_data* pCrush_data);
static tCrushModelPoint CrushModelPoint = (tCrushModelPoint)0x4bd17b;
typedef void(__cdecl* tCrushModel)(tCar_spec* pCar, int pModel_index, br_actor* pActor, br_vector3* pImpact_point, br_vector3* pEnergy_vector, tCrush_data* pCrush_data);
static tCrushModel CrushModel = (tCrushModel)0x4bd8da;
typedef void(__cdecl* tJitModelUpdate)(br_actor* actor, br_model* model, br_material* material, void* render_data, br_uint_8 style, int on_screen);
static tJitModelUpdate JitModelUpdate = (tJitModelUpdate)0x4bdad9;
typedef void(__cdecl* tSetModelForUpdate)(br_model* pModel, tCar_spec* pCar, int crush_only);
static tSetModelForUpdate SetModelForUpdate = (tSetModelForUpdate)0x4bdb2f;
typedef void(__cdecl* tTotallySpamTheModel)(tCar_spec* pCar, int pModel_index, br_actor* pActor, tCrush_data* pCrush_data, br_scalar pMagnitude);
static tTotallySpamTheModel TotallySpamTheModel = (tTotallySpamTheModel)0x4bdbc1;
typedef br_scalar(__cdecl* tRepairModel)(tCar_spec* pCar, int pModel_index, br_actor* pActor, br_vertex* pUndamaged_vertices, br_scalar pAmount, br_scalar* pTotal_deflection);
static tRepairModel RepairModel = (tRepairModel)0x4bde6c;
typedef float(__cdecl* tRepairCar2)(tCar_spec* pCar, tU32 pFrame_period, br_scalar* pTotal_deflection);
static tRepairCar2 RepairCar2 = (tRepairCar2)0x4bdd3b;
typedef float(__cdecl* tRepairCar)(tU16 pCar_ID, tU32 pFrame_period, br_scalar* pTotal_deflection);
static tRepairCar RepairCar = (tRepairCar)0x4be159;
typedef void(__cdecl* tTotallyRepairACar)(tCar_spec* pCar);
static tTotallyRepairACar TotallyRepairACar = (tTotallyRepairACar)0x4be1ca;
typedef void(__cdecl* tTotallyRepairCar)();
static tTotallyRepairCar TotallyRepairCar = (tTotallyRepairCar)0x4be52a;
typedef void(__cdecl* tKnackerThisCar)(tCar_spec* pCar);
static tKnackerThisCar KnackerThisCar = (tKnackerThisCar)0x4be555;
typedef void(__cdecl* tSetKnackeredFlag)(tCar_spec* pCar);
static tSetKnackeredFlag SetKnackeredFlag = (tSetKnackeredFlag)0x4be619;
typedef void(__cdecl* tDamageUnit2)(tCar_spec* pCar, int pUnit_type, int pDamage_amount);
static tDamageUnit2 DamageUnit2 = (tDamageUnit2)0x4be737;
typedef void(__cdecl* tRecordLastDamage)(tCar_spec* pCar);
static tRecordLastDamage RecordLastDamage = (tRecordLastDamage)0x4be86b;
typedef void(__cdecl* tDoDamage)(tCar_spec* pCar, tDamage_type pDamage_type, float pMagnitude, float pNastiness);
static tDoDamage DoDamage = (tDoDamage)0x4bf3b9;
typedef void(__cdecl* tCheckPiledriverBonus)(tCar_spec* pCar, br_vector3* pImpact_point, br_vector3* pEnergy);
static tCheckPiledriverBonus CheckPiledriverBonus = (tCheckPiledriverBonus)0x4bf4b2;
typedef tImpact_location(__cdecl* tCalcModifiedLocation)(tCar_spec* pCar);
static tCalcModifiedLocation CalcModifiedLocation = (tCalcModifiedLocation)0x4c13e0;
typedef void(__cdecl* tDoPratcamHit)(br_vector3* pHit_vector);
static tDoPratcamHit DoPratcamHit = (tDoPratcamHit)0x4be97b;
typedef void(__cdecl* tDamageSystems)(tCar_spec* pCar, br_vector3* pImpact_point, br_vector3* pEnergy_vector, int pWas_hitting_a_car);
static tDamageSystems DamageSystems = (tDamageSystems)0x4beaa3;
typedef tImpact_location(__cdecl* tGetDirection)(br_vector3* pVelocity);
static tGetDirection GetDirection = (tGetDirection)0x4c1486;
typedef void(__cdecl* tSetSmokeLastDamageLevel)(tCar_spec* pCar);
static tSetSmokeLastDamageLevel SetSmokeLastDamageLevel = (tSetSmokeLastDamageLevel)0x4bf768;
typedef void(__cdecl* tSortOutSmoke)(tCar_spec* pCar);
static tSortOutSmoke SortOutSmoke = (tSortOutSmoke)0x4bf7c2;
typedef void(__cdecl* tStealCar)(tCar_spec* pCar);
static tStealCar StealCar = (tStealCar)0x4bf923;
typedef int(__cdecl* tDoCrashEarnings)(tCar_spec* pCar1, tCar_spec* pCar2);
static tDoCrashEarnings DoCrashEarnings = (tDoCrashEarnings)0x4bfdb3;
typedef void(__cdecl* tDoWheelDamage)(tU32 pFrame_period);
static tDoWheelDamage DoWheelDamage = (tDoWheelDamage)0x4bf96c;
typedef void(__cdecl* tCrashEarnings)(tCar_spec* pCar1, tCar_spec* pCar2);
static tCrashEarnings CrashEarnings = (tCrashEarnings)0x4bfd78;
HOOK_VARIABLE_IMPLEMENT(br_actor*, gMr_blendy, 0x53e488);
HOOK_VARIABLE_IMPLEMENT(int, gDefault_blend_pc, 0x550244);
typedef void(__cdecl* tAllocateActorMatrix)(tTrack_spec* pTrack_spec, br_actor**** pDst);
static tAllocateActorMatrix AllocateActorMatrix = (tAllocateActorMatrix)0x4a8a26;
typedef void(__cdecl* tXZToColumnXZ)(tU8* pColumn_x, tU8* pColumn_z, br_scalar pX, br_scalar pZ, tTrack_spec* pTrack_spec);
static tXZToColumnXZ XZToColumnXZ = (tXZToColumnXZ)0x4a874b;
typedef void(__cdecl* tStripBlendedFaces)(br_actor* pActor, br_model* pModel);
static tStripBlendedFaces StripBlendedFaces = (tStripBlendedFaces)0x4a8d47;
typedef intptr_t(__cdecl* tFindNonCarsCB)(br_actor* pActor, tTrack_spec* pTrack_spec);
static tFindNonCarsCB FindNonCarsCB = (tFindNonCarsCB)0x4a90ff;
typedef intptr_t(__cdecl* tProcessModelsCB)(br_actor* pActor, tTrack_spec* pTrack_spec);
static tProcessModelsCB ProcessModelsCB = (tProcessModelsCB)0x4a8afc;
typedef void(__cdecl* tProcessModels)(tTrack_spec* pTrack_spec);
static tProcessModels ProcessModels = (tProcessModels)0x4a8ad9;
typedef void(__cdecl* tExtractColumns)(tTrack_spec* pTrack_spec);
static tExtractColumns ExtractColumns = (tExtractColumns)0x4a884d;
typedef void(__cdecl* tLollipopizeActor4)(br_actor* pActor, br_matrix34* pRef_to_world, br_actor* pCamera);
static tLollipopizeActor4 LollipopizeActor4 = (tLollipopizeActor4)0x4a9dc1;
typedef intptr_t(__cdecl* tLollipopizeChildren)(br_actor* pActor, void* pArg);
static tLollipopizeChildren LollipopizeChildren = (tLollipopizeChildren)0x4a9d8d;
typedef void(__cdecl* tDrawColumns)(int pDraw_blends, tTrack_spec* pTrack_spec, int pMin_x, int pMax_x, int pMin_z, int pMax_z, br_matrix34* pCamera_to_world);
static tDrawColumns DrawColumns = (tDrawColumns)0x4a9a01;
typedef void(__cdecl* tRenderTrack)(br_actor* pWorld, tTrack_spec* pTrack_spec, br_actor* pCamera, br_matrix34* pCamera_to_world, int pRender_blends);
static tRenderTrack RenderTrack = (tRenderTrack)0x4a944a;
typedef br_scalar(__cdecl* tGetYonFactor)();
static tGetYonFactor GetYonFactor = (tGetYonFactor)0x4a9e6e;
typedef void(__cdecl* tSetYonFactor)(br_scalar pNew);
static tSetYonFactor SetYonFactor = (tSetYonFactor)0x4a9e84;
HOOK_VARIABLE_IMPLEMENT(br_angle, gCamera_yaw, 0x50d384);
HOOK_VARIABLE_IMPLEMENT(int, gCamera_sign, 0x50d394);
HOOK_VARIABLE_IMPLEMENT(int, gCar_flying, 0x50d398);
HOOK_VARIABLE_IMPLEMENT(int, gCamera_reset, 0x50d39c);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_actor*, gCamera_list, 2, 0x551438);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tCar_spec*, gActive_car_list, 25, 0x551450);
HOOK_VARIABLE_IMPLEMENT(int, gNum_active_cars, 0x5514cc);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gRecovery_cost, 3, 0x5514c0);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCamera_height, 0x5514d0);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gMin_camera_car_distance, 0x551440);
HOOK_VARIABLE_IMPLEMENT(tU32, gStart_time, 0x53a508);
HOOK_VARIABLE_IMPLEMENT(int, gCurrent_choice, 0x53a504);
HOOK_VARIABLE_IMPLEMENT(int, gAlways_typing, 0x53a4d0);
typedef void(__cdecl* tResetInterfaceTimeout)();
static tResetInterfaceTimeout ResetInterfaceTimeout = (tResetInterfaceTimeout)0x4735da;
typedef void(__cdecl* tChangeSelection)(tInterface_spec* pSpec, int* pOld_selection, int* pNew_selection, int pMode, int pSkip_disabled);
static tChangeSelection ChangeSelection = (tChangeSelection)0x474d84;
typedef void(__cdecl* tRecopyAreas)(tInterface_spec* pSpec, br_pixelmap** pCopy_areas);
static tRecopyAreas RecopyAreas = (tRecopyAreas)0x47507b;
typedef int(__cdecl* tDoInterfaceScreen)(tInterface_spec* pSpec, int pOptions, int pCurrent_choice);
static tDoInterfaceScreen DoInterfaceScreen = (tDoInterfaceScreen)0x4736cc;
typedef void(__cdecl* tPrintMemoryDump)(int pFlags, char* pTitle);
static tPrintMemoryDump PrintMemoryDump = (tPrintMemoryDump)0x463de4;
typedef void(__cdecl* tInstallDRMemCalls)();
static tInstallDRMemCalls InstallDRMemCalls = (tInstallDRMemCalls)0x463ee2;
typedef void(__cdecl* tMAMSUnlock)(void** pPtr);
static tMAMSUnlock MAMSUnlock = (tMAMSUnlock)0x463efa;
typedef void(__cdecl* tCreateStainlessClasses)();
static tCreateStainlessClasses CreateStainlessClasses = (tCreateStainlessClasses)0x463f27;
HOOK_VARIABLE_IMPLEMENT(tU32, gLost_time, 0x52148c);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU32, gLong_key, 4, 0x521490);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU32, gOther_long_key, 4, 0x5214a0);
HOOK_VARIABLE_IMPLEMENT(int, gEncryption_method, 0x5214b0);
typedef int(__cdecl* tCheckQuit)();
static tCheckQuit CheckQuit = (tCheckQuit)0x4c1590;
typedef double(__cdecl* tsqr)(double pN);
static tsqr sqr = (tsqr)0x4c161d;
typedef void(__cdecl* tEncodeLine)(char* pS);
static tEncodeLine EncodeLine = (tEncodeLine)0x4c1ab1;
typedef int(__cdecl* tIRandomBetween)(int pA, int pB);
static tIRandomBetween IRandomBetween = (tIRandomBetween)0x4c1633;
typedef int(__cdecl* tPercentageChance)(int pC);
static tPercentageChance PercentageChance = (tPercentageChance)0x4c166c;
typedef int(__cdecl* tIRandomPosNeg)(int pN);
static tIRandomPosNeg IRandomPosNeg = (tIRandomPosNeg)0x4c169d;
typedef float(__cdecl* tFRandomBetween)(float pA, float pB);
static tFRandomBetween FRandomBetween = (tFRandomBetween)0x4c16bf;
typedef br_scalar(__cdecl* tSRandomBetween)(br_scalar pA, br_scalar pB);
static tSRandomBetween SRandomBetween = (tSRandomBetween)0x4c1715;
typedef br_scalar(__cdecl* tSRandomPosNeg)(br_scalar pN);
static tSRandomPosNeg SRandomPosNeg = (tSRandomPosNeg)0x4c1735;
typedef char* (__cdecl* tGetALineWithNoPossibleService)(FILE* pF, unsigned char* pS);
static tGetALineWithNoPossibleService GetALineWithNoPossibleService = (tGetALineWithNoPossibleService)0x4c175c;
typedef char* (__cdecl* tGetALineAndDontArgue)(FILE* pF, char* pS);
static tGetALineAndDontArgue GetALineAndDontArgue = (tGetALineAndDontArgue)0x4c1d44;
typedef void(__cdecl* tPathCat)(char* pDestn_str, char* pStr_1, char* pStr_2);
static tPathCat PathCat = (tPathCat)0x4c1d69;
typedef float(__cdecl* ttandeg)(float pAngle);
static ttandeg tandeg = (ttandeg)0x4c1e63;
typedef tU32(__cdecl* tGetFileLength)(FILE* pF);
static tGetFileLength GetFileLength = (tGetFileLength)0x4c1e94;
typedef br_pixelmap* (__cdecl* tDRPixelmapAllocate)(br_uint_8 pType, br_uint_16 pW, br_uint_16 pH, void* pPixels, int pFlags);
static tDRPixelmapAllocate DRPixelmapAllocate = (tDRPixelmapAllocate)0x4c1efb;
typedef br_pixelmap* (__cdecl* tDRPixelmapAllocateSub)(br_pixelmap* pPm, br_uint_16 pX, br_uint_16 pY, br_uint_16 pW, br_uint_16 pH);
static tDRPixelmapAllocateSub DRPixelmapAllocateSub = (tDRPixelmapAllocateSub)0x4c1f56;
typedef br_pixelmap* (__cdecl* tDRPixelmapLoad)(char* pFile_name);
static tDRPixelmapLoad DRPixelmapLoad = (tDRPixelmapLoad)0x4c1fbb;
typedef br_uint_32(__cdecl* tDRPixelmapLoadMany)(char* pFile_name, br_pixelmap** pPixelmaps, br_uint_16 pNum);
static tDRPixelmapLoadMany DRPixelmapLoadMany = (tDRPixelmapLoadMany)0x4c2010;
typedef void(__cdecl* tWaitFor)(tU32 pDelay);
static tWaitFor WaitFor = (tWaitFor)0x4c209b;
typedef intptr_t(__cdecl* tDRActorEnumRecurse)(br_actor* pActor, br_actor_enum_cbfn* callback, void* arg);
static tDRActorEnumRecurse DRActorEnumRecurse = (tDRActorEnumRecurse)0x4c20ce;
typedef br_actor* (__cdecl* tDRActorFindRecurse)(br_actor* pSearch_root, char* pName);
static tDRActorFindRecurse DRActorFindRecurse = (tDRActorFindRecurse)0x4c214f;
typedef br_uint_32(__cdecl* tDRActorEnumRecurseWithMat)(br_actor* pActor, br_material* pMat, recurse_with_mat_cbfn* pCall_back, void* pArg);
static tDRActorEnumRecurseWithMat DRActorEnumRecurseWithMat = (tDRActorEnumRecurseWithMat)0x4c21e9;
typedef br_uint_32(__cdecl* tDRActorEnumRecurseWithTrans)(br_actor* pActor, br_matrix34* pMatrix, br_uint_32(*pCall_back)(br_actor*, br_matrix34*, void*), void* pArg);
static tDRActorEnumRecurseWithTrans DRActorEnumRecurseWithTrans = (tDRActorEnumRecurseWithTrans)0x4c2288;
typedef FILE* (__cdecl* tOpenUniqueFileB)(char* pPrefix, char* pExtension);
static tOpenUniqueFileB OpenUniqueFileB = (tOpenUniqueFileB)0x4c23e7;
typedef void(__cdecl* tPrintScreenFile16)(FILE* pF);
static tPrintScreenFile16 PrintScreenFile16 = (tPrintScreenFile16)0x4c24c8;
typedef void(__cdecl* tPrintScreen)();
static tPrintScreen PrintScreen = (tPrintScreen)0x4c272c;
typedef tU32(__cdecl* tGetTotalTime)();
static tGetTotalTime GetTotalTime = (tGetTotalTime)0x4c2771;
typedef tU32(__cdecl* tGetRaceTime)();
static tGetRaceTime GetRaceTime = (tGetRaceTime)0x4c27bf;
typedef void(__cdecl* tAddLostTime)(tU32 pLost_time);
static tAddLostTime AddLostTime = (tAddLostTime)0x4c27da;
typedef void(__cdecl* tTimerString)(tU32 pTime, char* pStr, int pFudge_colon, int pForce_colon);
static tTimerString TimerString = (tTimerString)0x4c27ee;
typedef char* (__cdecl* tGetMiscString)(int pIndex);
static tGetMiscString GetMiscString = (tGetMiscString)0x4c289f;
typedef int(__cdecl* tFlash)(tU32 pPeriod, tU32* pLast_change, int* pCurrent_state);
static tFlash Flash = (tFlash)0x4c28f0;
typedef void(__cdecl* tBuildShadeTablePath)(char* pThe_path, int pR, int pG, int pB);
static tBuildShadeTablePath BuildShadeTablePath = (tBuildShadeTablePath)0x4c2a2e;
typedef br_pixelmap* (__cdecl* tLoadGeneratedShadeTable)(int pR, int pG, int pB);
static tLoadGeneratedShadeTable LoadGeneratedShadeTable = (tLoadGeneratedShadeTable)0x4c29ee;
typedef void(__cdecl* tSaveGeneratedShadeTable)(br_pixelmap* pThe_table, int pR, int pG, int pB);
static tSaveGeneratedShadeTable SaveGeneratedShadeTable = (tSaveGeneratedShadeTable)0x4c2b03;
typedef br_pixelmap* (__cdecl* tGenerateShadeTable)(int pHeight, br_pixelmap* pPalette, int pRed_mix, int pGreen_mix, int pBlue_mix, float pQuarter, float pHalf, float pThree_quarter);
static tGenerateShadeTable GenerateShadeTable = (tGenerateShadeTable)0x4c2b42;
typedef br_pixelmap* (__cdecl* tGenerateDarkenedShadeTable)(int pHeight, br_pixelmap* pPalette, int pRed_mix, int pGreen_mix, int pBlue_mix, float pQuarter, float pHalf, float pThree_quarter, br_scalar pDarken);
static tGenerateDarkenedShadeTable GenerateDarkenedShadeTable = (tGenerateDarkenedShadeTable)0x4c2b84;
typedef void(__cdecl* tPossibleService)();
static tPossibleService PossibleService = (tPossibleService)0x4c2fdb;
typedef void(__cdecl* tDRMatrix34TApplyP)(br_vector3* pA, br_vector3* pB, br_matrix34* pC);
static tDRMatrix34TApplyP DRMatrix34TApplyP = (tDRMatrix34TApplyP)0x4c302d;
typedef void(__cdecl* tDRPixelmapRectangleCopy)(br_pixelmap* dst, br_int_16 dx, br_int_16 dy, br_pixelmap* src, br_int_16 sx, br_int_16 sy, br_uint_16 w, br_uint_16 h);
static tDRPixelmapRectangleCopy DRPixelmapRectangleCopy = (tDRPixelmapRectangleCopy)0x4c30d1;
typedef void(__cdecl* tDRPixelmapCopy)(br_pixelmap* dst, br_pixelmap* src);
static tDRPixelmapCopy DRPixelmapCopy = (tDRPixelmapCopy)0x4ca180;
typedef void(__cdecl* tDRPixelmapRectangleFill)(br_pixelmap* dst, br_int_16 x, br_int_16 y, br_uint_16 w, br_uint_16 h, br_uint_32 colour);
static tDRPixelmapRectangleFill DRPixelmapRectangleFill = (tDRPixelmapRectangleFill)0x4c3112;
typedef br_material* (__cdecl* tDRMaterialClone)(br_material* pMaterial);
static tDRMaterialClone DRMaterialClone = (tDRMaterialClone)0x4c31d1;
typedef void(__cdecl* tDecodeLine2)(char* pS);
static tDecodeLine2 DecodeLine2 = (tDecodeLine2)0x4c3468;
typedef void(__cdecl* tEncodeLine2)(char* pS);
static tEncodeLine2 EncodeLine2 = (tEncodeLine2)0x4c368f;
typedef void(__cdecl* tEncodeFile)(char* pThe_path);
static tEncodeFile EncodeFile = (tEncodeFile)0x4c37f5;
typedef void(__cdecl* tEncodeFileWrapper)(char* pThe_path);
static tEncodeFileWrapper EncodeFileWrapper = (tEncodeFileWrapper)0x4c3b44;
typedef void(__cdecl* tEncodeAllFilesInDirectory)(char* pThe_path);
static tEncodeAllFilesInDirectory EncodeAllFilesInDirectory = (tEncodeAllFilesInDirectory)0x4c3cf5;
typedef void(__cdecl* tSkipNLines)(FILE* pF);
static tSkipNLines SkipNLines = (tSkipNLines)0x4c3d32;
typedef int(__cdecl* tPDCheckDriveExists)(char* pThe_path);
static tPDCheckDriveExists PDCheckDriveExists = (tPDCheckDriveExists)0x4c3e0c;
typedef int(__cdecl* tOpacityInPrims)(br_token_value* pPrims);
static tOpacityInPrims OpacityInPrims = (tOpacityInPrims)0x4c3e79;
typedef int(__cdecl* tAlreadyBlended)(br_material* pMaterial);
static tAlreadyBlended AlreadyBlended = (tAlreadyBlended)0x4c3e2c;
typedef void(__cdecl* tBlendifyMaterialTablishly)(br_material* pMaterial, int pPercent);
static tBlendifyMaterialTablishly BlendifyMaterialTablishly = (tBlendifyMaterialTablishly)0x4c3f0d;
typedef void(__cdecl* tBlendifyMaterialPrimitively)(br_material* pMaterial, int pPercent);
static tBlendifyMaterialPrimitively BlendifyMaterialPrimitively = (tBlendifyMaterialPrimitively)0x4c3fb5;
typedef void(__cdecl* tBlendifyMaterial)(br_material* pMaterial, int pPercent);
static tBlendifyMaterial BlendifyMaterial = (tBlendifyMaterial)0x4c3eca;
HOOK_VARIABLE_IMPLEMENT(int, gGame_initialized, 0x52115c);
HOOK_VARIABLE_IMPLEMENT(int, gBrZb_initialized, 0x521164);
HOOK_VARIABLE_IMPLEMENT(int, gRender_indent, 0x52116c);
HOOK_VARIABLE_IMPLEMENT(tU32, gAustere_time, 0x53fdd0);
HOOK_VARIABLE_IMPLEMENT(int, gInitial_rank, 0x54b2bc);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gCredits_per_rank, 3, 0x54b2b0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gInitial_credits, 3, 0x54b2c0);
HOOK_VARIABLE_IMPLEMENT(int, gNet_mode_of_last_game, 0x54b2a0);
HOOK_VARIABLE_IMPLEMENT(br_material*, gDefault_track_material, 0x54b29c);
typedef void(__cdecl* tAllocateSelf)();
static tAllocateSelf AllocateSelf = (tAllocateSelf)0x4bbebf;
typedef void(__cdecl* tAllocateCamera)();
static tAllocateCamera AllocateCamera = (tAllocateCamera)0x4bbf22;
typedef void(__cdecl* tReinitialiseForwardCamera)();
static tReinitialiseForwardCamera ReinitialiseForwardCamera = (tReinitialiseForwardCamera)0x4bb510;
typedef void(__cdecl* tAllocateRearviewPixelmap)();
static tAllocateRearviewPixelmap AllocateRearviewPixelmap = (tAllocateRearviewPixelmap)0x4bb741;
typedef void(__cdecl* tReinitialiseRearviewCamera)();
static tReinitialiseRearviewCamera ReinitialiseRearviewCamera = (tReinitialiseRearviewCamera)0x4bb887;
typedef void(__cdecl* tReinitialiseRenderStuff)();
static tReinitialiseRenderStuff ReinitialiseRenderStuff = (tReinitialiseRenderStuff)0x4bb916;
typedef void(__cdecl* tAllocateStandardLamp)();
static tAllocateStandardLamp AllocateStandardLamp = (tAllocateStandardLamp)0x4bbcdb;
typedef void(__cdecl* tInitializeBRenderEnvironment)();
static tInitializeBRenderEnvironment InitializeBRenderEnvironment = (tInitializeBRenderEnvironment)0x4bbd6c;
typedef void(__cdecl* tInitBRFonts)();
static tInitBRFonts InitBRFonts = (tInitBRFonts)0x4bc12c;
typedef void(__cdecl* tAustereWarning)();
static tAustereWarning AustereWarning = (tAustereWarning)0x4bc16d;
typedef void(__cdecl* tInitialiseApplication)(int pArgc, char** pArgv);
static tInitialiseApplication InitialiseApplication = (tInitialiseApplication)0x4bba54;
typedef void(__cdecl* tInitialiseDeathRace)(int pArgc, char** pArgv);
static tInitialiseDeathRace InitialiseDeathRace = (tInitialiseDeathRace)0x4bba24;
typedef void(__cdecl* tInitGame)(int pStart_race);
static tInitGame InitGame = (tInitGame)0x4bc22c;
typedef void(__cdecl* tDisposeGameIfNecessary)();
static tDisposeGameIfNecessary DisposeGameIfNecessary = (tDisposeGameIfNecessary)0x4bc3d0;
typedef void(__cdecl* tLoadInTrack)();
static tLoadInTrack LoadInTrack = (tLoadInTrack)0x4bc93a;
typedef void(__cdecl* tDisposeTrack)();
static tDisposeTrack DisposeTrack = (tDisposeTrack)0x4bc493;
typedef void(__cdecl* tInitRace)();
static tInitRace InitRace = (tInitRace)0x4bc4b1;
typedef void(__cdecl* tDisposeRace)();
static tDisposeRace DisposeRace = (tDisposeRace)0x4bc968;
HOOK_VARIABLE_IMPLEMENT(int, gPalette_munged, 0x520040);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_colour, gRGB_colours, 9, 0x5201a0);
typedef void(__cdecl* tResetLollipopQueue)();
static tResetLollipopQueue ResetLollipopQueue = (tResetLollipopQueue)0x4b304a;
typedef int(__cdecl* tAddToLollipopQueue)(br_actor* pActor, int pIndex);
static tAddToLollipopQueue AddToLollipopQueue = (tAddToLollipopQueue)0x4b305f;
typedef void(__cdecl* tRenderLollipops)();
static tRenderLollipops RenderLollipops = (tRenderLollipops)0x4b6ac6;
typedef void(__cdecl* tDRDrawLine)(br_pixelmap* pDestn, int pX1, int pY1, int pX2, int pY2, int pColour);
static tDRDrawLine DRDrawLine = (tDRDrawLine)0x4b30c6;
typedef void(__cdecl* tDrawDigitAt)(br_pixelmap* gImage, int pX, int pY, int pY_pitch, int pValue);
static tDrawDigitAt DrawDigitAt = (tDrawDigitAt)0x4b3180;
typedef void(__cdecl* tDrawNumberAt)(br_pixelmap* gImage, int pX, int pY, int pX_pitch, int pY_pitch, int pValue, int pDigit_count, int pLeading_zeroes);
static tDrawNumberAt DrawNumberAt = (tDrawNumberAt)0x4b30f4;
typedef void(__cdecl* tBuildColourTable)(br_pixelmap* pPalette);
static tBuildColourTable BuildColourTable = (tBuildColourTable)0x4b31bb;
typedef void(__cdecl* tClearConcussion)();
static tClearConcussion ClearConcussion = (tClearConcussion)0x4b32f2;
typedef tS8* (__cdecl* tSkipLines)(tS8* pSource, int pCount);
static tSkipLines SkipLines = (tSkipLines)0x4b3579;
typedef void(__cdecl* tCopyStripImage)(br_pixelmap* pDest, br_int_16 pDest_x, br_int_16 pOffset_x, br_int_16 pDest_y, br_int_16 pOffset_y, tS8* pSource, br_int_16 pSource_x, br_int_16 pSource_y, br_uint_16 pWidth, br_uint_16 pHeight);
static tCopyStripImage CopyStripImage = (tCopyStripImage)0x4b3307;
typedef void(__cdecl* tSetBRenderScreenAndBuffers)(int pX_offset, int pY_offset, int pWidth, int pHeight);
static tSetBRenderScreenAndBuffers SetBRenderScreenAndBuffers = (tSetBRenderScreenAndBuffers)0x4b35fb;
typedef void(__cdecl* tSetIntegerMapRenders)();
static tSetIntegerMapRenders SetIntegerMapRenders = (tSetIntegerMapRenders)0x4b3810;
typedef void(__cdecl* tAdjustRenderScreenSize)();
static tAdjustRenderScreenSize AdjustRenderScreenSize = (tAdjustRenderScreenSize)0x4b3895;
typedef void(__cdecl* tScreenSmaller)();
static tScreenSmaller ScreenSmaller = (tScreenSmaller)0x4b39f4;
typedef void(__cdecl* tScreenLarger)();
static tScreenLarger ScreenLarger = (tScreenLarger)0x4b3a40;
typedef void(__cdecl* tDRSetPalette3)(br_pixelmap* pThe_palette, int pSet_current_palette);
static tDRSetPalette3 DRSetPalette3 = (tDRSetPalette3)0x4b3af8;
typedef void(__cdecl* tDRSetPalette2)(br_pixelmap* pThe_palette, int pSet_current_palette);
static tDRSetPalette2 DRSetPalette2 = (tDRSetPalette2)0x4b3b53;
typedef void(__cdecl* tDRSetPalette)(br_pixelmap* pThe_palette);
static tDRSetPalette DRSetPalette = (tDRSetPalette)0x4b3bba;
typedef void(__cdecl* tInitializePalettes)();
static tInitializePalettes InitializePalettes = (tInitializePalettes)0x4b3bd3;
typedef void(__cdecl* tSwitchToPalette)(char* pPal_name);
static tSwitchToPalette SwitchToPalette = (tSwitchToPalette)0x4b3d43;
typedef void(__cdecl* tClearEntireScreen)();
static tClearEntireScreen ClearEntireScreen = (tClearEntireScreen)0x4b3d76;
typedef void(__cdecl* tClearWobbles)();
static tClearWobbles ClearWobbles = (tClearWobbles)0x4b3dde;
typedef void(__cdecl* tInitWobbleStuff)();
static tInitWobbleStuff InitWobbleStuff = (tInitWobbleStuff)0x4b3e1a;
typedef void(__cdecl* tNewScreenWobble)(double pAmplitude_x, double pAmplitude_y, double pPeriod);
static tNewScreenWobble NewScreenWobble = (tNewScreenWobble)0x4b3e75;
typedef void(__cdecl* tCalculateWobblitude)(tU32 pThe_time);
static tCalculateWobblitude CalculateWobblitude = (tCalculateWobblitude)0x4b6baf;
typedef void(__cdecl* tCalculateConcussion)(tU32 pThe_time);
static tCalculateConcussion CalculateConcussion = (tCalculateConcussion)0x4b6e97;
typedef void(__cdecl* tProcessNonTrackActors)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world, br_matrix34* pOld_camera_matrix);
static tProcessNonTrackActors ProcessNonTrackActors = (tProcessNonTrackActors)0x4b70e5;
typedef void(__cdecl* tDrawMapBlip)(tCar_spec* pCar, tU32 pTime, br_matrix34* pTrans, br_vector3* pPos, int pColour);
static tDrawMapBlip DrawMapBlip = (tDrawMapBlip)0x4b70fe;
typedef void(__cdecl* tDrawMapSmallBlip)(tU32 pTime, br_vector3* pPos, int pColour);
static tDrawMapSmallBlip DrawMapSmallBlip = (tDrawMapSmallBlip)0x4b76c3;
typedef void(__cdecl* tMungeClipPlane)(br_vector3* pLight, tCar_spec* pCar, br_vector3* p1, br_vector3* p2, br_scalar pY_offset);
static tMungeClipPlane MungeClipPlane = (tMungeClipPlane)0x4b553b;
typedef void(__cdecl* tTryThisEdge)(tCar_spec* pCar, br_vector3* pLight, int pIndex_1, br_scalar pSign_1, int pIndex_2, br_scalar pSign_2, int pPoint_index_1, int pPoint_index_2, br_scalar pY_offset);
static tTryThisEdge TryThisEdge = (tTryThisEdge)0x4b547f;
typedef br_scalar(__cdecl* tDistanceFromPlane)(br_vector3* pPos, br_scalar pA, br_scalar pB, br_scalar pC, br_scalar pD);
static tDistanceFromPlane DistanceFromPlane = (tDistanceFromPlane)0x4b400e;
typedef void(__cdecl* tProcessShadow)(tCar_spec* pCar, br_actor* pWorld, tTrack_spec* pTrack_spec, br_actor* pCamera, br_matrix34* pCamera_to_world_transform, br_scalar pDistance_factor);
static tProcessShadow ProcessShadow = (tProcessShadow)0x4b405c;
typedef void(__cdecl* tRenderShadows)(br_actor* pWorld, tTrack_spec* pTrack_spec, br_actor* pCamera, br_matrix34* pCamera_to_world_transform);
static tRenderShadows RenderShadows = (tRenderShadows)0x4b57b6;
typedef void(__cdecl* tFlashyMapCheckpoint)(int pIndex, tU32 pTime);
static tFlashyMapCheckpoint FlashyMapCheckpoint = (tFlashyMapCheckpoint)0x4b7754;
typedef int(__cdecl* tConditionallyFillWithSky)(br_pixelmap* pPixelmap);
static tConditionallyFillWithSky ConditionallyFillWithSky = (tConditionallyFillWithSky)0x4b784d;
typedef void(__cdecl* tRenderAFrame)(int pDepth_mask_on);
static tRenderAFrame RenderAFrame = (tRenderAFrame)0x4b59ce;
typedef void(__cdecl* tInitPaletteAnimate)();
static tInitPaletteAnimate InitPaletteAnimate = (tInitPaletteAnimate)0x4b7932;
typedef void(__cdecl* tRevertPalette)();
static tRevertPalette RevertPalette = (tRevertPalette)0x4b7951;
typedef void(__cdecl* tResetPalette)();
static tResetPalette ResetPalette = (tResetPalette)0x4b7997;
typedef void(__cdecl* tDarken)(tU8* pPtr, unsigned int pDarken_amount);
static tDarken Darken = (tDarken)0x4b7a74;
typedef void(__cdecl* tSetFadedPalette)(int pDegree);
static tSetFadedPalette SetFadedPalette = (tSetFadedPalette)0x4b79b5;
typedef void(__cdecl* tFadePaletteDown)();
static tFadePaletteDown FadePaletteDown = (tFadePaletteDown)0x4b7a98;
typedef void(__cdecl* tFadePaletteUp)();
static tFadePaletteUp FadePaletteUp = (tFadePaletteUp)0x4b7b28;
typedef void(__cdecl* tKillSplashScreen)();
static tKillSplashScreen KillSplashScreen = (tKillSplashScreen)0x4b7b9c;
typedef void(__cdecl* tEnsureRenderPalette)();
static tEnsureRenderPalette EnsureRenderPalette = (tEnsureRenderPalette)0x4b7be4;
typedef void(__cdecl* tSplashScreenWith)(char* pPixmap_name);
static tSplashScreenWith SplashScreenWith = (tSplashScreenWith)0x4b7c0b;
typedef void(__cdecl* tEnsurePaletteUp)();
static tEnsurePaletteUp EnsurePaletteUp = (tEnsurePaletteUp)0x4b7d0c;
typedef void(__cdecl* tInitAmbience)();
static tInitAmbience InitAmbience = (tInitAmbience)0x4b7dae;
typedef void(__cdecl* tDRPixelmapRectangleMaskedCopy)(br_pixelmap* pDest, br_int_16 pDest_x, br_int_16 pDest_y, br_pixelmap* pSource, br_int_16 pSource_x, br_int_16 pSource_y, br_int_16 pWidth, br_int_16 pHeight);
static tDRPixelmapRectangleMaskedCopy DRPixelmapRectangleMaskedCopy = (tDRPixelmapRectangleMaskedCopy)0x4b7dd1;
typedef void(__cdecl* tDRPixelmapRectangleOnscreenCopy)(br_pixelmap* pDest, br_int_16 pDest_x, br_int_16 pDest_y, br_pixelmap* pSource, br_int_16 pSource_x, br_int_16 pSource_y, br_int_16 pWidth, br_int_16 pHeight);
static tDRPixelmapRectangleOnscreenCopy DRPixelmapRectangleOnscreenCopy = (tDRPixelmapRectangleOnscreenCopy)0x4b8105;
typedef void(__cdecl* tDRPixelmapRectangleShearedCopy)(br_pixelmap* pDest, br_int_16 pDest_x, br_int_16 pDest_y, br_pixelmap* pSource, br_int_16 pSource_x, br_int_16 pSource_y, br_int_16 pWidth, br_int_16 pHeight, tX1616 pShear);
static tDRPixelmapRectangleShearedCopy DRPixelmapRectangleShearedCopy = (tDRPixelmapRectangleShearedCopy)0x4b81e6;
typedef void(__cdecl* tDRPixelmapRectangleVScaledCopy)(br_pixelmap* pDest, br_int_16 pDest_x, br_int_16 pDest_y, br_pixelmap* pSource, br_int_16 pSource_x, br_int_16 pSource_y, br_int_16 pWidth, br_int_16 pHeight);
static tDRPixelmapRectangleVScaledCopy DRPixelmapRectangleVScaledCopy = (tDRPixelmapRectangleVScaledCopy)0x4b8535;
typedef void(__cdecl* tInitTransientBitmaps)();
static tInitTransientBitmaps InitTransientBitmaps = (tInitTransientBitmaps)0x4b8672;
typedef void(__cdecl* tRemoveTransientBitmaps)(int pGraphically_remove_them);
static tRemoveTransientBitmaps RemoveTransientBitmaps = (tRemoveTransientBitmaps)0x4b87f2;
typedef int(__cdecl* tDoMouseCursor)();
static tDoMouseCursor DoMouseCursor = (tDoMouseCursor)0x4b89b4;
typedef void(__cdecl* tLoadFont)(int pFont_ID);
static tLoadFont LoadFont = (tLoadFont)0x4b9683;
typedef void(__cdecl* tDisposeFont)(int pFont_ID);
static tDisposeFont DisposeFont = (tDisposeFont)0x4b99cb;
typedef void(__cdecl* tInitDRFonts)();
static tInitDRFonts InitDRFonts = (tInitDRFonts)0x4b9a79;
typedef void(__cdecl* tDrawTellyLine)(br_pixelmap* pImage, int pLeft, int pTop, int pPercentage);
static tDrawTellyLine DrawTellyLine = (tDrawTellyLine)0x4b9ecd;
typedef void(__cdecl* tDrawTellyImage)(br_pixelmap* pImage, int pLeft, int pTop, int pPercentage);
static tDrawTellyImage DrawTellyImage = (tDrawTellyImage)0x4b9f9e;
typedef void(__cdecl* tTellyInImage)(br_pixelmap* pImage, int pLeft, int pTop);
static tTellyInImage TellyInImage = (tTellyInImage)0x4b9e09;
typedef void(__cdecl* tTellyOutImage)(br_pixelmap* pImage, int pLeft, int pTop);
static tTellyOutImage TellyOutImage = (tTellyOutImage)0x4ba04e;
typedef void(__cdecl* tSetShadowLevel)(tShadow_level pLevel);
static tSetShadowLevel SetShadowLevel = (tSetShadowLevel)0x4ba135;
typedef tShadow_level(__cdecl* tGetShadowLevel)();
static tGetShadowLevel GetShadowLevel = (tGetShadowLevel)0x4ba148;
typedef void(__cdecl* tToggleShadow)();
static tToggleShadow ToggleShadow = (tToggleShadow)0x4ba15d;
typedef void(__cdecl* tInitShadow)();
static tInitShadow InitShadow = (tInitShadow)0x4ba24f;
typedef br_uint_32(__cdecl* tSaveShadeTable)(br_pixelmap* pTable, void* pArg);
static tSaveShadeTable SaveShadeTable = (tSaveShadeTable)0x4ba427;
typedef void(__cdecl* tSaveShadeTables)();
static tSaveShadeTables SaveShadeTables = (tSaveShadeTables)0x4ba49d;
typedef void(__cdecl* tDisposeSavedShadeTables)();
static tDisposeSavedShadeTables DisposeSavedShadeTables = (tDisposeSavedShadeTables)0x4ba4cb;
typedef void(__cdecl* tShadowMode)();
static tShadowMode ShadowMode = (tShadowMode)0x4ba50e;
typedef int(__cdecl* tSwitchToRealResolution)();
static tSwitchToRealResolution SwitchToRealResolution = (tSwitchToRealResolution)0x4ba581;
typedef int(__cdecl* tSwitchToLoresMode)();
static tSwitchToLoresMode SwitchToLoresMode = (tSwitchToLoresMode)0x4ba5e7;
typedef void(__cdecl* tDRPixelmapDoubledCopy)(br_pixelmap* pDestn, br_pixelmap* pSource, int pSource_width, int pSource_height, int pX_offset, int pY_offset);
static tDRPixelmapDoubledCopy DRPixelmapDoubledCopy = (tDRPixelmapDoubledCopy)0x4ba65a;
HOOK_VARIABLE_IMPLEMENT(tPowerup*, gPowerup_array, 0x5321e8);
typedef int(__cdecl* tGotPowerupX)(tCar_spec* pCar, int pIndex, int pTell_net_players, int pDisplay_headup, tU32 pTime_left);
static tGotPowerupX GotPowerupX = (tGotPowerupX)0x42ca60;
typedef void(__cdecl* tLoadPowerups)();
static tLoadPowerups LoadPowerups = (tLoadPowerups)0x42d147;
typedef void(__cdecl* tInitPowerups)();
static tInitPowerups InitPowerups = (tInitPowerups)0x42d536;
typedef void(__cdecl* tDrawPowerups)(tU32 pTime);
static tDrawPowerups DrawPowerups = (tDrawPowerups)0x42d5ec;
typedef void(__cdecl* tDoPowerupPeriodics)(tU32 pFrame_period);
static tDoPowerupPeriodics DoPowerupPeriodics = (tDoPowerupPeriodics)0x42d8a9;
typedef void(__cdecl* tGotPowerup0)();
static tGotPowerup0 GotPowerup0 = (tGotPowerup0)0x42d9e8;
typedef void(__cdecl* tGotPowerup1)();
static tGotPowerup1 GotPowerup1 = (tGotPowerup1)0x42d9fd;
typedef void(__cdecl* tGotPowerup2)();
static tGotPowerup2 GotPowerup2 = (tGotPowerup2)0x42da12;
typedef void(__cdecl* tGotPowerup3)();
static tGotPowerup3 GotPowerup3 = (tGotPowerup3)0x42da27;
typedef void(__cdecl* tGotPowerup4)();
static tGotPowerup4 GotPowerup4 = (tGotPowerup4)0x42da3c;
typedef void(__cdecl* tGotPowerup5)();
static tGotPowerup5 GotPowerup5 = (tGotPowerup5)0x42da51;
typedef void(__cdecl* tGotPowerup6)();
static tGotPowerup6 GotPowerup6 = (tGotPowerup6)0x42da66;
typedef void(__cdecl* tGotPowerup7)();
static tGotPowerup7 GotPowerup7 = (tGotPowerup7)0x42da7b;
typedef void(__cdecl* tGotPowerup8)();
static tGotPowerup8 GotPowerup8 = (tGotPowerup8)0x42da90;
typedef void(__cdecl* tGotPowerup9)();
static tGotPowerup9 GotPowerup9 = (tGotPowerup9)0x42daa5;
typedef int(__cdecl* tSetPinball)(tPowerup* pPowerup, tCar_spec* pCar);
static tSetPinball SetPinball = (tSetPinball)0x42e4a1;
typedef void(__cdecl* tResetPinball)(tPowerup* pPowerup, tCar_spec* pCar);
static tResetPinball ResetPinball = (tResetPinball)0x42e750;
typedef int(__cdecl* tSetInstantHandbrake)(tPowerup* pPowerup, tCar_spec* pCar);
static tSetInstantHandbrake SetInstantHandbrake = (tSetInstantHandbrake)0x42e8af;
HOOK_VARIABLE_IMPLEMENT(int, gBelow_face_index, 0x53d010);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCurrent_y, 0x53d018);
HOOK_VARIABLE_IMPLEMENT(int, gAbove_face_index, 0x53d020);
HOOK_VARIABLE_IMPLEMENT(br_model*, gAbove_model, 0x53d01c);
HOOK_VARIABLE_IMPLEMENT(br_model*, gBelow_model, 0x53d00c);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gHighest_y_below, 0x53d058);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gY_picking_camera, 0x53d008);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gLowest_y_above, 0x53d014);
typedef int(__cdecl* tDRActorToRoot)(br_actor* a, br_actor* world, br_matrix34* m);
static tDRActorToRoot DRActorToRoot = (tDRActorToRoot)0x494230;
typedef void(__cdecl* tInitRayCasting)();
static tInitRayCasting InitRayCasting = (tInitRayCasting)0x4942e4;
typedef int(__cdecl* tActorPick2D)(br_actor* ap, br_model* model, br_material* material, dr_pick2d_cbfn* callback, void* arg);
static tActorPick2D ActorPick2D = (tActorPick2D)0x4944de;
typedef int(__cdecl* tDRScenePick2D)(br_actor* world, br_actor* camera, dr_pick2d_cbfn* callback, void* arg);
static tDRScenePick2D DRScenePick2D = (tDRScenePick2D)0x49499e;
typedef void(__cdecl* tFindBestY)(br_vector3* pPosition, br_actor* gWorld, br_scalar pStarting_height, br_scalar* pNearest_y_above, br_scalar* pNearest_y_below, br_model** pNearest_above_model, br_model** pNearest_below_model, int* pNearest_above_face_index, int* pNearest_below_face_index);
static tFindBestY FindBestY = (tFindBestY)0x494a71;
typedef br_scalar(__cdecl* tFindYVerticallyBelow)(br_vector3* pPosition);
static tFindYVerticallyBelow FindYVerticallyBelow = (tFindYVerticallyBelow)0x4953da;
typedef br_scalar(__cdecl* tFindYVerticallyBelow2)(br_vector3* pCast_point);
static tFindYVerticallyBelow2 FindYVerticallyBelow2 = (tFindYVerticallyBelow2)0x49564b;
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_pixelmap*, gPanel_buffer, 2, 0x514fc0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tFlic_spec, gMain_flic_list, 372, 0x514fd0);
typedef int(__cdecl* tTranslationMode)();
static tTranslationMode TranslationMode = (tTranslationMode)0x4959d5;
typedef void(__cdecl* tPlayFlicsFromDisk)();
static tPlayFlicsFromDisk PlayFlicsFromDisk = (tPlayFlicsFromDisk)0x495a6d;
typedef void(__cdecl* tPlayFlicsFromMemory)();
static tPlayFlicsFromMemory PlayFlicsFromMemory = (tPlayFlicsFromMemory)0x495a82;
typedef int(__cdecl* tFlicsPlayedFromDisk)();
static tFlicsPlayedFromDisk FlicsPlayedFromDisk = (tFlicsPlayedFromDisk)0x495a97;
typedef int(__cdecl* tGetPanelFlicFrameIndex)(int pIndex);
static tGetPanelFlicFrameIndex GetPanelFlicFrameIndex = (tGetPanelFlicFrameIndex)0x495ad6;
typedef void(__cdecl* tFlicPaletteAllocate)();
static tFlicPaletteAllocate FlicPaletteAllocate = (tFlicPaletteAllocate)0x495af9;
typedef void(__cdecl* tAssertFlicPixelmap)(tFlic_descriptor_ptr pFlic_info, br_pixelmap* pDest_pixelmap);
static tAssertFlicPixelmap AssertFlicPixelmap = (tAssertFlicPixelmap)0x495b39;
typedef int(__cdecl* tStartFlic)(char* pFile_name, int pIndex, tFlic_descriptor_ptr pFlic_info, tU32 pSize, tS8* pData_ptr, br_pixelmap* pDest_pixelmap, int pX_offset, int pY_offset, int pFrame_rate);
static tStartFlic StartFlic = (tStartFlic)0x495b77;
typedef int(__cdecl* tEndFlic)(tFlic_descriptor_ptr pFlic_info);
static tEndFlic EndFlic = (tEndFlic)0x495f71;
typedef void(__cdecl* tDoDeltaTrans)(tFlic_descriptor* pFlic_info, tU32 chunk_length);
static tDoDeltaTrans DoDeltaTrans = (tDoDeltaTrans)0x496902;
typedef int(__cdecl* tPlayNextFlicFrame2)(tFlic_descriptor* pFlic_info, int pPanel_flic);
static tPlayNextFlicFrame2 PlayNextFlicFrame2 = (tPlayNextFlicFrame2)0x495ff5;
typedef int(__cdecl* tPlayNextFlicFrame)(tFlic_descriptor* pFlic_info);
static tPlayNextFlicFrame PlayNextFlicFrame = (tPlayNextFlicFrame)0x495fd7;
typedef int(__cdecl* tPlayFlic)(int pIndex, tU32 pSize, tS8* pData_ptr, br_pixelmap* pDest_pixelmap, int pX_offset, int pY_offset, void (*DoPerFrame)(), int pInterruptable, int pFrame_rate);
static tPlayFlic PlayFlic = (tPlayFlic)0x497278;
typedef void(__cdecl* tShowFlic)(int pIndex);
static tShowFlic ShowFlic = (tShowFlic)0x4973a3;
typedef void(__cdecl* tInitFlics)();
static tInitFlics InitFlics = (tInitFlics)0x497459;
typedef int(__cdecl* tLoadFlic)(int pIndex);
static tLoadFlic LoadFlic = (tLoadFlic)0x497499;
typedef void(__cdecl* tUnlockFlic)(int pIndex);
static tUnlockFlic UnlockFlic = (tUnlockFlic)0x497683;
typedef int(__cdecl* tLoadFlicData)(char* pName, tU8** pData, tU32* pData_length);
static tLoadFlicData LoadFlicData = (tLoadFlicData)0x4976cb;
typedef void(__cdecl* tForceRunFlic)(int pIndex);
static tForceRunFlic ForceRunFlic = (tForceRunFlic)0x497908;
typedef void(__cdecl* tRunFlic)(int pIndex);
static tRunFlic RunFlic = (tRunFlic)0x49788b;
typedef void(__cdecl* tUnlockBunchOfFlics)(int pBunch_index);
static tUnlockBunchOfFlics UnlockBunchOfFlics = (tUnlockBunchOfFlics)0x497986;
typedef void(__cdecl* tProcessFlicQueue)(tU32 pInterval);
static tProcessFlicQueue ProcessFlicQueue = (tProcessFlicQueue)0x497a71;
typedef void(__cdecl* tFlushFlicQueue)();
static tFlushFlicQueue FlushFlicQueue = (tFlushFlicQueue)0x497b5d;
typedef void(__cdecl* tInitialiseFlicPanel)(int pIndex, int pLeft, int pTop, int pWidth, int pHeight);
static tInitialiseFlicPanel InitialiseFlicPanel = (tInitialiseFlicPanel)0x497dcd;
typedef void(__cdecl* tDisposeFlicPanel)(int pIndex);
static tDisposeFlicPanel DisposeFlicPanel = (tDisposeFlicPanel)0x497e80;
typedef void(__cdecl* tServicePanelFlics)(int pCopy_to_buffer);
static tServicePanelFlics ServicePanelFlics = (tServicePanelFlics)0x497edd;
typedef void(__cdecl* tChangePanelFlic)(int pIndex, tU8* pData, tU32 pData_length);
static tChangePanelFlic ChangePanelFlic = (tChangePanelFlic)0x4980ec;
typedef br_pixelmap* (__cdecl* tGetPanelPixelmap)(int pIndex);
static tGetPanelPixelmap GetPanelPixelmap = (tGetPanelPixelmap)0x4981b5;
typedef void(__cdecl* tLoadInterfaceStrings)();
static tLoadInterfaceStrings LoadInterfaceStrings = (tLoadInterfaceStrings)0x4981cf;
typedef void(__cdecl* tFlushInterfaceFonts)();
static tFlushInterfaceFonts FlushInterfaceFonts = (tFlushInterfaceFonts)0x498961;
typedef void(__cdecl* tSuspendPendingFlic)();
static tSuspendPendingFlic SuspendPendingFlic = (tSuspendPendingFlic)0x4989bc;
typedef int(__cdecl* tDoLoadGame)();
static tDoLoadGame DoLoadGame = (tDoLoadGame)0x44bf62;
typedef void(__cdecl* tMakeSavedGame)(tSave_game** pSave_record);
static tMakeSavedGame MakeSavedGame = (tMakeSavedGame)0x44c443;
HOOK_VARIABLE_IMPLEMENT(int, gSky_on, 0x513430);
HOOK_VARIABLE_IMPLEMENT(int, gDepth_cueing_on, 0x513434);
HOOK_VARIABLE_IMPLEMENT(tDepth_effect_type, gSwap_depth_effect_type, 0x513438);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gWater_shade_table, 0x550a68);
HOOK_VARIABLE_IMPLEMENT(br_material*, gHorizon_material, 0x53795c);
HOOK_VARIABLE_IMPLEMENT(br_model*, gRearview_sky_model, 0x53792c);
HOOK_VARIABLE_IMPLEMENT(int, gFog_shade_table_power, 0x537924);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gRearview_sky_actor, 0x53793c);
HOOK_VARIABLE_IMPLEMENT(int, gAcid_shade_table_power, 0x537958);
HOOK_VARIABLE_IMPLEMENT(int, gWater_shade_table_power, 0x537948);
HOOK_VARIABLE_IMPLEMENT(br_model*, gForward_sky_model, 0x537920);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gForward_sky_actor, 0x537954);
HOOK_VARIABLE_IMPLEMENT(int, gDepth_shade_table_power, 0x537938);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gFog_shade_table, 0x550a74);
HOOK_VARIABLE_IMPLEMENT(int, gSwap_depth_effect_start, 0x550a80);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gDepth_shade_table, 0x550a60);
HOOK_VARIABLE_IMPLEMENT(tSpecial_volume*, gLast_camera_special_volume, 0x550a78);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gAcid_shade_table, 0x550a64);
HOOK_VARIABLE_IMPLEMENT(int, gSwap_depth_effect_end, 0x550a7c);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gSwap_sky_texture, 0x550a5c);
HOOK_VARIABLE_IMPLEMENT(br_angle, gSky_image_width, 0x550a6e);
HOOK_VARIABLE_IMPLEMENT(br_angle, gSky_image_height, 0x550a6c);
HOOK_VARIABLE_IMPLEMENT(br_angle, gSky_image_underground, 0x550a70);
typedef int(__cdecl* tLog2)(int pNumber);
static tLog2 Log2 = (tLog2)0x461e02;
typedef void(__cdecl* tInstantDepthChange)(tDepth_effect_type pType, br_pixelmap* pSky_texture, int pStart, int pEnd);
static tInstantDepthChange InstantDepthChange = (tInstantDepthChange)0x461670;
typedef br_scalar(__cdecl* tTan)(br_scalar pAngle);
static tTan Tan = (tTan)0x462226;
typedef void(__cdecl* tMungeSkyModel)(br_actor* pCamera, br_model* pModel);
static tMungeSkyModel MungeSkyModel = (tMungeSkyModel)0x46280d;
typedef br_model* (__cdecl* tCreateHorizonModel)(br_actor* pCamera);
static tCreateHorizonModel CreateHorizonModel = (tCreateHorizonModel)0x46194b;
typedef void(__cdecl* tLoadDepthTable)(char* pName, br_pixelmap** pTable, int* pPower);
static tLoadDepthTable LoadDepthTable = (tLoadDepthTable)0x461c9b;
typedef void(__cdecl* tInitDepthEffects)();
static tInitDepthEffects InitDepthEffects = (tInitDepthEffects)0x4616f2;
typedef void(__cdecl* tDoDepthByShadeTable)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_pixelmap* pShade_table, int pShade_table_power, int pStart, int pEnd);
static tDoDepthByShadeTable DoDepthByShadeTable = (tDoDepthByShadeTable)0x4622cc;
typedef void(__cdecl* tExternalSky)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world);
static tExternalSky ExternalSky = (tExternalSky)0x461ebd;
typedef void(__cdecl* tDoHorizon)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world);
static tDoHorizon DoHorizon = (tDoHorizon)0x462658;
typedef void(__cdecl* tDoDepthCue)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer);
static tDoDepthCue DoDepthCue = (tDoDepthCue)0x462299;
typedef void(__cdecl* tDoFog)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer);
static tDoFog DoFog = (tDoFog)0x4625d6;
typedef void(__cdecl* tDepthEffect)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world);
static tDepthEffect DepthEffect = (tDepthEffect)0x462254;
typedef void(__cdecl* tDepthEffectSky)(br_pixelmap* pRender_buffer, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world);
static tDepthEffectSky DepthEffectSky = (tDepthEffectSky)0x462609;
typedef void(__cdecl* tDoSpecialCameraEffect)(br_actor* pCamera, br_matrix34* pCamera_to_world);
static tDoSpecialCameraEffect DoSpecialCameraEffect = (tDoSpecialCameraEffect)0x462fdb;
typedef void(__cdecl* tLessDepthFactor)();
static tLessDepthFactor LessDepthFactor = (tLessDepthFactor)0x4634ac;
typedef void(__cdecl* tMoreDepthFactor)();
static tMoreDepthFactor MoreDepthFactor = (tMoreDepthFactor)0x46350e;
typedef void(__cdecl* tLessDepthFactor2)();
static tLessDepthFactor2 LessDepthFactor2 = (tLessDepthFactor2)0x463570;
typedef void(__cdecl* tMoreDepthFactor2)();
static tMoreDepthFactor2 MoreDepthFactor2 = (tMoreDepthFactor2)0x4635d2;
typedef void(__cdecl* tAssertYons)();
static tAssertYons AssertYons = (tAssertYons)0x463634;
typedef void(__cdecl* tIncreaseYon)();
static tIncreaseYon IncreaseYon = (tIncreaseYon)0x463682;
typedef void(__cdecl* tDecreaseYon)();
static tDecreaseYon DecreaseYon = (tDecreaseYon)0x4636ef;
typedef void(__cdecl* tIncreaseAngle)();
static tIncreaseAngle IncreaseAngle = (tIncreaseAngle)0x463806;
typedef void(__cdecl* tDecreaseAngle)();
static tDecreaseAngle DecreaseAngle = (tDecreaseAngle)0x4638c8;
typedef void(__cdecl* tToggleDepthMode)();
static tToggleDepthMode ToggleDepthMode = (tToggleDepthMode)0x46398a;
typedef int(__cdecl* tGetSkyTextureOn)();
static tGetSkyTextureOn GetSkyTextureOn = (tGetSkyTextureOn)0x463a7e;
typedef void(__cdecl* tToggleSkyQuietly)();
static tToggleSkyQuietly ToggleSkyQuietly = (tToggleSkyQuietly)0x463aba;
typedef void(__cdecl* tToggleSky)();
static tToggleSky ToggleSky = (tToggleSky)0x463b27;
typedef int(__cdecl* tGetDepthCueingOn)();
static tGetDepthCueingOn GetDepthCueingOn = (tGetDepthCueingOn)0x463bc5;
typedef void(__cdecl* tToggleDepthCueingQuietly)();
static tToggleDepthCueingQuietly ToggleDepthCueingQuietly = (tToggleDepthCueingQuietly)0x463c0d;
typedef void(__cdecl* tToggleDepthCueing)();
static tToggleDepthCueing ToggleDepthCueing = (tToggleDepthCueing)0x463c6b;
typedef void(__cdecl* tChangeDepthEffect)();
static tChangeDepthEffect ChangeDepthEffect = (tChangeDepthEffect)0x463d09;
typedef void(__cdecl* tMungeRearviewSky)();
static tMungeRearviewSky MungeRearviewSky = (tMungeRearviewSky)0x463d4a;
HOOK_VARIABLE_IMPLEMENT(int, gFunkotronics_array_size, 0x50c710);
HOOK_VARIABLE_IMPLEMENT(int, gGroovidelics_array_size, 0x50c714);
HOOK_VARIABLE_IMPLEMENT(tFunkotronic_spec*, gFunkotronics_array, 0x50c71c);
HOOK_VARIABLE_IMPLEMENT(tGroovidelic_spec*, gGroovidelics_array, 0x50c720);
HOOK_VARIABLE_IMPLEMENT(char*, gFunk_type_names, 0x50c728);
HOOK_VARIABLE_IMPLEMENT(char*, gFunk_anim_names, 0x50c740);
HOOK_VARIABLE_IMPLEMENT(char*, gTime_mode_names, 0x50c748);
HOOK_VARIABLE_IMPLEMENT(char*, gFunk_move_names, 0x50c750);
HOOK_VARIABLE_IMPLEMENT(char*, gFunk_nature_names, 0x50c768);
HOOK_VARIABLE_IMPLEMENT(char*, gGroove_nature_names, 0x50c778);
HOOK_VARIABLE_IMPLEMENT(char*, gAxis_names, 0x50c780);
HOOK_VARIABLE_IMPLEMENT(char*, gLollipop_names, 0x50c790);
HOOK_VARIABLE_IMPLEMENT(char*, gGroove_path_names, 0x50c7a0);
HOOK_VARIABLE_IMPLEMENT(char*, gGroove_object_names, 0x50c7a8);
HOOK_VARIABLE_IMPLEMENT(char*, gDepth_effect_names, 0x50c7b8);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gGroove_by_proxy_actor, 0x50c7c0);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_additional_models, 0x50c7cc);
HOOK_VARIABLE_IMPLEMENT(int, gRendering_accessories, 0x50c7dc);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float*, gGroove_funk_bindings, 960, 0x532af0);
HOOK_VARIABLE_IMPLEMENT(tPath_name, gAdditional_actor_path, 0x533a00);
HOOK_VARIABLE_IMPLEMENT(tPath_name, gAdditional_model_path, 0x5329f0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU32, gPrevious_groove_times, 2, 0x533b00);
HOOK_VARIABLE_IMPLEMENT(int, gRace_file_version, 0x551d78);
HOOK_VARIABLE_IMPLEMENT(float, gTemp, 0x532218);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gLast_actor, 0x533b0c);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gAdditional_actors, 0x534ab8);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gSight_distance_squared, 0x534abc);
typedef float(__cdecl* tMapSawToTriangle)(float pNumber);
static tMapSawToTriangle MapSawToTriangle = (tMapSawToTriangle)0x43f377;
typedef void(__cdecl* tSetSightDistance)(br_scalar pYon);
static tSetSightDistance SetSightDistance = (tSetSightDistance)0x434b10;
typedef void(__cdecl* tInitialiseStorageSpace)(tBrender_storage* pStorage_space, int pMax_pixelmaps, int pMax_shade_tables, int pMax_materials, int pMax_models);
static tInitialiseStorageSpace InitialiseStorageSpace = (tInitialiseStorageSpace)0x434d37;
typedef void(__cdecl* tClearOutStorageSpace)(tBrender_storage* pStorage_space);
static tClearOutStorageSpace ClearOutStorageSpace = (tClearOutStorageSpace)0x434e60;
typedef tAdd_to_storage_result(__cdecl* tAddPixelmapToStorage)(tBrender_storage* pStorage_space, br_pixelmap** pThe_pm);
static tAddPixelmapToStorage AddPixelmapToStorage = (tAddPixelmapToStorage)0x435014;
typedef tAdd_to_storage_result(__cdecl* tAddShadeTableToStorage)(tBrender_storage* pStorage_space, br_pixelmap* pThe_st);
static tAddShadeTableToStorage AddShadeTableToStorage = (tAddShadeTableToStorage)0x435107;
typedef tAdd_to_storage_result(__cdecl* tAddMaterialToStorage)(tBrender_storage* pStorage_space, br_material* pThe_mat);
static tAddMaterialToStorage AddMaterialToStorage = (tAddMaterialToStorage)0x4351fa;
typedef tAdd_to_storage_result(__cdecl* tAddModelToStorage)(tBrender_storage* pStorage_space, br_model* pThe_mod);
static tAddModelToStorage AddModelToStorage = (tAddModelToStorage)0x435300;
typedef int(__cdecl* tLoadNPixelmaps)(tBrender_storage* pStorage_space, FILE* pF, int pCount);
static tLoadNPixelmaps LoadNPixelmaps = (tLoadNPixelmaps)0x435402;
typedef br_pixelmap* (__cdecl* tLoadSinglePixelmap)(tBrender_storage* pStorage_space, char* pName);
static tLoadSinglePixelmap LoadSinglePixelmap = (tLoadSinglePixelmap)0x435666;
typedef br_material* (__cdecl* tLoadSingleMaterial)(tBrender_storage* pStorage_space, char* pName);
static tLoadSingleMaterial LoadSingleMaterial = (tLoadSingleMaterial)0x435731;
typedef int(__cdecl* tLoadNShadeTables)(tBrender_storage* pStorage_space, FILE* pF, int pCount);
static tLoadNShadeTables LoadNShadeTables = (tLoadNShadeTables)0x4357fc;
typedef br_pixelmap* (__cdecl* tLoadSingleShadeTable)(tBrender_storage* pStorage_space, char* pName);
static tLoadSingleShadeTable LoadSingleShadeTable = (tLoadSingleShadeTable)0x4359c7;
typedef int(__cdecl* tLoadNMaterials)(tBrender_storage* pStorage_space, FILE* pF, int pCount);
static tLoadNMaterials LoadNMaterials = (tLoadNMaterials)0x435a92;
typedef int(__cdecl* tLoadNModels)(tBrender_storage* pStorage_space, FILE* pF, int pCount);
static tLoadNModels LoadNModels = (tLoadNModels)0x435c60;
typedef void(__cdecl* tDodgyModelUpdate)(br_model* pM);
static tDodgyModelUpdate DodgyModelUpdate = (tDodgyModelUpdate)0x435e72;
typedef br_material* (__cdecl* tRoadPerspToUntex)(br_model* pModel, tU16 pFace);
static tRoadPerspToUntex RoadPerspToUntex = (tRoadPerspToUntex)0x4365aa;
typedef br_material* (__cdecl* tWallPerspToLinear)(br_model* pModel, tU16 pFace);
static tWallPerspToLinear WallPerspToLinear = (tWallPerspToLinear)0x435ec1;
typedef br_material* (__cdecl* tWallPerspToUntex)(br_model* pModel, tU16 pFace);
static tWallPerspToUntex WallPerspToUntex = (tWallPerspToUntex)0x436269;
typedef void(__cdecl* tProcessModelFaceMaterials)(br_model* pModel, tPMFMCB pCallback);
static tProcessModelFaceMaterials ProcessModelFaceMaterials = (tProcessModelFaceMaterials)0x436640;
typedef int(__cdecl* tLoadNTrackModels)(tBrender_storage* pStorage_space, FILE* pF, int pCount);
static tLoadNTrackModels LoadNTrackModels = (tLoadNTrackModels)0x436325;
typedef void(__cdecl* tLoadSomePixelmaps)(tBrender_storage* pStorage_space, FILE* pF);
static tLoadSomePixelmaps LoadSomePixelmaps = (tLoadSomePixelmaps)0x4366f3;
typedef void(__cdecl* tLoadSomeShadeTables)(tBrender_storage* pStorage_space, FILE* pF);
static tLoadSomeShadeTables LoadSomeShadeTables = (tLoadSomeShadeTables)0x43675d;
typedef void(__cdecl* tLoadSomeMaterials)(tBrender_storage* pStorage_space, FILE* pF);
static tLoadSomeMaterials LoadSomeMaterials = (tLoadSomeMaterials)0x4367c7;
typedef void(__cdecl* tLoadSomeModels)(tBrender_storage* pStorage_space, FILE* pF);
static tLoadSomeModels LoadSomeModels = (tLoadSomeModels)0x436831;
typedef void(__cdecl* tLoadSomeTrackModels)(tBrender_storage* pStorage_space, FILE* pF);
static tLoadSomeTrackModels LoadSomeTrackModels = (tLoadSomeTrackModels)0x43689f;
typedef void(__cdecl* tAddFunkGrooveBinding)(int pSlot_number, float* pPeriod_address);
static tAddFunkGrooveBinding AddFunkGrooveBinding = (tAddFunkGrooveBinding)0x43690d;
typedef void(__cdecl* tControlBoundFunkGroove)(int pSlot_number, float pValue);
static tControlBoundFunkGroove ControlBoundFunkGroove = (tControlBoundFunkGroove)0x43694f;
typedef float(__cdecl* tControlBoundFunkGroovePlus)(int pSlot_number, float pValue);
static tControlBoundFunkGroovePlus ControlBoundFunkGroovePlus = (tControlBoundFunkGroovePlus)0x43698f;
typedef void(__cdecl* tShiftBoundGrooveFunks)(char* pStart, char* pEnd, ptrdiff_t pDelta);
static tShiftBoundGrooveFunks ShiftBoundGrooveFunks = (tShiftBoundGrooveFunks)0x437dca;
typedef tFunkotronic_spec* (__cdecl* tAddNewFunkotronic)();
static tAddNewFunkotronic AddNewFunkotronic = (tAddNewFunkotronic)0x437c4c;
typedef void(__cdecl* tDisposeFunkotronics)(int pOwner);
static tDisposeFunkotronics DisposeFunkotronics = (tDisposeFunkotronics)0x4369fd;
typedef void(__cdecl* tAddProximityVertex)(br_vector3* pV, tFunkotronic_spec* pThe_funk);
static tAddProximityVertex AddProximityVertex = (tAddProximityVertex)0x43806e;
typedef void(__cdecl* tAddProximityVertexXYZ)(br_scalar pX, br_scalar pY, br_scalar pZ, tFunkotronic_spec* pThe_funk);
static tAddProximityVertexXYZ AddProximityVertexXYZ = (tAddProximityVertexXYZ)0x4380ad;
typedef br_uint_32(__cdecl* tCalcProximities)(br_actor* pActor, br_material* pMat, tFunkotronic_spec* pThe_funk);
static tCalcProximities CalcProximities = (tCalcProximities)0x436af6;
typedef br_uint_32(__cdecl* tAddProximities)(br_actor* pActor, br_material* pMat, tFunkotronic_spec* pThe_funk);
static tAddProximities AddProximities = (tAddProximities)0x437e2f;
typedef void(__cdecl* tAddFunkotronics)(FILE* pF, int pOwner, int pRef_offset);
static tAddFunkotronics AddFunkotronics = (tAddFunkotronics)0x436b8b;
typedef void(__cdecl* tDisposeGroovidelics)(int pOwner);
static tDisposeGroovidelics DisposeGroovidelics = (tDisposeGroovidelics)0x4380dd;
typedef tGroovidelic_spec* (__cdecl* tAddNewGroovidelic)();
static tAddNewGroovidelic AddNewGroovidelic = (tAddNewGroovidelic)0x438eb1;
typedef void(__cdecl* tAddGroovidelics)(FILE* pF, int pOwner, br_actor* pParent_actor, int pRef_offset, int pAllowed_to_be_absent);
static tAddGroovidelics AddGroovidelics = (tAddGroovidelics)0x438146;
typedef void(__cdecl* tDeleteAnyZeroBastards)();
static tDeleteAnyZeroBastards DeleteAnyZeroBastards = (tDeleteAnyZeroBastards)0x43c604;
typedef br_uint_32(__cdecl* tApplyTransToModels)(br_actor* pActor, br_matrix34* pMatrix, void* pArg);
static tApplyTransToModels ApplyTransToModels = (tApplyTransToModels)0x43c775;
typedef void(__cdecl* tFindInverseAndWorldBox)(tSpecial_volume* pSpec);
static tFindInverseAndWorldBox FindInverseAndWorldBox = (tFindInverseAndWorldBox)0x4393a7;
typedef void(__cdecl* tUpdateSpecVol)();
static tUpdateSpecVol UpdateSpecVol = (tUpdateSpecVol)0x4391b7;
typedef void(__cdecl* tSaveSpecialVolumes)();
static tSaveSpecialVolumes SaveSpecialVolumes = (tSaveSpecialVolumes)0x43c853;
typedef void(__cdecl* tSaveAdditionalStuff)();
static tSaveAdditionalStuff SaveAdditionalStuff = (tSaveAdditionalStuff)0x43c589;
typedef void(__cdecl* tHideStoredOpaqueTextures)(tBrender_storage* pStorage);
static tHideStoredOpaqueTextures HideStoredOpaqueTextures = (tHideStoredOpaqueTextures)0x4394b4;
typedef void(__cdecl* tRevealStoredTransparentTextures)(tBrender_storage* pStorage);
static tRevealStoredTransparentTextures RevealStoredTransparentTextures = (tRevealStoredTransparentTextures)0x4396ce;
typedef void(__cdecl* tHideStoredTextures)(tBrender_storage* pStorage);
static tHideStoredTextures HideStoredTextures = (tHideStoredTextures)0x439784;
typedef void(__cdecl* tRevealStoredTextures)(tBrender_storage* pStorage);
static tRevealStoredTextures RevealStoredTextures = (tRevealStoredTextures)0x439847;
typedef void(__cdecl* tSetCarStorageTexturingLevel)(tBrender_storage* pStorage, tCar_texturing_level pNew, tCar_texturing_level pOld);
static tSetCarStorageTexturingLevel SetCarStorageTexturingLevel = (tSetCarStorageTexturingLevel)0x43940b;
typedef tCar_texturing_level(__cdecl* tGetCarTexturingLevel)();
static tGetCarTexturingLevel GetCarTexturingLevel = (tGetCarTexturingLevel)0x4398e0;
typedef intptr_t(__cdecl* tSetAccessoryRenderingCB)(br_actor* pActor, void* pFlag);
static tSetAccessoryRenderingCB SetAccessoryRenderingCB = (tSetAccessoryRenderingCB)0x439f27;
typedef void(__cdecl* tParseSpecialVolume)(FILE* pF, tSpecial_volume* pSpec, char* pScreen_name_str);
static tParseSpecialVolume ParseSpecialVolume = (tParseSpecialVolume)0x439ff7;
typedef void(__cdecl* tLoadTrack)(char* pFile_name, tTrack_spec* pTrack_spec, tRace_info* pRace_info);
static tLoadTrack LoadTrack = (tLoadTrack)0x43a136;
typedef void(__cdecl* tProcessTrack)(br_actor* pWorld, tTrack_spec* pTrack_spec, br_actor* pCamera, br_matrix34* pCamera_to_world_transform, int pRender_blends);
static tProcessTrack ProcessTrack = (tProcessTrack)0x43cf8c;
typedef void(__cdecl* tFunkThoseTronics)();
static tFunkThoseTronics FunkThoseTronics = (tFunkThoseTronics)0x43d010;
typedef void(__cdecl* tLollipopizeActor)(br_actor* pSubject_actor, br_matrix34* ref_to_world, tLollipop_mode pWhich_axis);
static tLollipopizeActor LollipopizeActor = (tLollipopizeActor)0x43f3c3;
typedef void(__cdecl* tCalcActorGlobalPos)(br_vector3* pResult, br_actor* pActor);
static tCalcActorGlobalPos CalcActorGlobalPos = (tCalcActorGlobalPos)0x43f6c2;
typedef int(__cdecl* tPointOutOfSight)(br_vector3* pPoint, br_scalar pMax_distance);
static tPointOutOfSight PointOutOfSight = (tPointOutOfSight)0x43f744;
typedef void(__cdecl* tPathGrooveBastard)(tGroovidelic_spec* pGroove, tU32 pTime, br_matrix34* pMat, int pInterrupt_it);
static tPathGrooveBastard PathGrooveBastard = (tPathGrooveBastard)0x43fb08;
typedef void(__cdecl* tObjectGrooveBastard)(tGroovidelic_spec* pGroove, tU32 pTime, br_matrix34* pMat, int pInterrupt_it);
static tObjectGrooveBastard ObjectGrooveBastard = (tObjectGrooveBastard)0x440abe;
typedef void(__cdecl* tGrooveThisDelic)(tGroovidelic_spec* pGroove, tU32 pTime, int pInterrupt_it);
static tGrooveThisDelic GrooveThisDelic = (tGrooveThisDelic)0x43f886;
typedef void(__cdecl* tGrooveThoseDelics)();
static tGrooveThoseDelics GrooveThoseDelics = (tGrooveThoseDelics)0x4430dd;
typedef void(__cdecl* tStopGroovidelic)(br_actor* pActor);
static tStopGroovidelic StopGroovidelic = (tStopGroovidelic)0x443186;
typedef void(__cdecl* tResetGrooveFlags)();
static tResetGrooveFlags ResetGrooveFlags = (tResetGrooveFlags)0x44325f;
typedef tSpecial_volume* (__cdecl* tGetDefaultSpecialVolumeForWater)();
static tGetDefaultSpecialVolumeForWater GetDefaultSpecialVolumeForWater = (tGetDefaultSpecialVolumeForWater)0x4432a9;
typedef void(__cdecl* tDropActor0)();
static tDropActor0 DropActor0 = (tDropActor0)0x444145;
typedef void(__cdecl* tDropActor1)();
static tDropActor1 DropActor1 = (tDropActor1)0x44415a;
typedef void(__cdecl* tDropActor2)();
static tDropActor2 DropActor2 = (tDropActor2)0x44416f;
typedef void(__cdecl* tDropActor3)();
static tDropActor3 DropActor3 = (tDropActor3)0x444184;
typedef void(__cdecl* tDropActor4)();
static tDropActor4 DropActor4 = (tDropActor4)0x444199;
typedef void(__cdecl* tDropActor5)();
static tDropActor5 DropActor5 = (tDropActor5)0x4441ae;
typedef void(__cdecl* tDropActor6)();
static tDropActor6 DropActor6 = (tDropActor6)0x4441c3;
typedef void(__cdecl* tDropActor7)();
static tDropActor7 DropActor7 = (tDropActor7)0x4441d8;
typedef void(__cdecl* tDropActor8)();
static tDropActor8 DropActor8 = (tDropActor8)0x4441ed;
typedef void(__cdecl* tDropActor9)();
static tDropActor9 DropActor9 = (tDropActor9)0x444202;
typedef void(__cdecl* tIdentifyAcc)();
static tIdentifyAcc IdentifyAcc = (tIdentifyAcc)0x444217;
typedef void(__cdecl* tDeleteAcc)();
static tDeleteAcc DeleteAcc = (tDeleteAcc)0x4443bb;
typedef void(__cdecl* tSnapAccToVertical)();
static tSnapAccToVertical SnapAccToVertical = (tSnapAccToVertical)0x444538;
typedef void(__cdecl* tMoveAccessory)(br_scalar pX_shift, br_scalar pY_shift, br_scalar pZ_shift);
static tMoveAccessory MoveAccessory = (tMoveAccessory)0x444d87;
typedef void(__cdecl* tRotateAccL)();
static tRotateAccL RotateAccL = (tRotateAccL)0x4445c1;
typedef void(__cdecl* tRotateAccL2)();
static tRotateAccL2 RotateAccL2 = (tRotateAccL2)0x44491e;
typedef void(__cdecl* tRotateAccL3)();
static tRotateAccL3 RotateAccL3 = (tRotateAccL3)0x444936;
typedef void(__cdecl* tRotateAccL4)();
static tRotateAccL4 RotateAccL4 = (tRotateAccL4)0x44494e;
typedef void(__cdecl* tRotateAccR)();
static tRotateAccR RotateAccR = (tRotateAccR)0x444966;
typedef void(__cdecl* tRotateAccR2)();
static tRotateAccR2 RotateAccR2 = (tRotateAccR2)0x44497e;
typedef void(__cdecl* tRotateAccR3)();
static tRotateAccR3 RotateAccR3 = (tRotateAccR3)0x444996;
typedef void(__cdecl* tRotateAccR4)();
static tRotateAccR4 RotateAccR4 = (tRotateAccR4)0x4449ae;
typedef void(__cdecl* tCycleAccRotate)();
static tCycleAccRotate CycleAccRotate = (tCycleAccRotate)0x4449c6;
typedef void(__cdecl* tCycleAccScale)();
static tCycleAccScale CycleAccScale = (tCycleAccScale)0x444a82;
typedef void(__cdecl* tScaleAccUp2)();
static tScaleAccUp2 ScaleAccUp2 = (tScaleAccUp2)0x444b5c;
typedef void(__cdecl* tScaleAccUp3)();
static tScaleAccUp3 ScaleAccUp3 = (tScaleAccUp3)0x444cf3;
typedef void(__cdecl* tScaleAccUp4)();
static tScaleAccUp4 ScaleAccUp4 = (tScaleAccUp4)0x444d0b;
typedef void(__cdecl* tScaleAccDown2)();
static tScaleAccDown2 ScaleAccDown2 = (tScaleAccDown2)0x444d23;
typedef void(__cdecl* tScaleAccDown3)();
static tScaleAccDown3 ScaleAccDown3 = (tScaleAccDown3)0x444d3b;
typedef void(__cdecl* tScaleAccDown4)();
static tScaleAccDown4 ScaleAccDown4 = (tScaleAccDown4)0x444d53;
typedef void(__cdecl* tMoveXAccL)();
static tMoveXAccL MoveXAccL = (tMoveXAccL)0x444d6b;
typedef void(__cdecl* tMoveXAccL2)();
static tMoveXAccL2 MoveXAccL2 = (tMoveXAccL2)0x444df2;
typedef void(__cdecl* tMoveXAccL3)();
static tMoveXAccL3 MoveXAccL3 = (tMoveXAccL3)0x444e0e;
typedef void(__cdecl* tMoveXAccL4)();
static tMoveXAccL4 MoveXAccL4 = (tMoveXAccL4)0x444e2a;
typedef void(__cdecl* tMoveXAccR)();
static tMoveXAccR MoveXAccR = (tMoveXAccR)0x444e46;
typedef void(__cdecl* tMoveXAccR2)();
static tMoveXAccR2 MoveXAccR2 = (tMoveXAccR2)0x444e62;
typedef void(__cdecl* tMoveXAccR3)();
static tMoveXAccR3 MoveXAccR3 = (tMoveXAccR3)0x444e7e;
typedef void(__cdecl* tMoveXAccR4)();
static tMoveXAccR4 MoveXAccR4 = (tMoveXAccR4)0x444e9a;
typedef void(__cdecl* tMoveYAccL)();
static tMoveYAccL MoveYAccL = (tMoveYAccL)0x444eb6;
typedef void(__cdecl* tMoveYAccL2)();
static tMoveYAccL2 MoveYAccL2 = (tMoveYAccL2)0x444ed2;
typedef void(__cdecl* tMoveYAccL3)();
static tMoveYAccL3 MoveYAccL3 = (tMoveYAccL3)0x444eee;
typedef void(__cdecl* tMoveYAccL4)();
static tMoveYAccL4 MoveYAccL4 = (tMoveYAccL4)0x444f0a;
typedef void(__cdecl* tMoveYAccR)();
static tMoveYAccR MoveYAccR = (tMoveYAccR)0x444f26;
typedef void(__cdecl* tMoveYAccR2)();
static tMoveYAccR2 MoveYAccR2 = (tMoveYAccR2)0x444f42;
typedef void(__cdecl* tMoveYAccR3)();
static tMoveYAccR3 MoveYAccR3 = (tMoveYAccR3)0x444f5e;
typedef void(__cdecl* tMoveYAccR4)();
static tMoveYAccR4 MoveYAccR4 = (tMoveYAccR4)0x444f7a;
typedef void(__cdecl* tMoveZAccL)();
static tMoveZAccL MoveZAccL = (tMoveZAccL)0x444f96;
typedef void(__cdecl* tMoveZAccL2)();
static tMoveZAccL2 MoveZAccL2 = (tMoveZAccL2)0x444fb2;
typedef void(__cdecl* tMoveZAccL3)();
static tMoveZAccL3 MoveZAccL3 = (tMoveZAccL3)0x444fce;
typedef void(__cdecl* tMoveZAccL4)();
static tMoveZAccL4 MoveZAccL4 = (tMoveZAccL4)0x444fea;
typedef void(__cdecl* tMoveZAccR)();
static tMoveZAccR MoveZAccR = (tMoveZAccR)0x445006;
typedef void(__cdecl* tMoveZAccR2)();
static tMoveZAccR2 MoveZAccR2 = (tMoveZAccR2)0x445022;
typedef void(__cdecl* tMoveZAccR3)();
static tMoveZAccR3 MoveZAccR3 = (tMoveZAccR3)0x44503e;
typedef void(__cdecl* tMoveZAccR4)();
static tMoveZAccR4 MoveZAccR4 = (tMoveZAccR4)0x44505a;
typedef void(__cdecl* tDropSpecVol)(int pIndex);
static tDropSpecVol DropSpecVol = (tDropSpecVol)0x4450d0;
typedef void(__cdecl* tDropSpecVol0)();
static tDropSpecVol0 DropSpecVol0 = (tDropSpecVol0)0x4450b0;
typedef void(__cdecl* tDropSpecVol1)();
static tDropSpecVol1 DropSpecVol1 = (tDropSpecVol1)0x4450bb;
typedef void(__cdecl* tDropSpecVol2)();
static tDropSpecVol2 DropSpecVol2 = (tDropSpecVol2)0x445b86;
typedef void(__cdecl* tDropSpecVol3)();
static tDropSpecVol3 DropSpecVol3 = (tDropSpecVol3)0x445b9b;
typedef void(__cdecl* tDropSpecVol4)();
static tDropSpecVol4 DropSpecVol4 = (tDropSpecVol4)0x445bb0;
typedef void(__cdecl* tDropSpecVol5)();
static tDropSpecVol5 DropSpecVol5 = (tDropSpecVol5)0x445bc5;
typedef void(__cdecl* tDropSpecVol6)();
static tDropSpecVol6 DropSpecVol6 = (tDropSpecVol6)0x445bda;
typedef void(__cdecl* tDropSpecVol7)();
static tDropSpecVol7 DropSpecVol7 = (tDropSpecVol7)0x445bef;
typedef void(__cdecl* tDropSpecVol8)();
static tDropSpecVol8 DropSpecVol8 = (tDropSpecVol8)0x445c04;
typedef void(__cdecl* tDropSpecVol9)();
static tDropSpecVol9 DropSpecVol9 = (tDropSpecVol9)0x445c19;
typedef void(__cdecl* tIdentifySpecVol)();
static tIdentifySpecVol IdentifySpecVol = (tIdentifySpecVol)0x445c2e;
typedef void(__cdecl* tDeleteSpecVol)();
static tDeleteSpecVol DeleteSpecVol = (tDeleteSpecVol)0x445dc5;
typedef void(__cdecl* tRotateSpecVolL)();
static tRotateSpecVolL RotateSpecVolL = (tRotateSpecVolL)0x446022;
typedef void(__cdecl* tRotateSpecVolL2)();
static tRotateSpecVolL2 RotateSpecVolL2 = (tRotateSpecVolL2)0x446032;
typedef void(__cdecl* tRotateSpecVolL3)();
static tRotateSpecVolL3 RotateSpecVolL3 = (tRotateSpecVolL3)0x446042;
typedef void(__cdecl* tRotateSpecVolL4)();
static tRotateSpecVolL4 RotateSpecVolL4 = (tRotateSpecVolL4)0x446052;
typedef void(__cdecl* tRotateSpecVolR)();
static tRotateSpecVolR RotateSpecVolR = (tRotateSpecVolR)0x446062;
typedef void(__cdecl* tRotateSpecVolR2)();
static tRotateSpecVolR2 RotateSpecVolR2 = (tRotateSpecVolR2)0x446072;
typedef void(__cdecl* tRotateSpecVolR3)();
static tRotateSpecVolR3 RotateSpecVolR3 = (tRotateSpecVolR3)0x446082;
typedef void(__cdecl* tRotateSpecVolR4)();
static tRotateSpecVolR4 RotateSpecVolR4 = (tRotateSpecVolR4)0x446092;
typedef void(__cdecl* tCycleSpecVolRotate)();
static tCycleSpecVolRotate CycleSpecVolRotate = (tCycleSpecVolRotate)0x4460a2;
typedef void(__cdecl* tCycleSpecVolScale)();
static tCycleSpecVolScale CycleSpecVolScale = (tCycleSpecVolScale)0x4460b2;
typedef void(__cdecl* tScaleSpecVolUp2)();
static tScaleSpecVolUp2 ScaleSpecVolUp2 = (tScaleSpecVolUp2)0x4460c2;
typedef void(__cdecl* tScaleSpecVolUp3)();
static tScaleSpecVolUp3 ScaleSpecVolUp3 = (tScaleSpecVolUp3)0x4460d2;
typedef void(__cdecl* tScaleSpecVolUp4)();
static tScaleSpecVolUp4 ScaleSpecVolUp4 = (tScaleSpecVolUp4)0x4460e2;
typedef void(__cdecl* tScaleSpecVolDown2)();
static tScaleSpecVolDown2 ScaleSpecVolDown2 = (tScaleSpecVolDown2)0x4460f2;
typedef void(__cdecl* tScaleSpecVolDown3)();
static tScaleSpecVolDown3 ScaleSpecVolDown3 = (tScaleSpecVolDown3)0x446102;
typedef void(__cdecl* tScaleSpecVolDown4)();
static tScaleSpecVolDown4 ScaleSpecVolDown4 = (tScaleSpecVolDown4)0x446112;
typedef void(__cdecl* tMoveXSpecVolL)();
static tMoveXSpecVolL MoveXSpecVolL = (tMoveXSpecVolL)0x446122;
typedef void(__cdecl* tMoveXSpecVolL2)();
static tMoveXSpecVolL2 MoveXSpecVolL2 = (tMoveXSpecVolL2)0x446132;
typedef void(__cdecl* tMoveXSpecVolL3)();
static tMoveXSpecVolL3 MoveXSpecVolL3 = (tMoveXSpecVolL3)0x446142;
typedef void(__cdecl* tMoveXSpecVolL4)();
static tMoveXSpecVolL4 MoveXSpecVolL4 = (tMoveXSpecVolL4)0x446152;
typedef void(__cdecl* tMoveXSpecVolR)();
static tMoveXSpecVolR MoveXSpecVolR = (tMoveXSpecVolR)0x446162;
typedef void(__cdecl* tMoveXSpecVolR2)();
static tMoveXSpecVolR2 MoveXSpecVolR2 = (tMoveXSpecVolR2)0x446172;
typedef void(__cdecl* tMoveXSpecVolR3)();
static tMoveXSpecVolR3 MoveXSpecVolR3 = (tMoveXSpecVolR3)0x446182;
typedef void(__cdecl* tMoveXSpecVolR4)();
static tMoveXSpecVolR4 MoveXSpecVolR4 = (tMoveXSpecVolR4)0x446192;
typedef void(__cdecl* tMoveYSpecVolL)();
static tMoveYSpecVolL MoveYSpecVolL = (tMoveYSpecVolL)0x4461a2;
typedef void(__cdecl* tMoveYSpecVolL2)();
static tMoveYSpecVolL2 MoveYSpecVolL2 = (tMoveYSpecVolL2)0x4461b2;
typedef void(__cdecl* tMoveYSpecVolL3)();
static tMoveYSpecVolL3 MoveYSpecVolL3 = (tMoveYSpecVolL3)0x4461c2;
typedef void(__cdecl* tMoveYSpecVolL4)();
static tMoveYSpecVolL4 MoveYSpecVolL4 = (tMoveYSpecVolL4)0x4461d2;
typedef void(__cdecl* tMoveYSpecVolR)();
static tMoveYSpecVolR MoveYSpecVolR = (tMoveYSpecVolR)0x4461e2;
typedef void(__cdecl* tMoveYSpecVolR2)();
static tMoveYSpecVolR2 MoveYSpecVolR2 = (tMoveYSpecVolR2)0x4461f2;
typedef void(__cdecl* tMoveYSpecVolR3)();
static tMoveYSpecVolR3 MoveYSpecVolR3 = (tMoveYSpecVolR3)0x446202;
typedef void(__cdecl* tMoveYSpecVolR4)();
static tMoveYSpecVolR4 MoveYSpecVolR4 = (tMoveYSpecVolR4)0x446212;
typedef void(__cdecl* tMoveZSpecVolL)();
static tMoveZSpecVolL MoveZSpecVolL = (tMoveZSpecVolL)0x446222;
typedef void(__cdecl* tMoveZSpecVolL2)();
static tMoveZSpecVolL2 MoveZSpecVolL2 = (tMoveZSpecVolL2)0x446232;
typedef void(__cdecl* tMoveZSpecVolL3)();
static tMoveZSpecVolL3 MoveZSpecVolL3 = (tMoveZSpecVolL3)0x446242;
typedef void(__cdecl* tMoveZSpecVolL4)();
static tMoveZSpecVolL4 MoveZSpecVolL4 = (tMoveZSpecVolL4)0x446252;
typedef void(__cdecl* tMoveZSpecVolR)();
static tMoveZSpecVolR MoveZSpecVolR = (tMoveZSpecVolR)0x446262;
typedef void(__cdecl* tMoveZSpecVolR2)();
static tMoveZSpecVolR2 MoveZSpecVolR2 = (tMoveZSpecVolR2)0x446272;
typedef void(__cdecl* tMoveZSpecVolR3)();
static tMoveZSpecVolR3 MoveZSpecVolR3 = (tMoveZSpecVolR3)0x446282;
typedef void(__cdecl* tMoveZSpecVolR4)();
static tMoveZSpecVolR4 MoveZSpecVolR4 = (tMoveZSpecVolR4)0x446292;
typedef void(__cdecl* tSnapSpecVolToVertical)();
static tSnapSpecVolToVertical SnapSpecVolToVertical = (tSnapSpecVolToVertical)0x4462a2;
typedef void(__cdecl* tShowSpecialVolumes)();
static tShowSpecialVolumes ShowSpecialVolumes = (tShowSpecialVolumes)0x4462b2;
typedef void(__cdecl* tHideSpecialVolumes)();
static tHideSpecialVolumes HideSpecialVolumes = (tHideSpecialVolumes)0x446351;
HOOK_VARIABLE_IMPLEMENT(int, gTemp_group, 0x53e588);
HOOK_VARIABLE_IMPLEMENT(br_model*, gNearest_model, 0x53e54c);
HOOK_VARIABLE_IMPLEMENT(int, gNearest_face_group, 0x53e554);
HOOK_VARIABLE_IMPLEMENT(int, gNearest_face, 0x53e548);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gNearest_T, 0x53e550);
HOOK_VARIABLE_IMPLEMENT(tFace_ref*, gPling_face, 0x550240);
typedef int(__cdecl* tBadDiv__finteray)(br_scalar a, br_scalar b);
static tBadDiv__finteray BadDiv__finteray = (tBadDiv__finteray)0x4abe0c;
typedef int(__cdecl* tActorRayPick2D)(br_actor* ap, br_vector3* pPosition, br_vector3* pDir, br_model* model, br_material* material, dr_pick2d_cbfn* callback);
static tActorRayPick2D ActorRayPick2D = (tActorRayPick2D)0x4aaf5a;
typedef int(__cdecl* tDRSceneRayPick2D)(br_actor* world, br_vector3* pPosition, br_vector3* pDir, dr_pick2d_cbfn* callback);
static tDRSceneRayPick2D DRSceneRayPick2D = (tDRSceneRayPick2D)0x4aaf10;
typedef void(__cdecl* tFindFace)(br_vector3* pPosition, br_vector3* pDir, br_vector3* nor, br_scalar* t, br_material** material);
static tFindFace FindFace = (tFindFace)0x4ab47d;
typedef void(__cdecl* tEnablePlingMaterials)();
static tEnablePlingMaterials EnablePlingMaterials = (tEnablePlingMaterials)0x4abed5;
typedef void(__cdecl* tDisablePlingMaterials)();
static tDisablePlingMaterials DisablePlingMaterials = (tDisablePlingMaterials)0x4abeea;
typedef void(__cdecl* tCheckSingleFace)(tFace_ref* pFace, br_vector3* ray_pos, br_vector3* ray_dir, br_vector3* normal, br_scalar* rt);
static tCheckSingleFace CheckSingleFace = (tCheckSingleFace)0x4abeff;
typedef void(__cdecl* tMultiRayCheckSingleFace)(int pNum_rays, tFace_ref* pFace, br_vector3* ray_pos, br_vector3* ray_dir, br_vector3* normal, br_scalar* rt);
static tMultiRayCheckSingleFace MultiRayCheckSingleFace = (tMultiRayCheckSingleFace)0x4ac3b7;
typedef void(__cdecl* tGetNewBoundingBox)(br_bounds* b2, br_bounds* b1, br_matrix34* m);
static tGetNewBoundingBox GetNewBoundingBox = (tGetNewBoundingBox)0x4acaa2;
typedef int(__cdecl* tFindFacesInBox)(tBounds* bnds, tFace_ref* face_list, int max_face);
static tFindFacesInBox FindFacesInBox = (tFindFacesInBox)0x4accae;
typedef int(__cdecl* tActorBoxPick)(tBounds* bnds, br_actor* ap, br_model* model, br_material* material, tFace_ref* face_list, int max_face, br_matrix34* pMat);
static tActorBoxPick ActorBoxPick = (tActorBoxPick)0x4ad45b;
typedef int(__cdecl* tModelPickBox)(br_actor* actor, tBounds* bnds, br_model* model, br_material* model_material, tFace_ref* face_list, int max_face, br_matrix34* pMat);
static tModelPickBox ModelPickBox = (tModelPickBox)0x4ad8ce;
typedef void(__cdecl* tClipToPlaneGE)(br_vector3* p, int* nv, int i, br_scalar limit);
static tClipToPlaneGE ClipToPlaneGE = (tClipToPlaneGE)0x4ae5b5;
typedef void(__cdecl* tClipToPlaneLE)(br_vector3* p, int* nv, int i, br_scalar limit);
static tClipToPlaneLE ClipToPlaneLE = (tClipToPlaneLE)0x4ae89f;
typedef int(__cdecl* tBoundsTransformTest)(br_bounds* b1, br_bounds* b2, br_matrix34* M);
static tBoundsTransformTest BoundsTransformTest = (tBoundsTransformTest)0x4aec32;
typedef int(__cdecl* tLineBoxColl)(br_vector3* o, br_vector3* p, br_bounds* pB, br_vector3* pHit_point);
static tLineBoxColl LineBoxColl = (tLineBoxColl)0x4af126;
typedef int(__cdecl* tSphereBoxIntersection)(br_bounds* pB, br_vector3* pC, br_scalar pR_squared, br_vector3* pHit_point);
static tSphereBoxIntersection SphereBoxIntersection = (tSphereBoxIntersection)0x4af3f0;
typedef int(__cdecl* tLineBoxCollWithSphere)(br_vector3* o, br_vector3* p, br_bounds* pB, br_vector3* pHit_point);
static tLineBoxCollWithSphere LineBoxCollWithSphere = (tLineBoxCollWithSphere)0x4af4d2;
typedef void(__cdecl* tScaleUpX)();
static tScaleUpX ScaleUpX = (tScaleUpX)0x4afbdc;
typedef void(__cdecl* tScaleDnX)();
static tScaleDnX ScaleDnX = (tScaleDnX)0x4afd9a;
typedef void(__cdecl* tScaleUpY)();
static tScaleUpY ScaleUpY = (tScaleUpY)0x4afdb1;
typedef void(__cdecl* tScaleDnY)();
static tScaleDnY ScaleDnY = (tScaleDnY)0x4afdc8;
typedef void(__cdecl* tSelectFaceForward)();
static tSelectFaceForward SelectFaceForward = (tSelectFaceForward)0x4afddf;
typedef void(__cdecl* tSelectFaceDown)();
static tSelectFaceDown SelectFaceDown = (tSelectFaceDown)0x4afe2c;
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gOpponent_mix, 10, 0x509a70);
HOOK_VARIABLE_IMPLEMENT(tRace_over_reason, gRace_over_reason, 0x551dbc);
typedef int(__cdecl* tNumberOfOpponentsLeft)();
static tNumberOfOpponentsLeft NumberOfOpponentsLeft = (tNumberOfOpponentsLeft)0x413f90;
typedef void(__cdecl* tRaceCompleted)(tRace_over_reason pReason);
static tRaceCompleted RaceCompleted = (tRaceCompleted)0x413ffe;
typedef void(__cdecl* tIncrementCheckpoint)();
static tIncrementCheckpoint IncrementCheckpoint = (tIncrementCheckpoint)0x414206;
typedef void(__cdecl* tIncrementLap)();
static tIncrementLap IncrementLap = (tIncrementLap)0x41433c;
typedef void(__cdecl* tCheckCheckpoints)();
static tCheckCheckpoints CheckCheckpoints = (tCheckCheckpoints)0x414468;
typedef void(__cdecl* tTotalRepair)();
static tTotalRepair TotalRepair = (tTotalRepair)0x4148f7;
typedef void(__cdecl* tDoLogos)();
static tDoLogos DoLogos = (tDoLogos)0x414e48;
typedef void(__cdecl* tDoProgOpeningAnimation)();
static tDoProgOpeningAnimation DoProgOpeningAnimation = (tDoProgOpeningAnimation)0x414e71;
typedef void(__cdecl* tDoProgramDemo)();
static tDoProgramDemo DoProgramDemo = (tDoProgramDemo)0x414e94;
typedef int(__cdecl* tChooseOpponent)(int pNastiness, int* pHad_scum);
static tChooseOpponent ChooseOpponent = (tChooseOpponent)0x414a47;
typedef void(__cdecl* tSelectOpponents)(tRace_info* pRace_info);
static tSelectOpponents SelectOpponents = (tSelectOpponents)0x414925;
typedef void(__cdecl* tSwapNetCarsLoad)();
static tSwapNetCarsLoad SwapNetCarsLoad = (tSwapNetCarsLoad)0x41542b;
typedef void(__cdecl* tSwapNetCarsDispose)();
static tSwapNetCarsDispose SwapNetCarsDispose = (tSwapNetCarsDispose)0x41552d;
typedef void(__cdecl* tDoGame)();
static tDoGame DoGame = (tDoGame)0x414ebc;
typedef void(__cdecl* tInitialiseProgramState)();
static tInitialiseProgramState InitialiseProgramState = (tInitialiseProgramState)0x414ca8;
typedef void(__cdecl* tDoProgram)();
static tDoProgram DoProgram = (tDoProgram)0x414d8a;
typedef void(__cdecl* tJumpTheStart)();
static tJumpTheStart JumpTheStart = (tJumpTheStart)0x4155d4;
typedef void(__cdecl* tGoingToInterfaceFromRace)();
static tGoingToInterfaceFromRace GoingToInterfaceFromRace = (tGoingToInterfaceFromRace)0x4156c2;
typedef void(__cdecl* tGoingBackToRaceFromInterface)();
static tGoingBackToRaceFromInterface GoingBackToRaceFromInterface = (tGoingBackToRaceFromInterface)0x415700;
HOOK_VARIABLE_IMPLEMENT_ARRAY(tCar_spec*, gViewable_car_list, 50, 0x5508f0);
HOOK_VARIABLE_IMPLEMENT(int, gNum_viewable_cars, 0x5509b8);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tGraf_data, gGraf_data, 2, 0x50bcf0);
HOOK_VARIABLE_IMPLEMENT(tGraf_data*, gCurrent_graf_data, 0x551d88);
HOOK_VARIABLE_IMPLEMENT(int, gGraf_data_index, 0x551d84);
typedef void(__cdecl* tCalcGrafDataIndex)();
static tCalcGrafDataIndex CalcGrafDataIndex = (tCalcGrafDataIndex)0x42f200;
HOOK_VARIABLE_IMPLEMENT(tToggle_element, gToggle_array, 0x51b1c0);
HOOK_VARIABLE_IMPLEMENT(int, gRepair_last_time, 0x51b5c8);
HOOK_VARIABLE_IMPLEMENT(int, gHad_auto_recover, 0x51b5cc);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_repair_time, 0x51b5d0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tEdit_func*, gEdit_funcs, 10, 0x51b600);
typedef void(__cdecl* tAbortRace)();
static tAbortRace AbortRace = (tAbortRace)0x4a0c70;
typedef void(__cdecl* tF4Key)();
static tF4Key F4Key = (tF4Key)0x4a0c92;
typedef void(__cdecl* tSetFlag)(int i);
static tSetFlag SetFlag = (tSetFlag)0x4a0db7;
typedef void(__cdecl* tFinishLap)(int i);
static tFinishLap FinishLap = (tFinishLap)0x4a0df4;
typedef void(__cdecl* tEnsureSpecialVolumesHidden)();
static tEnsureSpecialVolumesHidden EnsureSpecialVolumesHidden = (tEnsureSpecialVolumesHidden)0x4a0e04;
typedef void(__cdecl* tShowSpecialVolumesIfRequ)();
static tShowSpecialVolumesIfRequ ShowSpecialVolumesIfRequ = (tShowSpecialVolumesIfRequ)0x4a0e21;
typedef void(__cdecl* tDoEditModeKey)(int pIndex);
static tDoEditModeKey DoEditModeKey = (tDoEditModeKey)0x4a0e53;
typedef void(__cdecl* tLookLeft)();
static tLookLeft LookLeft = (tLookLeft)0x4a108d;
typedef void(__cdecl* tLookForward)();
static tLookForward LookForward = (tLookForward)0x4a113a;
typedef void(__cdecl* tLookRight)();
static tLookRight LookRight = (tLookRight)0x4a11b2;
typedef void(__cdecl* tTDamageEngine)();
static tTDamageEngine TDamageEngine = (tTDamageEngine)0x4a126a;
typedef void(__cdecl* tTDamageDriver)();
static tTDamageDriver TDamageDriver = (tTDamageDriver)0x4a127f;
typedef void(__cdecl* tTDamageTrans)();
static tTDamageTrans TDamageTrans = (tTDamageTrans)0x4a12d4;
typedef void(__cdecl* tTDamageSteering)();
static tTDamageSteering TDamageSteering = (tTDamageSteering)0x4a12e9;
typedef void(__cdecl* tTDamageLFWheel)();
static tTDamageLFWheel TDamageLFWheel = (tTDamageLFWheel)0x4a12fe;
typedef void(__cdecl* tTDamageLFBrake)();
static tTDamageLFBrake TDamageLFBrake = (tTDamageLFBrake)0x4a1313;
typedef void(__cdecl* tTDamageLRBrake)();
static tTDamageLRBrake TDamageLRBrake = (tTDamageLRBrake)0x4a1328;
typedef void(__cdecl* tTDamageLRWheel)();
static tTDamageLRWheel TDamageLRWheel = (tTDamageLRWheel)0x4a133d;
typedef void(__cdecl* tTDamageRFWheel)();
static tTDamageRFWheel TDamageRFWheel = (tTDamageRFWheel)0x4a1352;
typedef void(__cdecl* tTDamageRFBrake)();
static tTDamageRFBrake TDamageRFBrake = (tTDamageRFBrake)0x4a1367;
typedef void(__cdecl* tTDamageRRBrake)();
static tTDamageRRBrake TDamageRRBrake = (tTDamageRRBrake)0x4a137c;
typedef void(__cdecl* tTDamageRRWheel)();
static tTDamageRRWheel TDamageRRWheel = (tTDamageRRWheel)0x4a1391;
typedef void(__cdecl* tMoveBonnetForward)();
static tMoveBonnetForward MoveBonnetForward = (tMoveBonnetForward)0x4a13a6;
typedef void(__cdecl* tSaveBonnet)();
static tSaveBonnet SaveBonnet = (tSaveBonnet)0x4a13dd;
typedef void(__cdecl* tMoveBonnetBackward)();
static tMoveBonnetBackward MoveBonnetBackward = (tMoveBonnetBackward)0x4a142f;
typedef void(__cdecl* tMoveBonnetLeft)();
static tMoveBonnetLeft MoveBonnetLeft = (tMoveBonnetLeft)0x4a1466;
typedef void(__cdecl* tShrinkBonnetX)();
static tShrinkBonnetX ShrinkBonnetX = (tShrinkBonnetX)0x4a149d;
typedef void(__cdecl* tSwellBonnetX)();
static tSwellBonnetX SwellBonnetX = (tSwellBonnetX)0x4a14d4;
typedef void(__cdecl* tShrinkBonnetY)();
static tShrinkBonnetY ShrinkBonnetY = (tShrinkBonnetY)0x4a150b;
typedef void(__cdecl* tSwellBonnetY)();
static tSwellBonnetY SwellBonnetY = (tSwellBonnetY)0x4a1542;
typedef void(__cdecl* tShrinkBonnetZ)();
static tShrinkBonnetZ ShrinkBonnetZ = (tShrinkBonnetZ)0x4a1579;
typedef void(__cdecl* tSwellBonnetZ)();
static tSwellBonnetZ SwellBonnetZ = (tSwellBonnetZ)0x4a15b0;
typedef void(__cdecl* tMoveBonnetDown)();
static tMoveBonnetDown MoveBonnetDown = (tMoveBonnetDown)0x4a15e7;
typedef void(__cdecl* tMoveBonnetRight)();
static tMoveBonnetRight MoveBonnetRight = (tMoveBonnetRight)0x4a161e;
typedef void(__cdecl* tMoveBonnetUp)();
static tMoveBonnetUp MoveBonnetUp = (tMoveBonnetUp)0x4a1655;
typedef void(__cdecl* tTiltBonnetDownX)();
static tTiltBonnetDownX TiltBonnetDownX = (tTiltBonnetDownX)0x4a168c;
typedef void(__cdecl* tTiltBonnetUpX)();
static tTiltBonnetUpX TiltBonnetUpX = (tTiltBonnetUpX)0x4a16b5;
typedef void(__cdecl* tTiltBonnetDownY)();
static tTiltBonnetDownY TiltBonnetDownY = (tTiltBonnetDownY)0x4a16e1;
typedef void(__cdecl* tTiltBonnetUpY)();
static tTiltBonnetUpY TiltBonnetUpY = (tTiltBonnetUpY)0x4a170a;
typedef void(__cdecl* tTiltBonnetDownZ)();
static tTiltBonnetDownZ TiltBonnetDownZ = (tTiltBonnetDownZ)0x4a1736;
typedef void(__cdecl* tTiltBonnetUpZ)();
static tTiltBonnetUpZ TiltBonnetUpZ = (tTiltBonnetUpZ)0x4a175f;
typedef void(__cdecl* tToggleCockpit)();
static tToggleCockpit ToggleCockpit = (tToggleCockpit)0x4a178b;
typedef void(__cdecl* tToggleMirror)();
static tToggleMirror ToggleMirror = (tToggleMirror)0x4a1895;
typedef void(__cdecl* tCheckToggles)(int pRacing);
static tCheckToggles CheckToggles = (tCheckToggles)0x4a198a;
typedef int(__cdecl* tCarWorldOffFallenCheckThingy)(tCar_spec* pCar, int pCheck_around);
static tCarWorldOffFallenCheckThingy CarWorldOffFallenCheckThingy = (tCarWorldOffFallenCheckThingy)0x4a1b4d;
typedef int(__cdecl* tHasCarFallenOffWorld)(tCar_spec* pCar);
static tHasCarFallenOffWorld HasCarFallenOffWorld = (tHasCarFallenOffWorld)0x4a1b2f;
typedef void(__cdecl* tCheckForBeingOutOfThisWorld)();
static tCheckForBeingOutOfThisWorld CheckForBeingOutOfThisWorld = (tCheckForBeingOutOfThisWorld)0x4a3328;
typedef void(__cdecl* tCheckHornLocal)(tCar_spec* pCar);
static tCheckHornLocal CheckHornLocal = (tCheckHornLocal)0x4a34a8;
typedef void(__cdecl* tCheckHorn3D)(tCar_spec* pCar);
static tCheckHorn3D CheckHorn3D = (tCheckHorn3D)0x4a3582;
typedef void(__cdecl* tCheckHorns)();
static tCheckHorns CheckHorns = (tCheckHorns)0x4a343d;
typedef void(__cdecl* tSetRecovery)();
static tSetRecovery SetRecovery = (tSetRecovery)0x4a1d13;
typedef void(__cdecl* tRecoverCar)();
static tRecoverCar RecoverCar = (tRecoverCar)0x4a20b0;
typedef void(__cdecl* tCheckMapRenderMove)();
static tCheckMapRenderMove CheckMapRenderMove = (tCheckMapRenderMove)0x4a3694;
typedef void(__cdecl* tExplodeCar)(tCar_spec* pCar);
static tExplodeCar ExplodeCar = (tExplodeCar)0x4a20e9;
typedef void(__cdecl* tCheckRecoveryOfCars)(tU32 pEndFrameTime);
static tCheckRecoveryOfCars CheckRecoveryOfCars = (tCheckRecoveryOfCars)0x4a1ec9;
typedef void(__cdecl* tLoseSomePSPowerups)(int pNumber);
static tLoseSomePSPowerups LoseSomePSPowerups = (tLoseSomePSPowerups)0x4a39cc;
typedef void(__cdecl* tCheckOtherRacingKeys)();
static tCheckOtherRacingKeys CheckOtherRacingKeys = (tCheckOtherRacingKeys)0x4a2af6;
typedef int(__cdecl* tCheckRecoverCost)();
static tCheckRecoverCost CheckRecoverCost = (tCheckRecoverCost)0x4a2208;
typedef void(__cdecl* tSortOutRecover)(tCar_spec* pCar);
static tSortOutRecover SortOutRecover = (tSortOutRecover)0x4a3a33;
typedef void(__cdecl* tSetFlipUpCar)(tCar_spec* pCar);
static tSetFlipUpCar SetFlipUpCar = (tSetFlipUpCar)0x4a22f4;
typedef void(__cdecl* tFlipUpCar)(tCar_spec* car);
static tFlipUpCar FlipUpCar = (tFlipUpCar)0x4a234a;
typedef void(__cdecl* tGetPowerup)(int pNum);
static tGetPowerup GetPowerup = (tGetPowerup)0x4a291d;
typedef void(__cdecl* tCheckSystemKeys)(int pRacing);
static tCheckSystemKeys CheckSystemKeys = (tCheckSystemKeys)0x4a293f;
typedef void(__cdecl* tCheckKevKeys)();
static tCheckKevKeys CheckKevKeys = (tCheckKevKeys)0x4a3b39;
typedef void(__cdecl* tBrakeInstantly)();
static tBrakeInstantly BrakeInstantly = (tBrakeInstantly)0x4a4159;
typedef void(__cdecl* tPollCarControls)(tU32 pTime_difference);
static tPollCarControls PollCarControls = (tPollCarControls)0x4a3d80;
typedef void(__cdecl* tPollCameraControls)(tU32 pTime_difference);
static tPollCameraControls PollCameraControls = (tPollCameraControls)0x4a4214;
typedef void(__cdecl* tSetFlag2)(int i);
static tSetFlag2 SetFlag2 = (tSetFlag2)0x4a45e8;
typedef void(__cdecl* tToggleFlying)();
static tToggleFlying ToggleFlying = (tToggleFlying)0x4a460c;
typedef void(__cdecl* tToggleInvulnerability)();
static tToggleInvulnerability ToggleInvulnerability = (tToggleInvulnerability)0x4a46a8;
typedef void(__cdecl* tMoreTime)();
static tMoreTime MoreTime = (tMoreTime)0x4a4721;
typedef void(__cdecl* tMuchMoreTime)();
static tMuchMoreTime MuchMoreTime = (tMuchMoreTime)0x4a4736;
typedef void(__cdecl* tToggleTimerFreeze)();
static tToggleTimerFreeze ToggleTimerFreeze = (tToggleTimerFreeze)0x4a474e;
typedef void(__cdecl* tEarnDosh)();
static tEarnDosh EarnDosh = (tEarnDosh)0x4a47c7;
typedef void(__cdecl* tLoseDosh)();
static tLoseDosh LoseDosh = (tLoseDosh)0x4a47df;
typedef void(__cdecl* tToggleMap)();
static tToggleMap ToggleMap = (tToggleMap)0x4a47f7;
typedef void(__cdecl* tToggleArrow)();
static tToggleArrow ToggleArrow = (tToggleArrow)0x4a4947;
typedef void(__cdecl* tResetRecoveryVouchers)();
static tResetRecoveryVouchers ResetRecoveryVouchers = (tResetRecoveryVouchers)0x4a4a4c;
typedef void(__cdecl* tCycleCarTexturingLevel)();
static tCycleCarTexturingLevel CycleCarTexturingLevel = (tCycleCarTexturingLevel)0x4a4a61;
typedef void(__cdecl* tCycleWallTexturingLevel)();
static tCycleWallTexturingLevel CycleWallTexturingLevel = (tCycleWallTexturingLevel)0x4a4b28;
typedef void(__cdecl* tCycleRoadTexturingLevel)();
static tCycleRoadTexturingLevel CycleRoadTexturingLevel = (tCycleRoadTexturingLevel)0x4a4bfb;
typedef void(__cdecl* tCycleYonFactor)();
static tCycleYonFactor CycleYonFactor = (tCycleYonFactor)0x4a4ca1;
typedef void(__cdecl* tCycleSoundDetailLevel)();
static tCycleSoundDetailLevel CycleSoundDetailLevel = (tCycleSoundDetailLevel)0x4a4df3;
typedef void(__cdecl* tCycleCarSimplificationLevel)();
static tCycleCarSimplificationLevel CycleCarSimplificationLevel = (tCycleCarSimplificationLevel)0x4a4ec8;
typedef void(__cdecl* tToggleAccessoryRendering)();
static tToggleAccessoryRendering ToggleAccessoryRendering = (tToggleAccessoryRendering)0x4a4f58;
typedef void(__cdecl* tToggleSmoke)();
static tToggleSmoke ToggleSmoke = (tToggleSmoke)0x4a500d;
typedef void(__cdecl* tEnterUserMessage)();
static tEnterUserMessage EnterUserMessage = (tEnterUserMessage)0x4a50cf;
typedef void(__cdecl* tDisplayUserMessage)();
static tDisplayUserMessage DisplayUserMessage = (tDisplayUserMessage)0x4a54a9;
HOOK_VARIABLE_IMPLEMENT(int, gNasty_kludgey_cockpit_variable, 0x514afc);
HOOK_VARIABLE_IMPLEMENT(tInfo_mode, gInfo_mode, 0x514b00);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_tick_count, 0x514b04);
HOOK_VARIABLE_IMPLEMENT(tU32, gActual_last_tick_count, 0x514b08);
HOOK_VARIABLE_IMPLEMENT(tU32, gAverage_frame_period, 0x514b0c);
HOOK_VARIABLE_IMPLEMENT(tU32, gOld_camera_time, 0x53a1a8);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_wasted_massage_start, 0x53a118);
HOOK_VARIABLE_IMPLEMENT(float, gMr_odo, 0x53a114);
HOOK_VARIABLE_IMPLEMENT(tU32, gWasted_last_flash, 0x53a0e8);
HOOK_VARIABLE_IMPLEMENT(tTime_bonus_state, gTime_bonus_state, 0x53a120);
HOOK_VARIABLE_IMPLEMENT(int, gQueued_wasted_massages_count, 0x53a104);
HOOK_VARIABLE_IMPLEMENT(int, gTime_bonus, 0x53a11c);
HOOK_VARIABLE_IMPLEMENT(int, gRace_bonus_headup, 0x53a1a4);
HOOK_VARIABLE_IMPLEMENT(int, gWasted_flash_state, 0x53a10c);
HOOK_VARIABLE_IMPLEMENT(int, gLast_time_headup, 0x53a110);
HOOK_VARIABLE_IMPLEMENT(int, gTime_bonus_headup, 0x53a1a0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gQueued_wasted_massages, 5, 0x53a0f0);
HOOK_VARIABLE_IMPLEMENT(tU32, gTime_bonus_start, 0x53a124);
typedef void(__cdecl* tToggleInfo)();
static tToggleInfo ToggleInfo = (tToggleInfo)0x46fd00;
typedef void(__cdecl* tCalculateFrameRate)();
static tCalculateFrameRate CalculateFrameRate = (tCalculateFrameRate)0x4706fa;
typedef void(__cdecl* tLoseOldestWastedMassage)();
static tLoseOldestWastedMassage LoseOldestWastedMassage = (tLoseOldestWastedMassage)0x46fde6;
typedef void(__cdecl* tMungeHeadups)();
static tMungeHeadups MungeHeadups = (tMungeHeadups)0x4707bd;
typedef void(__cdecl* tUpdateFramePeriod)(tU32* pCamera_period);
static tUpdateFramePeriod UpdateFramePeriod = (tUpdateFramePeriod)0x4712bd;
typedef void(__cdecl* tCheckTimer)();
static tCheckTimer CheckTimer = (tCheckTimer)0x471543;
typedef int(__cdecl* tMungeRaceFinished)();
static tMungeRaceFinished MungeRaceFinished = (tMungeRaceFinished)0x471607;
typedef tRace_result(__cdecl* tMainGameLoop)();
static tMainGameLoop MainGameLoop = (tMainGameLoop)0x46fe77;
typedef tRace_result(__cdecl* tDoRace)();
static tDoRace DoRace = (tDoRace)0x46fe4f;
typedef void(__cdecl* tStartMainMenu)();
static tStartMainMenu StartMainMenu = (tStartMainMenu)0x44b018;
typedef tMM_result(__cdecl* tDoMainMenu)(tU32 pTime_out, int pSave_allowed, int pContinue_allowed);
static tDoMainMenu DoMainMenu = (tDoMainMenu)0x44b51b;
typedef void(__cdecl* tDoMainMenuScreen)(tU32 pTime_out, int pSave_allowed, int pContinue_allowed);
static tDoMainMenuScreen DoMainMenuScreen = (tDoMainMenuScreen)0x44b3c3;
HOOK_VARIABLE_IMPLEMENT(int, gTyping, 0x5212f0);
HOOK_VARIABLE_IMPLEMENT(int, gArrow_mode, 0x5212f4);
HOOK_VARIABLE_IMPLEMENT(int, gInfo_on, 0x5212f8);
HOOK_VARIABLE_IMPLEMENT(int, gHost_abandon_game, 0x5212fc);
HOOK_VARIABLE_IMPLEMENT(int, gRecover_car, 0x521300);
HOOK_VARIABLE_IMPLEMENT(int, gDisallow_abandon_race, 0x521304);
HOOK_VARIABLE_IMPLEMENT(int, gAction_replay_mode, 0x521314);
HOOK_VARIABLE_IMPLEMENT(int, gDefault_engine_noise_index, 0x521318);
HOOK_VARIABLE_IMPLEMENT(int, gAusterity_mode, 0x52131c);
HOOK_VARIABLE_IMPLEMENT(int, gAustere_override, 0x521324);
HOOK_VARIABLE_IMPLEMENT(int, gSound_override, 0x521328);
HOOK_VARIABLE_IMPLEMENT(int, gInterface_within_race_mode, 0x521330);
HOOK_VARIABLE_IMPLEMENT(int, gCD_is_in_drive, 0x52133c);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gRearview_screen, 0x521340);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCut_delay_1, 0x521344);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCut_delay_2, 0x521348);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCut_delay_3, 0x52134c);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCut_delay_4, 0x521350);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gYon_multiplier, 0x521354);
HOOK_VARIABLE_IMPLEMENT(tSave_game*, gPre_race_saved_game, 0x521358);
HOOK_VARIABLE_IMPLEMENT(tU32, gI_am_cheating, 0x52136c);
HOOK_VARIABLE_IMPLEMENT(br_matrix34, gRearview_camera_to_world, 0x545440);
HOOK_VARIABLE_IMPLEMENT(tSpecial_volume, gDefault_default_water_spec_vol, 0x549eb0);
HOOK_VARIABLE_IMPLEMENT(br_matrix34, gCamera_to_world, 0x545400);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tRace_list_spec, gRace_list, 100, 0x5454d0);
HOOK_VARIABLE_IMPLEMENT(tPath_name, gApplication_path, 0x546820);
HOOK_VARIABLE_IMPLEMENT(float, gPinball_factor, 0x54a068);
HOOK_VARIABLE_IMPLEMENT(float, gOpponent_speed_factor, 0x54a064);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_min_fold, 0x54b250);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gNet_recovery_cost, 7, 0x549fc0);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_softness, 0x545474);
HOOK_VARIABLE_IMPLEMENT(br_vector3*, gOur_pos, 0x54b248);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_max_fold, 0x545368);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gNet_softness, 7, 0x545380);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_limit_deviant, 0x54b270);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gNet_offensive, 7, 0x5452e0);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_split_chance, 0x545470);
HOOK_VARIABLE_IMPLEMENT(float, gGravity_multiplier, 0x54532c);
HOOK_VARIABLE_IMPLEMENT(float, gCar_crush_wibble, 0x545364);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gRepair_cost, 3, 0x549fe0);
HOOK_VARIABLE_IMPLEMENT(float, gCop_speed_factor, 0x5454c0);
HOOK_VARIABLE_IMPLEMENT(float, gDefault_gravity, 0x54535c);
HOOK_VARIABLE_IMPLEMENT(tU32, gKeys_pressed, 0x545334);
HOOK_VARIABLE_IMPLEMENT(tSpecial_volume*, gDefault_water_spec_vol, 0x54a054);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gNet_repair_cost, 7, 0x549f60);
HOOK_VARIABLE_IMPLEMENT(br_font*, gFont_7, 0x54537c);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_replay_frame_time, 0x54a00c);
HOOK_VARIABLE_IMPLEMENT(tU32, gTag_start_time, 0x5453f8);
HOOK_VARIABLE_IMPLEMENT(tOpponent*, gOpponents, 0x54b254);
HOOK_VARIABLE_IMPLEMENT(tBrender_storage, gTheir_cars_storage_space, 0x549f80);
HOOK_VARIABLE_IMPLEMENT(br_font*, gHeadup_font, 0x5452fc);
HOOK_VARIABLE_IMPLEMENT(tU32, gRace_finished, 0x5454b8);
HOOK_VARIABLE_IMPLEMENT(tProgram_state, gProgram_state, 0x546930);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU32, gCredit_period_single, 3, 0x545370);
HOOK_VARIABLE_IMPLEMENT(tU32, gRace_start, 0x54b240);
HOOK_VARIABLE_IMPLEMENT(tBrender_storage, gTrack_storage_space, 0x5453c0);
HOOK_VARIABLE_IMPLEMENT(tU32, gFrame_period, 0x5453b0);
HOOK_VARIABLE_IMPLEMENT(tU32, gCredit_period, 0x5467ac);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tU32, gCredit_period_network, 7, 0x545300);
HOOK_VARIABLE_IMPLEMENT(tBrender_storage, gOur_car_storage_space, 0x5467c0);
HOOK_VARIABLE_IMPLEMENT(tU32, gFox_start_time, 0x54531c);
HOOK_VARIABLE_IMPLEMENT(tBrender_storage, gPedestrians_storage_space, 0x545480);
HOOK_VARIABLE_IMPLEMENT(tRace_info, gCurrent_race, 0x54a0a0);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gSelf, 0x54b26c);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gDont_render_actor, 0x549fb4);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gScreen, 0x5453ac);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gRender_screen, 0x54a06c);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gRearview_camera, 0x5467b4);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gBack_screen, 0x545340);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCamera_angle, 0x545338);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gRender_shade_table, 0x5454b4);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gCamera_yon, 0x54a060);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gCamera, 0x54533c);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gArrow_actor, 0x545360);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gDepth_buffer, 0x545324);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gInitial_net_credits, 5, 0x54a080);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gCar_cred_value, 3, 0x5467a0);
HOOK_VARIABLE_IMPLEMENT(int, gNo_races_yet, 0x545430);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gJump_start_fine, 3, 0x5453a0);
HOOK_VARIABLE_IMPLEMENT(int, gReal_graf_data_index, 0x5454bc);
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gCar_time_value, 3, 0x549ff0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gCunning_stunt_bonus, 3, 0x54b260);
HOOK_VARIABLE_IMPLEMENT(int, gKnobbled_frame_period, 0x54b258);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gNon_track_actor, 0x54b24c);
HOOK_VARIABLE_IMPLEMENT(int, gWait_for_it, 0x546790);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gCheck_point_cash, 3, 0x54a070);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gPoints_per_second, 3, 0x54a010);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gUniverse_actor, 0x5453fc);
HOOK_VARIABLE_IMPLEMENT(br_actor*, gTrack_actor, 0x546920);
HOOK_VARIABLE_IMPLEMENT(int, gMap_mode, 0x5467f4);
HOOK_VARIABLE_IMPLEMENT(int, gAbandon_game, 0x545328);
HOOK_VARIABLE_IMPLEMENT(int, gLap, 0x5467b8);
HOOK_VARIABLE_IMPLEMENT(int, gShow_opponents, 0x54b274);
HOOK_VARIABLE_IMPLEMENT(int, gTotal_laps, 0x54680c);
HOOK_VARIABLE_IMPLEMENT(int, gFree_repairs, 0x546794);
HOOK_VARIABLE_IMPLEMENT(int, gFreeze_timer, 0x546924);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gRoll_over_creds, 3, 0x549ea0);
HOOK_VARIABLE_IMPLEMENT(int, gShow_peds_on_map, 0x545320);
HOOK_VARIABLE_IMPLEMENT(int, gOn_drugs, 0x5453f4);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gWasted_time, 3, 0x54b280);
HOOK_VARIABLE_IMPLEMENT(int, gCheckpoint, 0x54a008);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gRoll_over_time, 3, 0x546800);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gWasted_creds, 3, 0x545350);
HOOK_VARIABLE_IMPLEMENT(int, gTimer, 0x54a004);
HOOK_VARIABLE_IMPLEMENT(int, gCheckpoint_count, 0x549fb8);
HOOK_VARIABLE_IMPLEMENT(int, gCountdown, 0x54a05c);
HOOK_VARIABLE_IMPLEMENT(int, gFrame_rate, 0x549ffc);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_racers, 0x545330);
HOOK_VARIABLE_IMPLEMENT(int, gSound_enabled, 0x54a09c);
HOOK_VARIABLE_IMPLEMENT(int, gGraf_spec_index, 0x54a098);
HOOK_VARIABLE_IMPLEMENT(int, gSound_available, 0x54a000);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_races, 0x545434);
HOOK_VARIABLE_IMPLEMENT_ARRAY(char, gDir_separator, 3, 0x549eac);
typedef void(__cdecl* tInstallDRFileCalls)();
static tInstallDRFileCalls InstallDRFileCalls = (tInstallDRFileCalls)0x44d009;
HOOK_VARIABLE_IMPLEMENT(int, gEdge_trigger_mode, 0x514c70);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_poll_keys, 0x514c74);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gGo_ahead_keys, 3, 0x514c80);
HOOK_VARIABLE_IMPLEMENT(tJoy_array, gJoy_array, 0x5507c0);
HOOK_VARIABLE_IMPLEMENT(tKey_array, gKey_array, 0x53a250);
HOOK_VARIABLE_IMPLEMENT(int, gKey_poll_counter, 0x53a248);
HOOK_VARIABLE_IMPLEMENT(int, gCurrent_position, 0x53a4c0);
HOOK_VARIABLE_IMPLEMENT(int, gVisible_length, 0x53a240);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_key_down_time, 0x53a444);
HOOK_VARIABLE_IMPLEMENT(int, gThe_length, 0x53a1f4);
HOOK_VARIABLE_IMPLEMENT(int, gLast_key_down, 0x53a244);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gKey_mapping, 67, 0x5507e0);
HOOK_VARIABLE_IMPLEMENT_ARRAY(char, gCurrent_typing, 110, 0x53a450);
typedef void(__cdecl* tSetJoystickArrays)(int* pKeys, int pMark);
static tSetJoystickArrays SetJoystickArrays = (tSetJoystickArrays)0x471750;
typedef void(__cdecl* tPollKeys)();
static tPollKeys PollKeys = (tPollKeys)0x471bbf;
typedef void(__cdecl* tCyclePollKeys)();
static tCyclePollKeys CyclePollKeys = (tCyclePollKeys)0x471c03;
typedef void(__cdecl* tResetPollKeys)();
static tResetPollKeys ResetPollKeys = (tResetPollKeys)0x471c75;
typedef void(__cdecl* tCheckKeysForMouldiness)();
static tCheckKeysForMouldiness CheckKeysForMouldiness = (tCheckKeysForMouldiness)0x471cdb;
typedef int(__cdecl* tEitherMouseButtonDown)();
static tEitherMouseButtonDown EitherMouseButtonDown = (tEitherMouseButtonDown)0x471d0b;
typedef tKey_down_result(__cdecl* tPDKeyDown2)(int pKey_index);
static tPDKeyDown2 PDKeyDown2 = (tPDKeyDown2)0x471d4e;
typedef int(__cdecl* tPDKeyDown)(int pKey_index);
static tPDKeyDown PDKeyDown = (tPDKeyDown)0x471e2d;
typedef int(__cdecl* tPDAnyKeyDown)();
static tPDAnyKeyDown PDAnyKeyDown = (tPDAnyKeyDown)0x471f08;
typedef int(__cdecl* tAnyKeyDown)();
static tAnyKeyDown AnyKeyDown = (tAnyKeyDown)0x471fe4;
typedef tU32* (__cdecl* tKevKeyService)();
static tKevKeyService KevKeyService = (tKevKeyService)0x47202c;
typedef int(__cdecl* tKeyIsDown)(int pKey_index);
static tKeyIsDown KeyIsDown = (tKeyIsDown)0x472293;
typedef void(__cdecl* tWaitForNoKeys)();
static tWaitForNoKeys WaitForNoKeys = (tWaitForNoKeys)0x47232b;
typedef void(__cdecl* tGetMousePosition)(int* pX_coord, int* pY_coord);
static tGetMousePosition GetMousePosition = (tGetMousePosition)0x4723e4;
typedef void(__cdecl* tEndRollingLetters)();
static tEndRollingLetters EndRollingLetters = (tEndRollingLetters)0x472543;
typedef void(__cdecl* tRollLettersIn)();
static tRollLettersIn RollLettersIn = (tRollLettersIn)0x472766;
typedef void(__cdecl* tSetRollingCursor)(int pSlot_index);
static tSetRollingCursor SetRollingCursor = (tSetRollingCursor)0x472ea8;
typedef void(__cdecl* tDoRLTypeLetter)(int pChar, int pSlot_index);
static tDoRLTypeLetter DoRLTypeLetter = (tDoRLTypeLetter)0x4732a2;
typedef void(__cdecl* tStartTyping)(int pSlot_index, char* pText, int pVisible_length);
static tStartTyping StartTyping = (tStartTyping)0x472e42;
typedef void(__cdecl* tTypeKey)(int pSlot_index, char pKey);
static tTypeKey TypeKey = (tTypeKey)0x472ecc;
typedef void(__cdecl* tKillCursor)(int pSlot_index);
static tKillCursor KillCursor = (tKillCursor)0x4734aa;
HOOK_VARIABLE_IMPLEMENT(br_scalar, gYon_factor, 0x520038);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_material*, gMaterial, 2, 0x530c80);
typedef void(__cdecl* tQuitGame)();
static tQuitGame QuitGame = (tQuitGame)0x4a9ea0;
typedef void(__cdecl* tServiceTheGame)(int pRacing);
static tServiceTheGame ServiceTheGame = (tServiceTheGame)0x4a9f29;
typedef void(__cdecl* tServiceGame)();
static tServiceGame ServiceGame = (tServiceGame)0x4a9fe4;
typedef void(__cdecl* tServiceGameInRace)();
static tServiceGameInRace ServiceGameInRace = (tServiceGameInRace)0x4a9ff9;
typedef void(__cdecl* tGameMain)(int pArgc, char** pArgv);
static tGameMain GameMain = (tGameMain)0x4aa013;
HOOK_VARIABLE_IMPLEMENT(int, gSound_detail_level, 0x514928);
HOOK_VARIABLE_IMPLEMENT(int, gOld_sound_detail_level, 0x514930);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gRandom_CDA_tunes, 7, 0x514958);
HOOK_VARIABLE_IMPLEMENT(int, gCDA_is_playing, 0x514978);
HOOK_VARIABLE_IMPLEMENT(int, gServicing_sound, 0x51497c);
HOOK_VARIABLE_IMPLEMENT(int, gSound_sources_inited, 0x514984);
HOOK_VARIABLE_IMPLEMENT(int, gMusic_available, 0x514988);
HOOK_VARIABLE_IMPLEMENT(tS3_sound_tag, gCDA_tag, 0x51498c);
HOOK_VARIABLE_IMPLEMENT(int, gCD_fully_installed, 0x514990);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gEffects_outlet, 0x514994);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gCar_outlet, 0x514998);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gEngine_outlet, 0x51499c);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gDriver_outlet, 0x5149a0);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gPedestrians_outlet, 0x5149a4);
HOOK_VARIABLE_IMPLEMENT(tS3_outlet_ptr, gMusic_outlet, 0x5149a8);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tS3_outlet_ptr, gIndexed_outlets, 6, 0x550a20);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_sound_service, 0x538284);
HOOK_VARIABLE_IMPLEMENT(int, gCD_is_disabled, 0x550a1c);
HOOK_VARIABLE_IMPLEMENT(br_vector3, gCamera_left, 0x550a00);
HOOK_VARIABLE_IMPLEMENT(br_vector3, gCamera_position, 0x550a10);
HOOK_VARIABLE_IMPLEMENT(br_vector3, gOld_camera_position, 0x550a40);
HOOK_VARIABLE_IMPLEMENT(br_vector3, gCamera_velocity, 0x550a50);
typedef void(__cdecl* tUsePathFileToDetermineIfFullInstallation)();
static tUsePathFileToDetermineIfFullInstallation UsePathFileToDetermineIfFullInstallation = (tUsePathFileToDetermineIfFullInstallation)0x463fb0;
typedef void(__cdecl* tInitSound)();
static tInitSound InitSound = (tInitSound)0x464117;
typedef tS3_sound_tag(__cdecl* tDRS3StartSound)(tS3_outlet_ptr pOutlet, tS3_sound_id pSound);
static tDRS3StartSound DRS3StartSound = (tDRS3StartSound)0x46458b;
typedef tS3_sound_tag(__cdecl* tDRS3StartSoundNoPiping)(tS3_outlet_ptr pOutlet, tS3_sound_id pSound);
static tDRS3StartSoundNoPiping DRS3StartSoundNoPiping = (tDRS3StartSoundNoPiping)0x46461d;
typedef tS3_sound_tag(__cdecl* tDRS3StartSound2)(tS3_outlet_ptr pOutlet, tS3_sound_id pSound, tS3_repeats pRepeats, tS3_volume pLVolume, tS3_volume pRVolume, tS3_pitch pPitch, tS3_speed pSpeed);
static tDRS3StartSound2 DRS3StartSound2 = (tDRS3StartSound2)0x464656;
typedef int(__cdecl* tDRS3ChangeVolume)(tS3_sound_tag pSound_tag, tS3_volume pNew_volume);
static tDRS3ChangeVolume DRS3ChangeVolume = (tDRS3ChangeVolume)0x464724;
typedef int(__cdecl* tDRS3StopSound)(tS3_sound_tag pSound_tag);
static tDRS3StopSound DRS3StopSound = (tDRS3StopSound)0x464845;
typedef int(__cdecl* tDRS3ReleaseSound)(tS3_sound_id pThe_sound);
static tDRS3ReleaseSound DRS3ReleaseSound = (tDRS3ReleaseSound)0x4648af;
typedef void(__cdecl* tDRS3Service)();
static tDRS3Service DRS3Service = (tDRS3Service)0x4648e4;
typedef int(__cdecl* tDRS3SoundStillPlaying)(tS3_sound_tag pSound_tag);
static tDRS3SoundStillPlaying DRS3SoundStillPlaying = (tDRS3SoundStillPlaying)0x46496f;
typedef void(__cdecl* tDRS3ShutDown)();
static tDRS3ShutDown DRS3ShutDown = (tDRS3ShutDown)0x4649a4;
typedef int(__cdecl* tDRS3SetOutletVolume)(tS3_outlet_ptr pOutlet, tS3_volume pVolume);
static tDRS3SetOutletVolume DRS3SetOutletVolume = (tDRS3SetOutletVolume)0x4649cb;
typedef int(__cdecl* tDRS3StopOutletSound)(tS3_outlet_ptr pOutlet);
static tDRS3StopOutletSound DRS3StopOutletSound = (tDRS3StopOutletSound)0x464a39;
typedef int(__cdecl* tDRS3StopAllOutletSounds)();
static tDRS3StopAllOutletSounds DRS3StopAllOutletSounds = (tDRS3StopAllOutletSounds)0x464a6e;
typedef void(__cdecl* tToggleSoundEnable)();
static tToggleSoundEnable ToggleSoundEnable = (tToggleSoundEnable)0x464a9c;
typedef void(__cdecl* tSoundService)();
static tSoundService SoundService = (tSoundService)0x464adc;
typedef void(__cdecl* tInitSoundSources)();
static tInitSoundSources InitSoundSources = (tInitSoundSources)0x464b51;
typedef void(__cdecl* tDisposeSoundSources)();
static tDisposeSoundSources DisposeSoundSources = (tDisposeSoundSources)0x464d79;
typedef tS3_sound_tag(__cdecl* tDRS3StartSound3D)(tS3_outlet_ptr pOutlet, tS3_sound_id pSound, br_vector3* pInitial_position, br_vector3* pInitial_velocity, tS3_repeats pRepeats, tS3_volume pVolume, tS3_pitch pPitch, tS3_speed pSpeed);
static tDRS3StartSound3D DRS3StartSound3D = (tDRS3StartSound3D)0x464f39;
typedef void(__cdecl* tMungeEngineNoise)();
static tMungeEngineNoise MungeEngineNoise = (tMungeEngineNoise)0x465090;
typedef void(__cdecl* tSetSoundVolumes)();
static tSetSoundVolumes SetSoundVolumes = (tSetSoundVolumes)0x4655d8;
typedef int(__cdecl* tGetIndexFromOutlet)(tS3_outlet_ptr pOutlet);
static tGetIndexFromOutlet GetIndexFromOutlet = (tGetIndexFromOutlet)0x4656cb;
typedef int(__cdecl* tDRS3StartCDA)(tS3_sound_id pCDA_id);
static tDRS3StartCDA DRS3StartCDA = (tDRS3StartCDA)0x465719;
typedef int(__cdecl* tDRS3StopCDA)();
static tDRS3StopCDA DRS3StopCDA = (tDRS3StopCDA)0x465848;
typedef void(__cdecl* tStartMusic)();
static tStartMusic StartMusic = (tStartMusic)0x465899;
typedef void(__cdecl* tStopMusic)();
static tStopMusic StopMusic = (tStopMusic)0x4658c3;
HOOK_VARIABLE_IMPLEMENT(int, gInitialised_grid, 0x551d7c);
HOOK_VARIABLE_IMPLEMENT(int, gIt_or_fox, 0x551d80);
typedef void(__cdecl* tSendCarData)(tU32 pNext_frame_time);
static tSendCarData SendCarData = (tSendCarData)0x42f2d0;
typedef void(__cdecl* tReceivedNonCar)(tNet_contents* pContents);
static tReceivedNonCar ReceivedNonCar = (tReceivedNonCar)0x43058d;
typedef void(__cdecl* tDisableCar)(tCar_spec* pCar);
static tDisableCar DisableCar = (tDisableCar)0x431094;
typedef void(__cdecl* tEnableCar)(tCar_spec* pCar);
static tEnableCar EnableCar = (tEnableCar)0x431165;
typedef void(__cdecl* tDoNetworkHeadups)(int pCredits);
static tDoNetworkHeadups DoNetworkHeadups = (tDoNetworkHeadups)0x431236;
typedef void(__cdecl* tDoNetScores)();
static tDoNetScores DoNetScores = (tDoNetScores)0x4321a5;
typedef void(__cdecl* tCarInContactWithItOrFox)(tNet_game_player_info* pPlayer);
static tCarInContactWithItOrFox CarInContactWithItOrFox = (tCarInContactWithItOrFox)0x4327a5;
typedef void(__cdecl* tDoNetGameManagement)();
static tDoNetGameManagement DoNetGameManagement = (tDoNetGameManagement)0x432843;
typedef void(__cdecl* tInitialisePlayerScore)(tNet_game_player_info* pPlayer);
static tInitialisePlayerScore InitialisePlayerScore = (tInitialisePlayerScore)0x43385c;
typedef void(__cdecl* tInitPlayers)();
static tInitPlayers InitPlayers = (tInitPlayers)0x433937;
typedef void(__cdecl* tReceivedGameplay)(tNet_contents* pContents, tNet_message* pMessage, tU32 pReceive_time);
static tReceivedGameplay ReceivedGameplay = (tReceivedGameplay)0x433eac;
typedef void(__cdecl* tSendGameplayToAllPlayers)(tNet_gameplay_mess pMess, int pParam_1, int pParam_2, int pParam_3, int pParam_4);
static tSendGameplayToAllPlayers SendGameplayToAllPlayers = (tSendGameplayToAllPlayers)0x4341db;
typedef void(__cdecl* tSendGameplayToHost)(tNet_gameplay_mess pMess, int pParam_1, int pParam_2, int pParam_3, int pParam_4);
static tSendGameplayToHost SendGameplayToHost = (tSendGameplayToHost)0x434239;
typedef void(__cdecl* tDefaultNetName)();
static tDefaultNetName DefaultNetName = (tDefaultNetName)0x4342cc;
typedef void(__cdecl* tNetSendPointCrush)(tCar_spec* pCar, tU16 pCrush_point_index, br_vector3* pEnergy_vector);
static tNetSendPointCrush NetSendPointCrush = (tNetSendPointCrush)0x4342e6;
typedef void(__cdecl* tGetExpandedMatrix)(br_matrix34* m1, tReduced_matrix* m2);
static tGetExpandedMatrix GetExpandedMatrix = (tGetExpandedMatrix)0x4344f4;
typedef void(__cdecl* tNetEarnCredits)(tNet_game_player_info* pPlayer, tS32 pCredits);
static tNetEarnCredits NetEarnCredits = (tNetEarnCredits)0x4345c7;
HOOK_VARIABLE_IMPLEMENT(int, gLast_fancy_index, 0x521678);
HOOK_VARIABLE_IMPLEMENT(int, gLast_time_credit_headup, 0x521680);
HOOK_VARIABLE_IMPLEMENT(tDR_font*, gCached_font, 0x521684);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_font*, gBR_fonts, 4, 0x541598);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tQueued_headup, gQueued_headups, 4, 0x541160);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gOld_times, 10, 0x544e30);
HOOK_VARIABLE_IMPLEMENT(int, gLast_fancy_headup, 0x541590);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_time_earn_time, 0x541594);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_centre_headup, 0x5415a8);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_fancy_time, 0x5415ac);
HOOK_VARIABLE_IMPLEMENT(int, gQueued_headup_count, 0x541158);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_earn_time, 0x54114c);
HOOK_VARIABLE_IMPLEMENT(tU32, gLast_time_credit_amount, 0x541154);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tHeadup, gHeadups, 15, 0x53fdd8);
HOOK_VARIABLE_IMPLEMENT(int, gLaps_headup, 0x544e60);
HOOK_VARIABLE_IMPLEMENT(int, gCar_kill_count_headup, 0x544e68);
HOOK_VARIABLE_IMPLEMENT(int, gTimer_headup, 0x544e5c);
HOOK_VARIABLE_IMPLEMENT(int, gTime_awarded_headup, 0x544e6c);
HOOK_VARIABLE_IMPLEMENT(int, gPed_kill_count_headup, 0x544e64);
HOOK_VARIABLE_IMPLEMENT_ARRAY(br_pixelmap*, gHeadup_images, 32, 0x544e70);
HOOK_VARIABLE_IMPLEMENT(int, gNet_cash_headup, 0x544e58);
HOOK_VARIABLE_IMPLEMENT(int, gNet_ped_headup, 0x544e1c);
HOOK_VARIABLE_IMPLEMENT(int, gCredits_won_headup, 0x544e20);
typedef void(__cdecl* tGetTimerString)(char* pStr, int pFudge_colon);
static tGetTimerString GetTimerString = (tGetTimerString)0x4c4030;
typedef void(__cdecl* tInitHeadups)();
static tInitHeadups InitHeadups = (tInitHeadups)0x4c4053;
typedef void(__cdecl* tClearHeadup)(int pIndex);
static tClearHeadup ClearHeadup = (tClearHeadup)0x4c40c1;
typedef void(__cdecl* tClearHeadupSlot)(int pSlot_index);
static tClearHeadupSlot ClearHeadupSlot = (tClearHeadupSlot)0x4c40e6;
typedef void(__cdecl* tClearHeadups)();
static tClearHeadups ClearHeadups = (tClearHeadups)0x4c414c;
typedef void(__cdecl* tDRPixelmapText)(br_pixelmap* pPixelmap, int pX, int pY, tDR_font* pFont, char* pText, int pRight_edge);
static tDRPixelmapText DRPixelmapText = (tDRPixelmapText)0x4c4256;
typedef void(__cdecl* tDRPixelmapCleverText2)(br_pixelmap* pPixelmap, int pX, int pY, tDR_font* pFont, signed char* pText, int pRight_edge);
static tDRPixelmapCleverText2 DRPixelmapCleverText2 = (tDRPixelmapCleverText2)0x4c43cf;
typedef void(__cdecl* tDimRectangle)(br_pixelmap* pPixelmap, int pLeft, int pTop, int pRight, int pBottom, int pKnock_out_corners);
static tDimRectangle DimRectangle = (tDimRectangle)0x4c4604;
typedef void(__cdecl* tDimAFewBits)();
static tDimAFewBits DimAFewBits = (tDimAFewBits)0x4c479c;
typedef void(__cdecl* tKillOldestQueuedHeadup)();
static tKillOldestQueuedHeadup KillOldestQueuedHeadup = (tKillOldestQueuedHeadup)0x4c524c;
typedef void(__cdecl* tDoPSPowerupHeadups)();
static tDoPSPowerupHeadups DoPSPowerupHeadups = (tDoPSPowerupHeadups)0x4c5288;
typedef void(__cdecl* tDoHeadups)(tU32 pThe_time);
static tDoHeadups DoHeadups = (tDoHeadups)0x4c4906;
typedef int(__cdecl* tFindAHeadupHoleWoofBarkSoundsABitRude)(int pSlot_index);
static tFindAHeadupHoleWoofBarkSoundsABitRude FindAHeadupHoleWoofBarkSoundsABitRude = (tFindAHeadupHoleWoofBarkSoundsABitRude)0x4c5493;
typedef int(__cdecl* tDRTextWidth)(tDR_font* pFont, char* pText);
static tDRTextWidth DRTextWidth = (tDRTextWidth)0x4c5514;
typedef int(__cdecl* tMungeHeadupWidth)(tHeadup* pHeadup);
static tMungeHeadupWidth MungeHeadupWidth = (tMungeHeadupWidth)0x4c5981;
typedef int(__cdecl* tNewTextHeadupSlot2)(int pSlot_index, int pFlash_rate, int pLifetime, int pFont_index, char* pText, int pQueue_it);
static tNewTextHeadupSlot2 NewTextHeadupSlot2 = (tNewTextHeadupSlot2)0x4c56b1;
typedef int(__cdecl* tNewTextHeadupSlot)(int pSlot_index, int pFlash_rate, int pLifetime, int pFont_index, char* pText);
static tNewTextHeadupSlot NewTextHeadupSlot = (tNewTextHeadupSlot)0x4c5c1d;
typedef int(__cdecl* tNewImageHeadupSlot)(int pSlot_index, int pFlash_rate, int pLifetime, int pImage_index);
static tNewImageHeadupSlot NewImageHeadupSlot = (tNewImageHeadupSlot)0x4c5c4b;
typedef void(__cdecl* tDoFancyHeadup)(int pIndex);
static tDoFancyHeadup DoFancyHeadup = (tDoFancyHeadup)0x4c5e50;
typedef void(__cdecl* tAdjustHeadups)();
static tAdjustHeadups AdjustHeadups = (tAdjustHeadups)0x4c5f58;
typedef void(__cdecl* tChangeHeadupText)(int pHeadup_index, char* pNew_text);
static tChangeHeadupText ChangeHeadupText = (tChangeHeadupText)0x4c6169;
typedef void(__cdecl* tDoDamageScreen)(tU32 pThe_time);
static tDoDamageScreen DoDamageScreen = (tDoDamageScreen)0x4c62d8;
typedef void(__cdecl* tPoshDrawLine)(float pAngle, br_pixelmap* pDestn, int pX1, int pY1, int pX2, int pY2, int pColour);
static tPoshDrawLine PoshDrawLine = (tPoshDrawLine)0x4c70fd;
typedef void(__cdecl* tDoInstruments)(tU32 pThe_time);
static tDoInstruments DoInstruments = (tDoInstruments)0x4c6474;
typedef void(__cdecl* tChangingView)();
static tChangingView ChangingView = (tChangingView)0x4c7455;
typedef void(__cdecl* tEarnCredits2)(int pAmount, char* pPrefix_text);
static tEarnCredits2 EarnCredits2 = (tEarnCredits2)0x4c76d8;
typedef void(__cdecl* tEarnCredits)(int pAmount);
static tEarnCredits EarnCredits = (tEarnCredits)0x4c78a8;
typedef int(__cdecl* tSpendCredits)(int pAmount);
static tSpendCredits SpendCredits = (tSpendCredits)0x4c78c4;
typedef void(__cdecl* tAwardTime)(tU32 pTime);
static tAwardTime AwardTime = (tAwardTime)0x4c791e;
typedef void(__cdecl* tOoerrIveGotTextInMeBoxMissus)(int pFont_index, char* pText, br_pixelmap* pPixelmap, int pLeft, int pTop, int pRight, int pBottom, int pCentred);
static tOoerrIveGotTextInMeBoxMissus OoerrIveGotTextInMeBoxMissus = (tOoerrIveGotTextInMeBoxMissus)0x4c7b7f;
typedef void(__cdecl* tTransBrPixelmapText)(br_pixelmap* pPixelmap, int pX, int pY, br_uint_32 pColour, br_font* pFont, signed char* pText);
static tTransBrPixelmapText TransBrPixelmapText = (tTransBrPixelmapText)0x4c7ec5;
typedef void(__cdecl* tTransDRPixelmapText)(br_pixelmap* pPixelmap, int pX, int pY, tDR_font* pFont, char* pText, int pRight_edge);
static tTransDRPixelmapText TransDRPixelmapText = (tTransDRPixelmapText)0x4c7f08;
typedef void(__cdecl* tTransDRPixelmapCleverText)(br_pixelmap* pPixelmap, int pX, int pY, tDR_font* pFont, char* pText, int pRight_edge);
static tTransDRPixelmapCleverText TransDRPixelmapCleverText = (tTransDRPixelmapCleverText)0x4c7fd5;
HOOK_VARIABLE_IMPLEMENT_ARRAY(char*, gBoring_material_names, 2, 0x507030);
HOOK_VARIABLE_IMPLEMENT_ARRAY(char*, gMaterial_names, 2, 0x507038);
HOOK_VARIABLE_IMPLEMENT_ARRAY(tSkid, gSkids, 100, 0x530190);
typedef void(__cdecl* tStretchMark)(tSkid* pMark, br_vector3* pFrom, br_vector3* pTo, br_scalar pTexture_start);
static tStretchMark StretchMark = (tStretchMark)0x401e7c;
typedef br_material* (__cdecl* tMaterialFromIndex)(int pIndex);
static tMaterialFromIndex MaterialFromIndex = (tMaterialFromIndex)0x401088;
typedef int(__cdecl* tFarFromLine2D)(br_vector3* pPt, br_vector3* pL1, br_vector3* pL2);
static tFarFromLine2D FarFromLine2D = (tFarFromLine2D)0x4020dc;
typedef int(__cdecl* tReflex2D)(br_vector3* pPt, br_vector3* pL1, br_vector3* pL2);
static tReflex2D Reflex2D = (tReflex2D)0x402179;
typedef void(__cdecl* tInitSkids)();
static tInitSkids InitSkids = (tInitSkids)0x4010c8;
typedef void(__cdecl* tHideSkids)();
static tHideSkids HideSkids = (tHideSkids)0x4014ad;
typedef br_scalar(__cdecl* tSkidLen)(int pSkid);
static tSkidLen SkidLen = (tSkidLen)0x4021f1;
typedef void(__cdecl* tSkidSection)(tCar_spec* pCar, int pWheel_num, br_vector3* pPos, int pMaterial_index);
static tSkidSection SkidSection = (tSkidSection)0x401a22;
typedef void(__cdecl* tSkidMark)(tCar_spec* pCar, int pWheel_num);
static tSkidMark SkidMark = (tSkidMark)0x4014e5;
typedef void(__cdecl* tInitCarSkidStuff)(tCar_spec* pCar);
static tInitCarSkidStuff InitCarSkidStuff = (tInitCarSkidStuff)0x402282;
typedef void(__cdecl* tSkidsPerFrame)();
static tSkidsPerFrame SkidsPerFrame = (tSkidsPerFrame)0x4022f1;
typedef br_scalar(__cdecl* tCornerFudge)(tCar_spec* pCar_spec);
static tCornerFudge CornerFudge = (tCornerFudge)0x4a003e;
typedef br_scalar(__cdecl* tMaxCurvatureForCarSpeed)(tCar_spec* pCar, br_scalar pSpeed);
static tMaxCurvatureForCarSpeed MaxCurvatureForCarSpeed = (tMaxCurvatureForCarSpeed)0x4a0054;
typedef tFollow_path_result(__cdecl* tProcessFollowPath)(tOpponent_spec* pOpponent_spec, tProcess_objective_command pCommand, int pPursuit_mode, int pIgnore_end, int pNever_struggle);
static tProcessFollowPath ProcessFollowPath = (tProcessFollowPath)0x49e3a0;
typedef tFollow_path_result(__cdecl* tFollowCheatyPath)(tOpponent_spec* pOpponent_spec);
static tFollowCheatyPath FollowCheatyPath = (tFollowCheatyPath)0x4a00a4;
HOOK_VARIABLE_IMPLEMENT(int, gLast_demo, 0x512080);
typedef void(__cdecl* tDoDemo)();
static tDoDemo DoDemo = (tDoDemo)0x461110;
HOOK_VARIABLE_IMPLEMENT(int, gDoing_physics, 0x514cb0);
HOOK_VARIABLE_IMPLEMENT(br_scalar, gDt, 0x514cb4);
typedef void(__cdecl* tDamageUnit)(tCar_spec* pCar, int pUnit_type, int pDamage_amount);
static tDamageUnit DamageUnit = (tDamageUnit)0x4751c0;
typedef void(__cdecl* tSwitchCarActor)(tCar_spec* pCar_spec, int pModel_index);
static tSwitchCarActor SwitchCarActor = (tSwitchCarActor)0x4753cc;
typedef void(__cdecl* tInitialiseCar2)(tCar_spec* pCar, int pClear_disabled_flag);
static tInitialiseCar2 InitialiseCar2 = (tInitialiseCar2)0x47544b;
typedef void(__cdecl* tInitialiseCar)(tCar_spec* pCar);
static tInitialiseCar InitialiseCar = (tInitialiseCar)0x475b63;
typedef void(__cdecl* tInitialiseCarsEtc)(tRace_info* pThe_race);
static tInitialiseCarsEtc InitialiseCarsEtc = (tInitialiseCarsEtc)0x475b7c;
typedef void(__cdecl* tGetAverageGridPosition)(tRace_info* pThe_race);
static tGetAverageGridPosition GetAverageGridPosition = (tGetAverageGridPosition)0x475ca4;
typedef void(__cdecl* tSetInitialPosition)(tRace_info* pThe_race, int pCar_index, int pGrid_index);
static tSetInitialPosition SetInitialPosition = (tSetInitialPosition)0x475d7d;
typedef void(__cdecl* tSetInitialPositions)(tRace_info* pThe_race);
static tSetInitialPositions SetInitialPositions = (tSetInitialPositions)0x476279;
typedef void(__cdecl* tInitialiseNonCar)(tNon_car_spec* non_car);
static tInitialiseNonCar InitialiseNonCar = (tInitialiseNonCar)0x4762c1;
typedef void(__cdecl* tGetFacesInBox)(tCollision_info* c);
static tGetFacesInBox GetFacesInBox = (tGetFacesInBox)0x4764ca;
typedef int(__cdecl* tIsCarInTheSea)();
static tIsCarInTheSea IsCarInTheSea = (tIsCarInTheSea)0x476cf4;
typedef void(__cdecl* tRememberSafePosition)(tCar_spec* car, tU32 pTime);
static tRememberSafePosition RememberSafePosition = (tRememberSafePosition)0x4771a2;
typedef void(__cdecl* tControlOurCar)(tU32 pTime_difference);
static tControlOurCar ControlOurCar = (tControlOurCar)0x476d09;
typedef void(__cdecl* tCalcEngineForce)(tCar_spec* c, br_scalar dt);
static tCalcEngineForce CalcEngineForce = (tCalcEngineForce)0x477433;
typedef void(__cdecl* tPrepareCars)(tU32 pFrame_start_time);
static tPrepareCars PrepareCars = (tPrepareCars)0x477b11;
typedef void(__cdecl* tFinishCars)(tU32 pLast_frame_time, tU32 pTime);
static tFinishCars FinishCars = (tFinishCars)0x477d38;
typedef void(__cdecl* tInterpolateCars)(tU32 pLast_frame_time, tU32 pTime);
static tInterpolateCars InterpolateCars = (tInterpolateCars)0x478928;
typedef void(__cdecl* tResetOldmat)();
static tResetOldmat ResetOldmat = (tResetOldmat)0x478a88;
typedef void(__cdecl* tGetNonCars)();
static tGetNonCars GetNonCars = (tGetNonCars)0x478b58;
typedef void(__cdecl* tGetNetPos)(tCar_spec* pCar);
static tGetNetPos GetNetPos = (tGetNetPos)0x478bb7;
typedef void(__cdecl* tApplyPhysicsToCars)(tU32 last_frame_time, tU32 pTime_difference);
static tApplyPhysicsToCars ApplyPhysicsToCars = (tApplyPhysicsToCars)0x47839b;
typedef void(__cdecl* tMungeSpecialVolume)(tCollision_info* pCar);
static tMungeSpecialVolume MungeSpecialVolume = (tMungeSpecialVolume)0x4792d0;
typedef void(__cdecl* tResetCarSpecialVolume)(tCollision_info* pCar);
static tResetCarSpecialVolume ResetCarSpecialVolume = (tResetCarSpecialVolume)0x47901e;
typedef void(__cdecl* tTestAutoSpecialVolume)(tCollision_info* pCar);
static tTestAutoSpecialVolume TestAutoSpecialVolume = (tTestAutoSpecialVolume)0x4794d3;
typedef void(__cdecl* tMoveAndCollideCar)(tCar_spec* car, br_scalar dt);
static tMoveAndCollideCar MoveAndCollideCar = (tMoveAndCollideCar)0x4790fd;
typedef void(__cdecl* tMoveAndCollideNonCar)(tNon_car_spec* non_car, br_scalar dt);
static tMoveAndCollideNonCar MoveAndCollideNonCar = (tMoveAndCollideNonCar)0x479914;
typedef int(__cdecl* tCollideCarWithWall)(tCollision_info* car, br_scalar dt);
static tCollideCarWithWall CollideCarWithWall = (tCollideCarWithWall)0x479a2c;
typedef void(__cdecl* tToggleControls)();
static tToggleControls ToggleControls = (tToggleControls)0x479b7a;
typedef void(__cdecl* tControlCar2)(tCar_spec* c, br_scalar dt);
static tControlCar2 ControlCar2 = (tControlCar2)0x479c6d;
typedef void(__cdecl* tControlCar3)(tCar_spec* c, br_scalar dt);
static tControlCar3 ControlCar3 = (tControlCar3)0x479f4b;
typedef void(__cdecl* tControlCar4)(tCar_spec* c, br_scalar dt);
static tControlCar4 ControlCar4 = (tControlCar4)0x47a20e;
typedef void(__cdecl* tControlCar5)(tCar_spec* c, br_scalar dt);
static tControlCar5 ControlCar5 = (tControlCar5)0x47a7b1;
typedef void(__cdecl* tControlCar1)(tCar_spec* c, br_scalar dt);
static tControlCar1 ControlCar1 = (tControlCar1)0x47ac31;
typedef void(__cdecl* tRotateCarSecondOrder)(tCollision_info* c, br_scalar dt);
static tRotateCarSecondOrder RotateCarSecondOrder = (tRotateCarSecondOrder)0x47b434;
typedef void(__cdecl* tRotateCarFirstOrder)(tCollision_info* c, br_scalar dt);
static tRotateCarFirstOrder RotateCarFirstOrder = (tRotateCarFirstOrder)0x47b073;
typedef void(__cdecl* tSimpleRotate)(tCollision_info* c, br_scalar dt);
static tSimpleRotate SimpleRotate = (tSimpleRotate)0x47b23c;
typedef void(__cdecl* tRotateCar)(tCollision_info* c, br_scalar dt);
static tRotateCar RotateCar = (tRotateCar)0x47b2fd;
typedef void(__cdecl* tSteeringSelfCentre)(tCar_spec* c, br_scalar dt, br_vector3* n);
static tSteeringSelfCentre SteeringSelfCentre = (tSteeringSelfCentre)0x47ea86;
typedef void(__cdecl* tNonCarCalcForce)(tNon_car_spec* nc, br_scalar dt);
static tNonCarCalcForce NonCarCalcForce = (tNonCarCalcForce)0x47b68d;
typedef void(__cdecl* tAddDrag)(tCar_spec* c, br_scalar dt);
static tAddDrag AddDrag = (tAddDrag)0x47ec63;
typedef void(__cdecl* tDoBumpiness)(tCar_spec* c, br_vector3* wheel_pos, br_vector3* norm, br_scalar* d, int n);
static tDoBumpiness DoBumpiness = (tDoBumpiness)0x47ede9;
typedef void(__cdecl* tCalcForce)(tCar_spec* c, br_scalar dt);
static tCalcForce CalcForce = (tCalcForce)0x47ba5d;
typedef void(__cdecl* tDoRevs)(tCar_spec* c, br_scalar dt);
static tDoRevs DoRevs = (tDoRevs)0x47ef8e;
typedef void(__cdecl* tApplyTorque)(tCar_spec* c, br_vector3* tdt);
static tApplyTorque ApplyTorque = (tApplyTorque)0x47f4f2;
typedef void(__cdecl* tTranslateCar)(tCollision_info* c, br_scalar dt);
static tTranslateCar TranslateCar = (tTranslateCar)0x47f55f;
typedef int(__cdecl* tCollCheck)(tCollision_info* c, br_scalar dt);
static tCollCheck CollCheck = (tCollCheck)0x47f5d0;
typedef br_scalar(__cdecl* tAddFriction)(tCollision_info* c, br_vector3* vel, br_vector3* normal_force, br_vector3* pos, br_scalar total_force, br_vector3* max_friction);
static tAddFriction AddFriction = (tAddFriction)0x481cb9;
typedef void(__cdecl* tAddFrictionCarToCar)(tCollision_info* car1, tCollision_info* car2, br_vector3* vel1, br_vector3* vel2, br_vector3* normal_force1, br_vector3* pos1, br_vector3* pos2, br_scalar total_force, br_vector3* max_friction);
static tAddFrictionCarToCar AddFrictionCarToCar = (tAddFrictionCarToCar)0x49231c;
typedef void(__cdecl* tScrapeNoise)(br_scalar vel, br_vector3* position, int material);
static tScrapeNoise ScrapeNoise = (tScrapeNoise)0x482070;
typedef void(__cdecl* tSkidNoise)(tCar_spec* pC, int pWheel_num, br_scalar pV, int material);
static tSkidNoise SkidNoise = (tSkidNoise)0x48216d;
typedef void(__cdecl* tStopSkid)(tCar_spec* pC);
static tStopSkid StopSkid = (tStopSkid)0x482458;
typedef void(__cdecl* tCrashNoise)(br_vector3* pForce, br_vector3* position, int material);
static tCrashNoise CrashNoise = (tCrashNoise)0x48249d;
typedef void(__cdecl* tCrushAndDamageCar)(tCar_spec* c, br_vector3* pPosition, br_vector3* pForce_car_space, tCar_spec* car2);
static tCrushAndDamageCar CrushAndDamageCar = (tCrushAndDamageCar)0x4825a8;
typedef int(__cdecl* tExpandBoundingBox)(tCar_spec* c);
static tExpandBoundingBox ExpandBoundingBox = (tExpandBoundingBox)0x482c00;
typedef void(__cdecl* tCrushBoundingBox)(tCar_spec* c, int crush_only);
static tCrushBoundingBox CrushBoundingBox = (tCrushBoundingBox)0x482dee;
typedef void(__cdecl* tAddCollPoint)(br_scalar dist, br_vector3* p, br_vector3* norm, br_vector3* r, br_vector3* n, br_vector3* dir, int num, tCollision_info* c);
static tAddCollPoint AddCollPoint = (tAddCollPoint)0x483152;
typedef br_scalar(__cdecl* tSinglePointColl)(br_scalar* f, br_matrix4* m, br_scalar* d);
static tSinglePointColl SinglePointColl = (tSinglePointColl)0x48326d;
typedef br_scalar(__cdecl* tTwoPointColl)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n);
static tTwoPointColl TwoPointColl = (tTwoPointColl)0x4832b2;
typedef br_scalar(__cdecl* tDrMatrix4Inverse)(br_matrix4* mi, br_matrix4* mc);
static tDrMatrix4Inverse DrMatrix4Inverse = (tDrMatrix4Inverse)0x48377f;
typedef br_scalar(__cdecl* tThreePointColl)(br_scalar* f, br_matrix4* m, br_scalar* d);
static tThreePointColl ThreePointColl = (tThreePointColl)0x4836f1;
typedef br_scalar(__cdecl* tThreePointCollRec)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n, tCollision_info* c);
static tThreePointCollRec ThreePointCollRec = (tThreePointCollRec)0x483425;
typedef br_scalar(__cdecl* tFourPointColl)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n, tCollision_info* c);
static tFourPointColl FourPointColl = (tFourPointColl)0x48379f;
typedef void(__cdecl* tMultiFindFloorInBoxM)(int pNum_rays, br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCar_spec* c, int* mat_ref);
static tMultiFindFloorInBoxM MultiFindFloorInBoxM = (tMultiFindFloorInBoxM)0x483a49;
typedef void(__cdecl* tMultiFindFloorInBoxBU)(int pNum_rays, br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCar_spec* c, int* mat_ref);
static tMultiFindFloorInBoxBU MultiFindFloorInBoxBU = (tMultiFindFloorInBoxBU)0x483b2a;
typedef void(__cdecl* tfindfloor)(br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d);
static tfindfloor findfloor = (tfindfloor)0x483c6a;
typedef int(__cdecl* tFindFloorInBoxM)(br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCollision_info* c);
static tFindFloorInBoxM FindFloorInBoxM = (tFindFloorInBoxM)0x483cec;
typedef int(__cdecl* tFindFloorInBoxBU)(br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCollision_info* c);
static tFindFloorInBoxBU FindFloorInBoxBU = (tFindFloorInBoxBU)0x483d73;
typedef int(__cdecl* tFindFloorInBoxBU2)(br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCollision_info* c);
static tFindFloorInBoxBU2 FindFloorInBoxBU2 = (tFindFloorInBoxBU2)0x483e92;
typedef int(__cdecl* tFindFloorInBoxM2)(br_vector3* a, br_vector3* b, br_vector3* nor, br_scalar* d, tCollision_info* c);
static tFindFloorInBoxM2 FindFloorInBoxM2 = (tFindFloorInBoxM2)0x48405b;
typedef int(__cdecl* tBoxFaceIntersect)(br_bounds* pB, br_matrix34* pM, br_matrix34* pMold, br_vector3* pPoint_list, br_vector3* pNorm_list, br_scalar* pDist_list, int pMax_pnts, tCollision_info* c);
static tBoxFaceIntersect BoxFaceIntersect = (tBoxFaceIntersect)0x4840e2;
typedef int(__cdecl* tAddEdgeCollPoints)(br_vector3* p1, br_vector3* p2, br_bounds* pB, br_matrix34* pMold, br_vector3* pPoint_list, br_vector3* pNorm_list, int n, int pMax_pnts, tCollision_info* c);
static tAddEdgeCollPoints AddEdgeCollPoints = (tAddEdgeCollPoints)0x48469b;
typedef void(__cdecl* tGetPlaneNormal)(br_vector3* n, int p);
static tGetPlaneNormal GetPlaneNormal = (tGetPlaneNormal)0x4854c1;
typedef int(__cdecl* tGetBoundsEdge)(br_vector3* pos, br_vector3* edge, br_bounds* pB, int plane1, int plane2, br_vector3* a, br_vector3* b, br_vector3* c, int flag);
static tGetBoundsEdge GetBoundsEdge = (tGetBoundsEdge)0x48551f;
typedef void(__cdecl* tCancelPendingCunningStunt)();
static tCancelPendingCunningStunt CancelPendingCunningStunt = (tCancelPendingCunningStunt)0x485d8b;
typedef float(__cdecl* tfrac)(float pN);
static tfrac frac = (tfrac)0x485dc8;
typedef void(__cdecl* tSetAmbientPratCam)(tCar_spec* pCar);
static tSetAmbientPratCam SetAmbientPratCam = (tSetAmbientPratCam)0x486d06;
typedef void(__cdecl* tMungeCarGraphics)(tU32 pFrame_period);
static tMungeCarGraphics MungeCarGraphics = (tMungeCarGraphics)0x485dee;
typedef void(__cdecl* tResetCarScreens)();
static tResetCarScreens ResetCarScreens = (tResetCarScreens)0x48701d;
typedef tCar_spec* (__cdecl* tGetRaceLeader)();
static tGetRaceLeader GetRaceLeader = (tGetRaceLeader)0x487179;
typedef void(__cdecl* tAmIGettingBoredWatchingCameraSpin)();
static tAmIGettingBoredWatchingCameraSpin AmIGettingBoredWatchingCameraSpin = (tAmIGettingBoredWatchingCameraSpin)0x4876f1;
typedef void(__cdecl* tViewNetPlayer)();
static tViewNetPlayer ViewNetPlayer = (tViewNetPlayer)0x4870d8;
typedef void(__cdecl* tViewOpponent)();
static tViewOpponent ViewOpponent = (tViewOpponent)0x487248;
typedef void(__cdecl* tToggleCarToCarCollisions)();
static tToggleCarToCarCollisions ToggleCarToCarCollisions = (tToggleCarToCarCollisions)0x487333;
typedef void(__cdecl* tSwapCar)();
static tSwapCar SwapCar = (tSwapCar)0x4873a6;
typedef void(__cdecl* tAdjustDownForce)();
static tAdjustDownForce AdjustDownForce = (tAdjustDownForce)0x4873b1;
typedef void(__cdecl* tFreezeMechanics)();
static tFreezeMechanics FreezeMechanics = (tFreezeMechanics)0x487464;
typedef void(__cdecl* tPutOpponentsInNeutral)();
static tPutOpponentsInNeutral PutOpponentsInNeutral = (tPutOpponentsInNeutral)0x4874d7;
typedef void(__cdecl* tSetPanningFieldOfView)();
static tSetPanningFieldOfView SetPanningFieldOfView = (tSetPanningFieldOfView)0x4879d8;
typedef void(__cdecl* tCheckDisablePlingMaterials)(tCar_spec* pCar);
static tCheckDisablePlingMaterials CheckDisablePlingMaterials = (tCheckDisablePlingMaterials)0x487a3b;
typedef void(__cdecl* tPositionExternalCamera)(tCar_spec* c, tU32 pTime);
static tPositionExternalCamera PositionExternalCamera = (tPositionExternalCamera)0x48754a;
typedef void(__cdecl* tCameraBugFix)(tCar_spec* c, tU32 pTime);
static tCameraBugFix CameraBugFix = (tCameraBugFix)0x487b2c;
typedef int(__cdecl* tIncidentCam)(tCar_spec* c, tU32 pTime);
static tIncidentCam IncidentCam = (tIncidentCam)0x487b89;
typedef int(__cdecl* tMoveCamToIncident)(tCar_spec* c, tIncident_type* type, float* severity, tIncident_info* info, tU32* next_incident_time);
static tMoveCamToIncident MoveCamToIncident = (tMoveCamToIncident)0x488849;
typedef void(__cdecl* tPanningExternalCamera)(tCar_spec* c, tU32 pTime);
static tPanningExternalCamera PanningExternalCamera = (tPanningExternalCamera)0x488d45;
typedef void(__cdecl* tSetUpPanningCamera)(tCar_spec* c);
static tSetUpPanningCamera SetUpPanningCamera = (tSetUpPanningCamera)0x488f50;
typedef void(__cdecl* tSaveCameraPosition)(int i);
static tSaveCameraPosition SaveCameraPosition = (tSaveCameraPosition)0x48949c;
typedef void(__cdecl* tRestoreCameraPosition)(int i);
static tRestoreCameraPosition RestoreCameraPosition = (tRestoreCameraPosition)0x4894f8;
typedef void(__cdecl* tNormalPositionExternalCamera)(tCar_spec* c, tU32 pTime);
static tNormalPositionExternalCamera NormalPositionExternalCamera = (tNormalPositionExternalCamera)0x489553;
typedef void(__cdecl* tMoveWithWheels)(tCar_spec* c, br_vector3* vn, int manual_swing);
static tMoveWithWheels MoveWithWheels = (tMoveWithWheels)0x489dc2;
typedef void(__cdecl* tSwingCamera)(tCar_spec* c, br_matrix34* m1, br_matrix34* m2, br_vector3* vn, tU32 pTime);
static tSwingCamera SwingCamera = (tSwingCamera)0x489f7c;
typedef void(__cdecl* tPointCameraAtCar)(tCar_spec* c, br_matrix34* m1, br_matrix34* m2);
static tPointCameraAtCar PointCameraAtCar = (tPointCameraAtCar)0x48a73b;
typedef void(__cdecl* tPointCamera)(br_vector3* pos, br_matrix34* m2);
static tPointCamera PointCamera = (tPointCamera)0x48aa19;
typedef int(__cdecl* tCollideCamera2)(br_vector3* car_pos, br_vector3* cam_pos, br_vector3* old_camera_pos, int manual_move);
static tCollideCamera2 CollideCamera2 = (tCollideCamera2)0x48abbb;
typedef int(__cdecl* tCollideCameraWithOtherCars)(br_vector3* car_pos, br_vector3* cam_pos);
static tCollideCameraWithOtherCars CollideCameraWithOtherCars = (tCollideCameraWithOtherCars)0x48b820;
typedef void(__cdecl* tInitialiseExternalCamera)();
static tInitialiseExternalCamera InitialiseExternalCamera = (tInitialiseExternalCamera)0x48ba8a;
typedef void(__cdecl* tFreezeCamera)();
static tFreezeCamera FreezeCamera = (tFreezeCamera)0x48bc93;
typedef void(__cdecl* tFlyCar)(tCar_spec* c, br_scalar dt);
static tFlyCar FlyCar = (tFlyCar)0x48bca8;
typedef void(__cdecl* tDrVector3RotateY)(br_vector3* v, br_angle t);
static tDrVector3RotateY DrVector3RotateY = (tDrVector3RotateY)0x48c718;
typedef void(__cdecl* tCrashCarsTogether)(br_scalar dt);
static tCrashCarsTogether CrashCarsTogether = (tCrashCarsTogether)0x48c795;
typedef int(__cdecl* tCrashCarsTogetherSinglePass)(br_scalar dt, int pPass, tCollison_data* collide_list);
static tCrashCarsTogetherSinglePass CrashCarsTogetherSinglePass = (tCrashCarsTogetherSinglePass)0x48c8af;
typedef void(__cdecl* tBringCarToAGrindingHalt)(tCollision_info* car);
static tBringCarToAGrindingHalt BringCarToAGrindingHalt = (tBringCarToAGrindingHalt)0x48d21b;
typedef int(__cdecl* tBoundsOverlapTest_car)(br_bounds* b1, br_bounds* b2);
static tBoundsOverlapTest_car BoundsOverlapTest_car = (tBoundsOverlapTest_car)0x48d2e3;
typedef int(__cdecl* tSimpleCarCarCollisionTest)(tCollision_info* car1, tCollision_info* car2);
static tSimpleCarCarCollisionTest SimpleCarCarCollisionTest = (tSimpleCarCarCollisionTest)0x48d28f;
typedef int(__cdecl* tCollideTwoCarsWithWalls)(tCollision_info* car1, tCollision_info* car2, br_scalar dt);
static tCollideTwoCarsWithWalls CollideTwoCarsWithWalls = (tCollideTwoCarsWithWalls)0x48d38c;
typedef int(__cdecl* tCollideTwoCarsRepeatedly)(tCollision_info* car1, tCollision_info* car2, br_scalar dt);
static tCollideTwoCarsRepeatedly CollideTwoCarsRepeatedly = (tCollideTwoCarsRepeatedly)0x48d719;
typedef int(__cdecl* tCollideTwoCars)(tCollision_info* car1, tCollision_info* car2, int pPass);
static tCollideTwoCars CollideTwoCars = (tCollideTwoCars)0x48d84a;
typedef int(__cdecl* tGetEdgeEdgeCollisions)(br_bounds* pB1, br_bounds* pB2, br_matrix34* pM21, br_matrix34* pM12, br_matrix34* pMo21, br_matrix34* pMo12, br_matrix34* pM1o1, br_vector3* pPoint_list, br_vector3* pNorm_list, int pMax);
static tGetEdgeEdgeCollisions GetEdgeEdgeCollisions = (tGetEdgeEdgeCollisions)0x48e82a;
typedef int(__cdecl* tFacePointCarCarCollide)(tCollision_info* car1, tCollision_info* car2, br_matrix34* pMms, br_matrix34* pMoms, br_matrix34* pMsos, br_vector3* pPoint_list, br_vector3* pNorm_list, int pMax, int order);
static tFacePointCarCarCollide FacePointCarCarCollide = (tFacePointCarCarCollide)0x48f686;
typedef void(__cdecl* tMungeCarsMass)(tCollision_info* pCar, br_scalar pFactor);
static tMungeCarsMass MungeCarsMass = (tMungeCarsMass)0x48fc1c;
typedef void(__cdecl* tModifyCarsMass)(tCollision_info* pCar_1, tCollision_info* pCar_2);
static tModifyCarsMass ModifyCarsMass = (tModifyCarsMass)0x48fb97;
typedef void(__cdecl* tResetCarsMass)(tCollision_info* pCar_1, tCollision_info* pCar_2);
static tResetCarsMass ResetCarsMass = (tResetCarsMass)0x48fc7b;
typedef int(__cdecl* tDoCollide)(tCollision_info* car1, tCollision_info* car2, br_vector3* r, br_vector3* n, int k, int pPass, br_matrix34* mat1_to_mat2);
static tDoCollide DoCollide = (tDoCollide)0x48fd16;
typedef br_scalar(__cdecl* tTwoPointCollB)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n);
static tTwoPointCollB TwoPointCollB = (tTwoPointCollB)0x4927be;
typedef br_scalar(__cdecl* tThreePointCollRecB)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n);
static tThreePointCollRecB ThreePointCollRecB = (tThreePointCollRecB)0x492961;
typedef br_scalar(__cdecl* tFourPointCollB)(br_scalar* f, br_matrix4* m, br_scalar* d, br_vector3* tau, br_vector3* n);
static tFourPointCollB FourPointCollB = (tFourPointCollB)0x492cdd;
typedef int(__cdecl* tTestForNan)(float* f);
static tTestForNan TestForNan = (tTestForNan)0x492ff8;
typedef void(__cdecl* tCheckCameraHither)();
static tCheckCameraHither CheckCameraHither = (tCheckCameraHither)0x493036;
typedef void(__cdecl* tSetCarSuspGiveAndHeight)(tCar_spec* pCar, br_scalar pFront_give_factor, br_scalar pRear_give_factor, br_scalar pDamping_factor, br_scalar pExtra_front_height, br_scalar pExtra_rear_height);
static tSetCarSuspGiveAndHeight SetCarSuspGiveAndHeight = (tSetCarSuspGiveAndHeight)0x493087;
typedef int(__cdecl* tTestForCarInSensiblePlace)(tCar_spec* car);
static tTestForCarInSensiblePlace TestForCarInSensiblePlace = (tTestForCarInSensiblePlace)0x49327e;
typedef int(__cdecl* tTestOldMats)(tCollision_info* c1, tCollision_info* c2, int newmats);
static tTestOldMats TestOldMats = (tTestOldMats)0x4936e6;
typedef int(__cdecl* tPullActorFromWorld)(br_actor* pActor);
static tPullActorFromWorld PullActorFromWorld = (tPullActorFromWorld)0x49393a;
typedef int(__cdecl* tDoPullActorFromWorld)(br_actor* pActor);
static tDoPullActorFromWorld DoPullActorFromWorld = (tDoPullActorFromWorld)0x49396a;
typedef void(__cdecl* tCheckForDeAttachmentOfNonCars)(tU32 pTime);
static tCheckForDeAttachmentOfNonCars CheckForDeAttachmentOfNonCars = (tCheckForDeAttachmentOfNonCars)0x493c46;
typedef void(__cdecl* tPipeSingleNonCar)(tCollision_info* c);
static tPipeSingleNonCar PipeSingleNonCar = (tPipeSingleNonCar)0x4940c2;
typedef int(__cdecl* tGetPrecalculatedFacesUnderCar)(tCar_spec* pCar, tFace_ref** pFace_refs);
static tGetPrecalculatedFacesUnderCar GetPrecalculatedFacesUnderCar = (tGetPrecalculatedFacesUnderCar)0x4941a2;
typedef void(__cdecl* tDoSCILogo)();
static tDoSCILogo DoSCILogo = (tDoSCILogo)0x4a5974;
typedef void(__cdecl* tDoStainlessLogo)();
static tDoStainlessLogo DoStainlessLogo = (tDoStainlessLogo)0x4a597f;
typedef void(__cdecl* tPlaySmackerFile)(char* pSmack_name);
static tPlaySmackerFile PlaySmackerFile = (tPlaySmackerFile)0x4a598a;
typedef void(__cdecl* tDoOpeningAnimation)();
static tDoOpeningAnimation DoOpeningAnimation = (tDoOpeningAnimation)0x4a5d73;
typedef void(__cdecl* tDoEndRaceAnimation)();
static tDoEndRaceAnimation DoEndRaceAnimation = (tDoEndRaceAnimation)0x4a5df1;
typedef void(__cdecl* tStartLoadingScreen)();
static tStartLoadingScreen StartLoadingScreen = (tStartLoadingScreen)0x4a5f1a;
HOOK_VARIABLE_IMPLEMENT(tPrat_sequence*, gPratcam_sequences, 0x536334);
HOOK_VARIABLE_IMPLEMENT(int, gNumber_of_prat_sequences, 0x536330);
typedef int(__cdecl* tPratcamGetCurrent)();
static tPratcamGetCurrent PratcamGetCurrent = (tPratcamGetCurrent)0x44d0b0;
typedef int(__cdecl* tPratcamGetAmbient)();
static tPratcamGetAmbient PratcamGetAmbient = (tPratcamGetAmbient)0x44d0c5;
typedef int(__cdecl* tPratcamGetPending)();
static tPratcamGetPending PratcamGetPending = (tPratcamGetPending)0x44d0da;
typedef void(__cdecl* tTogglePratcam)();
static tTogglePratcam TogglePratcam = (tTogglePratcam)0x44d0ef;
typedef void(__cdecl* tChangeAmbientPratcam)(int pIndex);
static tChangeAmbientPratcam ChangeAmbientPratcam = (tChangeAmbientPratcam)0x44d1f0;
typedef void(__cdecl* tPratcamEvent)(int pIndex);
static tPratcamEvent PratcamEvent = (tPratcamEvent)0x44d517;
typedef void(__cdecl* tInitPratcam)();
static tInitPratcam InitPratcam = (tInitPratcam)0x44d5b1;
typedef void(__cdecl* tDisposePratcam)();
static tDisposePratcam DisposePratcam = (tDisposePratcam)0x44e0dd;
typedef void(__cdecl* tDoPratcam)(tU32 pThe_time);
static tDoPratcam DoPratcam = (tDoPratcam)0x44e2e6;
typedef void(__cdecl* tPratCam0)();
static tPratCam0 PratCam0 = (tPratCam0)0x44e6c0;
typedef void(__cdecl* tPratCam1)();
static tPratCam1 PratCam1 = (tPratCam1)0x44e72e;
typedef void(__cdecl* tPratCam2)();
static tPratCam2 PratCam2 = (tPratCam2)0x44e743;
typedef void(__cdecl* tPratCam3)();
static tPratCam3 PratCam3 = (tPratCam3)0x44e758;
typedef void(__cdecl* tPratCam4)();
static tPratCam4 PratCam4 = (tPratCam4)0x44e76d;
typedef void(__cdecl* tPratCam5)();
static tPratCam5 PratCam5 = (tPratCam5)0x44e782;
typedef void(__cdecl* tPratCam6)();
static tPratCam6 PratCam6 = (tPratCam6)0x44e797;
typedef void(__cdecl* tPratCam7)();
static tPratCam7 PratCam7 = (tPratCam7)0x44e7ac;
typedef void(__cdecl* tPratCam8)();
static tPratCam8 PratCam8 = (tPratCam8)0x44e7c1;
typedef void(__cdecl* tPratCam9)();
static tPratCam9 PratCam9 = (tPratCam9)0x44e7d6;
HOOK_VARIABLE_IMPLEMENT_ARRAY(char*, gBasic_car_names, 2, 0x51ea80);
HOOK_VARIABLE_IMPLEMENT_ARRAY(int, gNet_target, 7, 0x5500a0);
typedef void(__cdecl* tFrankAnneStart2)();
static tFrankAnneStart2 FrankAnneStart2 = (tFrankAnneStart2)0x4b0057;
typedef void(__cdecl* tFrankAnneDraw)(int pCurrent_choice, int pCurrent_mode);
static tFrankAnneDraw FrankAnneDraw = (tFrankAnneDraw)0x4b01fb;
typedef int(__cdecl* tFrankieOrAnnie)();
static tFrankieOrAnnie FrankieOrAnnie = (tFrankieOrAnnie)0x4b03cd;
typedef int(__cdecl* tDoOnePlayerStart)();
static tDoOnePlayerStart DoOnePlayerStart = (tDoOnePlayerStart)0x4b027b;
HOOK_VARIABLE_IMPLEMENT(int, gChange_race_net_mode, 0x5363f0);
HOOK_VARIABLE_IMPLEMENT(br_pixelmap*, gDeceased_image, 0x5363f8);
HOOK_VARIABLE_IMPLEMENT(int, gOpponent_index, 0x536414);
HOOK_VARIABLE_IMPLEMENT(tInterface_spec*, gStart_interface_spec, 0x536350);
HOOK_VARIABLE_IMPLEMENT(int, gCurrent_car_index, 0x536424);
typedef void(__cdecl* tDoChangeRace)();
static tDoChangeRace DoChangeRace = (tDoChangeRace)0x451fe5;
typedef void(__cdecl* tDrawCar)(int pCurrent_choice, int pCurrent_mode);
static tDrawCar DrawCar = (tDrawCar)0x44f1f2;
typedef int(__cdecl* tChangeCar)(int pNet_mode, int* pCar_index, tNet_game_details* pNet_game);
static tChangeCar ChangeCar = (tChangeCar)0x44f7e6;
typedef void(__cdecl* tDoChangeCar)();
static tDoChangeCar DoChangeCar = (tDoChangeCar)0x452017;
typedef int(__cdecl* tPartsShopRecommended)();
static tPartsShopRecommended PartsShopRecommended = (tPartsShopRecommended)0x450cf3;
typedef void(__cdecl* tDoPartsShop)(int pFade_away);
static tDoPartsShop DoPartsShop = (tDoPartsShop)0x450e06;
typedef tSO_result(__cdecl* tDoAutoPartsShop)();
static tDoAutoPartsShop DoAutoPartsShop = (tDoAutoPartsShop)0x450b05;
typedef void(__cdecl* tSetOpponentFlic)();
static tSetOpponentFlic SetOpponentFlic = (tSetOpponentFlic)0x4510ba;
typedef void(__cdecl* tDrawSceneyMappyInfoVieweyThing)();
static tDrawSceneyMappyInfoVieweyThing DrawSceneyMappyInfoVieweyThing = (tDrawSceneyMappyInfoVieweyThing)0x451002;
typedef void(__cdecl* tDismissSceneyMappyInfoVieweyThing)();
static tDismissSceneyMappyInfoVieweyThing DismissSceneyMappyInfoVieweyThing = (tDismissSceneyMappyInfoVieweyThing)0x450eea;
typedef int(__cdecl* tSelectRaceDone)(int pCurrent_choice, int pCurrent_mode, int pGo_ahead, int pEscaped, int pTimed_out);
static tSelectRaceDone SelectRaceDone = (tSelectRaceDone)0x450eb9;
typedef int(__cdecl* tStartRaceGoAhead)(int* pCurrent_choice, int* pCurrent_mode);
static tStartRaceGoAhead StartRaceGoAhead = (tStartRaceGoAhead)0x450f2a;
typedef int(__cdecl* tTryToMoveToArrows)(int* pCurrent_choice, int* pCurrent_mode);
static tTryToMoveToArrows TryToMoveToArrows = (tTryToMoveToArrows)0x45110d;
typedef int(__cdecl* tUpOpponent)(int* pCurrent_choice, int* pCurrent_mode);
static tUpOpponent UpOpponent = (tUpOpponent)0x451160;
typedef int(__cdecl* tDownOpponent)(int* pCurrent_choice, int* pCurrent_mode);
static tDownOpponent DownOpponent = (tDownOpponent)0x451285;
typedef int(__cdecl* tUpClickOpp)(int* pCurrent_choice, int* pCurrent_mode, int pX_offset, int pY_offset);
static tUpClickOpp UpClickOpp = (tUpClickOpp)0x4513a8;
typedef int(__cdecl* tDownClickOpp)(int* pCurrent_choice, int* pCurrent_mode, int pX_offset, int pY_offset);
static tDownClickOpp DownClickOpp = (tDownClickOpp)0x4513ca;
typedef void(__cdecl* tSelectRaceStart)();
static tSelectRaceStart SelectRaceStart = (tSelectRaceStart)0x4513ec;
typedef int(__cdecl* tSuggestRace)();
static tSuggestRace SuggestRace = (tSuggestRace)0x45140b;
typedef void(__cdecl* tSelectRaceDraw)(int pCurrent_choice, int pCurrent_mode);
static tSelectRaceDraw SelectRaceDraw = (tSelectRaceDraw)0x451634;
typedef tSO_result(__cdecl* tDoSelectRace)(int* pSecond_time_around);
static tDoSelectRace DoSelectRace = (tDoSelectRace)0x451c8e;
typedef tSO_result(__cdecl* tDoGridPosition)();
static tDoGridPosition DoGridPosition = (tDoGridPosition)0x4537ee;
typedef tSO_result(__cdecl* tNetSynchRaceStart)();
static tNetSynchRaceStart NetSynchRaceStart = (tNetSynchRaceStart)0x4542c4;
HOOK_VARIABLE_IMPLEMENT_ARRAY(float, gFloat_sine_table, 91, 0x51e620);
typedef float(__cdecl* tFastFloatSin)(int pAngle_in_degrees);
static tFastFloatSin FastFloatSin = (tFastFloatSin)0x4aa0d0;
typedef float(__cdecl* tFastFloatCos)(int pAngle_in_degrees);
static tFastFloatCos FastFloatCos = (tFastFloatCos)0x4aa18c;
typedef br_scalar(__cdecl* tFastScalarSin)(int pAngle_in_degrees);
static tFastScalarSin FastScalarSin = (tFastScalarSin)0x4aa279;
typedef br_scalar(__cdecl* tFastScalarCos)(int pAngle_in_degrees);
static tFastScalarCos FastScalarCos = (tFastScalarCos)0x4aa295;
typedef br_scalar(__cdecl* tFastScalarSinAngle)(br_angle pBR_angle);
static tFastScalarSinAngle FastScalarSinAngle = (tFastScalarSinAngle)0x4aa2e2;
typedef br_scalar(__cdecl* tFastScalarCosAngle)(br_angle pBR_angle);
static tFastScalarCosAngle FastScalarCosAngle = (tFastScalarCosAngle)0x4aa317;
typedef float(__cdecl* tFastFloatArcTan2)(float pY, float pX);
static tFastFloatArcTan2 FastFloatArcTan2 = (tFastFloatArcTan2)0x4aa4c0;
typedef br_scalar(__cdecl* tFastScalarArcTan2)(br_scalar pY, br_scalar pX);
static tFastScalarArcTan2 FastScalarArcTan2 = (tFastScalarArcTan2)0x4aa69f;
typedef br_angle(__cdecl* tFastFloatArcTan2Angle)(float pY, float pX);
static tFastFloatArcTan2Angle FastFloatArcTan2Angle = (tFastFloatArcTan2Angle)0x4aa6c2;
typedef br_angle(__cdecl* tFastScalarArcTan2Angle)(br_scalar pY, br_scalar pX);
static tFastScalarArcTan2Angle FastScalarArcTan2Angle = (tFastScalarArcTan2Angle)0x4aa8c2;
typedef void(__cdecl* tDRMatrix34RotateX)(br_matrix34* mat, br_angle rx);
static tDRMatrix34RotateX DRMatrix34RotateX = (tDRMatrix34RotateX)0x4aa8e5;
typedef void(__cdecl* tDRMatrix34RotateY)(br_matrix34* mat, br_angle ry);
static tDRMatrix34RotateY DRMatrix34RotateY = (tDRMatrix34RotateY)0x4aa986;
typedef void(__cdecl* tDRMatrix34RotateZ)(br_matrix34* mat, br_angle rz);
static tDRMatrix34RotateZ DRMatrix34RotateZ = (tDRMatrix34RotateZ)0x4aaa27;
typedef void(__cdecl* tDRMatrix34PostRotateX)(br_matrix34* mat, br_angle rx);
static tDRMatrix34PostRotateX DRMatrix34PostRotateX = (tDRMatrix34PostRotateX)0x4aac41;
typedef void(__cdecl* tDRMatrix34PostRotateY)(br_matrix34* mat, br_angle ry);
static tDRMatrix34PostRotateY DRMatrix34PostRotateY = (tDRMatrix34PostRotateY)0x4aacc7;
typedef void(__cdecl* tDRMatrix34PreRotateZ)(br_matrix34* mat, br_angle rz);
static tDRMatrix34PreRotateZ DRMatrix34PreRotateZ = (tDRMatrix34PreRotateZ)0x4aad0a;
typedef void(__cdecl* tDRMatrix34PostRotateZ)(br_matrix34* mat, br_angle rz);
static tDRMatrix34PostRotateZ DRMatrix34PostRotateZ = (tDRMatrix34PostRotateZ)0x4aad4d;
typedef void(__cdecl* tFatalError)(int pStr_index, ...);
static tFatalError FatalError = (tFatalError)0x461390;
typedef void(__cdecl* tOpenDiagnostics)();
static tOpenDiagnostics OpenDiagnostics = (tOpenDiagnostics)0x46163a;
typedef void(__cdecl* tdr_dprintf)(char* fmt_string, ...);
static tdr_dprintf dr_dprintf = (tdr_dprintf)0x461645;
typedef int(__cdecl* tDoErrorInterface)(int pMisc_text_index);
static tDoErrorInterface DoErrorInterface = (tDoErrorInterface)0x461650;
typedef int(__cdecl* tActorIsPedestrian)(br_actor* pActor);
static tActorIsPedestrian ActorIsPedestrian = (tActorIsPedestrian)0x455870;
typedef void(__cdecl* tTogglePedestrians)();
static tTogglePedestrians TogglePedestrians = (tTogglePedestrians)0x4559ea;
typedef void(__cdecl* tInitPedGibs)();
static tInitPedGibs InitPedGibs = (tInitPedGibs)0x45e3ad;
typedef void(__cdecl* tInitPeds)();
static tInitPeds InitPeds = (tInitPeds)0x455c05;
typedef void(__cdecl* tMungePedGibs)(tU32 pFrame_period);
static tMungePedGibs MungePedGibs = (tMungePedGibs)0x456048;
typedef void(__cdecl* tKillPedestrian)(tPedestrian_data* pPedestrian);
static tKillPedestrian KillPedestrian = (tKillPedestrian)0x456e92;
typedef void(__cdecl* tCalcPedWidthNHeight)(tPedestrian_data* pPedestrian, br_pixelmap* pPixelmap, br_scalar* pHeight, br_scalar* pWidth);
static tCalcPedWidthNHeight CalcPedWidthNHeight = (tCalcPedWidthNHeight)0x457492;
typedef int(__cdecl* tPedestrianNextInstruction)(tPedestrian_data* pPedestrian, float pDanger_level, int pPosition_explicitly, int pMove_pc);
static tPedestrianNextInstruction PedestrianNextInstruction = (tPedestrianNextInstruction)0x4585f1;
typedef void(__cdecl* tMungePedestrianSequence)(tPedestrian_data* pPedestrian, int pAction_changed);
static tMungePedestrianSequence MungePedestrianSequence = (tMungePedestrianSequence)0x4566ee;
typedef void(__cdecl* tSetPedPos)(tPedestrian_data* pPedestrian);
static tSetPedPos SetPedPos = (tSetPedPos)0x45647b;
typedef void(__cdecl* tDetachPedActorFromCar)(br_actor* pActor);
static tDetachPedActorFromCar DetachPedActorFromCar = (tDetachPedActorFromCar)0x4563b3;
typedef void(__cdecl* tMungePedestrianFrames)(tPedestrian_data* pPedestrian);
static tMungePedestrianFrames MungePedestrianFrames = (tMungePedestrianFrames)0x4568d7;
typedef void(__cdecl* tMungePedModel)(tPedestrian_data* pPedestrian);
static tMungePedModel MungePedModel = (tMungePedModel)0x456f86;
typedef void(__cdecl* tChangeActionTo)(tPedestrian_data* pPedestrian, int pAction_index, int pRedo_frames_etc);
static tChangeActionTo ChangeActionTo = (tChangeActionTo)0x45654d;
typedef int(__cdecl* tMungePedestrianAction)(tPedestrian_data* pPedestrian, float pDanger_level);
static tMungePedestrianAction MungePedestrianAction = (tMungePedestrianAction)0x459db7;
typedef void(__cdecl* tMakeFlagWavingBastardWaveHisFlagWhichIsTheProbablyTheLastThingHeWillEverDo)();
static tMakeFlagWavingBastardWaveHisFlagWhichIsTheProbablyTheLastThingHeWillEverDo MakeFlagWavingBastardWaveHisFlagWhichIsTheProbablyTheLastThingHeWillEverDo = (tMakeFlagWavingBastardWaveHisFlagWhichIsTheProbablyTheLastThingHeWillEverDo)0x4564ed;
typedef void(__cdecl* tMungePedestrianPath)(tPedestrian_data* pPedestrian, float pDanger_level, br_vector3* pDanger_direction);
static tMungePedestrianPath MungePedestrianPath = (tMungePedestrianPath)0x457548;
typedef float(__cdecl* tCalcPedestrianDangerLevel)(tPedestrian_data* pPedestrian, br_vector3* pDanger_direction);
static tCalcPedestrianDangerLevel CalcPedestrianDangerLevel = (tCalcPedestrianDangerLevel)0x45a078;
typedef void(__cdecl* tCheckPedestrianDeathScenario)(tPedestrian_data* pPedestrian);
static tCheckPedestrianDeathScenario CheckPedestrianDeathScenario = (tCheckPedestrianDeathScenario)0x45a3bd;
typedef void(__cdecl* tSendPedestrian)(tPedestrian_data* pPedestrian, int pIndex);
static tSendPedestrian SendPedestrian = (tSendPedestrian)0x45c2f0;
typedef void(__cdecl* tDoPedestrian)(tPedestrian_data* pPedestrian, int pIndex);
static tDoPedestrian DoPedestrian = (tDoPedestrian)0x4598e2;
typedef void(__cdecl* tMungePedestrians)(tU32 pFrame_period);
static tMungePedestrians MungePedestrians = (tMungePedestrians)0x459476;
typedef int(__cdecl* tGetPedCount)();
static tGetPedCount GetPedCount = (tGetPedCount)0x45c9f6;
typedef int(__cdecl* tGetPedPosition)(int pIndex, br_vector3* pPos);
static tGetPedPosition GetPedPosition = (tGetPedPosition)0x45ca0b;
typedef void(__cdecl* tCreatePedestrian)(FILE* pG, tPedestrian_instruction* pInstructions, int pInstruc_count, int pInit_instruc, int pRef_num, int pForce_read);
static tCreatePedestrian CreatePedestrian = (tCreatePedestrian)0x45cb28;
typedef void(__cdecl* tResetProxRay)();
static tResetProxRay ResetProxRay = (tResetProxRay)0x45da5c;
typedef void(__cdecl* tLoadInPedestrians)(FILE* pF, int pSubs_count, tPed_subs* pSubs_array);
static tLoadInPedestrians LoadInPedestrians = (tLoadInPedestrians)0x45dab2;
typedef br_actor* (__cdecl* tBuildPedPaths)(tPedestrian_instruction* pInstructions, int pInstruc_count, int pInit_instruc);
static tBuildPedPaths BuildPedPaths = (tBuildPedPaths)0x45e839;
typedef void(__cdecl* tWriteOutPeds)();
static tWriteOutPeds WriteOutPeds = (tWriteOutPeds)0x45ee73;
typedef void(__cdecl* tAddPed)();
static tAddPed AddPed = (tAddPed)0x45f644;
typedef void(__cdecl* tNewPed)(int pRef_num);
static tNewPed NewPed = (tNewPed)0x45f4f1;
typedef void(__cdecl* tRemoveCurrentPedPath)();
static tRemoveCurrentPedPath RemoveCurrentPedPath = (tRemoveCurrentPedPath)0x45f409;
typedef void(__cdecl* tScrubPedestrian)();
static tScrubPedestrian ScrubPedestrian = (tScrubPedestrian)0x45f3cb;
typedef void(__cdecl* tTogglePedDetect)();
static tTogglePedDetect TogglePedDetect = (tTogglePedDetect)0x45f469;
typedef void(__cdecl* tNewPed0)();
static tNewPed0 NewPed0 = (tNewPed0)0x45f4dc;
typedef void(__cdecl* tNewPed1)();
static tNewPed1 NewPed1 = (tNewPed1)0x45f72e;
typedef void(__cdecl* tNewPed2)();
static tNewPed2 NewPed2 = (tNewPed2)0x45f743;
typedef void(__cdecl* tNewPed3)();
static tNewPed3 NewPed3 = (tNewPed3)0x45f758;
typedef void(__cdecl* tNewPed4)();
static tNewPed4 NewPed4 = (tNewPed4)0x45f76d;
typedef void(__cdecl* tNewPed5)();
static tNewPed5 NewPed5 = (tNewPed5)0x45f782;
typedef void(__cdecl* tNewPed6)();
static tNewPed6 NewPed6 = (tNewPed6)0x45f797;
typedef void(__cdecl* tNewPed7)();
static tNewPed7 NewPed7 = (tNewPed7)0x45f7ac;
typedef void(__cdecl* tNewPed8)();
static tNewPed8 NewPed8 = (tNewPed8)0x45f7c1;
typedef void(__cdecl* tNewPed9)();
static tNewPed9 NewPed9 = (tNewPed9)0x45f7d6;
typedef void(__cdecl* tDropPedPoint2)();
static tDropPedPoint2 DropPedPoint2 = (tDropPedPoint2)0x45f8e5;
typedef void(__cdecl* tDropPedPoint)();
static tDropPedPoint DropPedPoint = (tDropPedPoint)0x45f8bd;
typedef void(__cdecl* tDropInitPedPoint)();
static tDropInitPedPoint DropInitPedPoint = (tDropInitPedPoint)0x45f9a4;
typedef void(__cdecl* tDropPedPointAir)();
static tDropPedPointAir DropPedPointAir = (tDropPedPointAir)0x45f9d6;
typedef void(__cdecl* tDropInitPedPointAir)();
static tDropInitPedPointAir DropInitPedPointAir = (tDropInitPedPointAir)0x45fa88;
typedef void(__cdecl* tShowPedPos)();
static tShowPedPos ShowPedPos = (tShowPedPos)0x45fc96;
typedef void(__cdecl* tShowPedPaths)();
static tShowPedPaths ShowPedPaths = (tShowPedPaths)0x45fcf5;
typedef void(__cdecl* tPullPedPoint)();
static tPullPedPoint PullPedPoint = (tPullPedPoint)0x45fe84;
typedef void(__cdecl* tPullPedPointAir)();
static tPullPedPointAir PullPedPointAir = (tPullPedPointAir)0x45ffc0;
typedef void(__cdecl* tDeletePedPath)();
static tDeletePedPath DeletePedPath = (tDeletePedPath)0x460082;
typedef void(__cdecl* tDeletePedPoint)();
static tDeletePedPoint DeletePedPoint = (tDeletePedPoint)0x46010f;
typedef void(__cdecl* tDisposePedestrians)();
static tDisposePedestrians DisposePedestrians = (tDisposePedestrians)0x460169;
typedef void(__cdecl* tDoPedReport)();
static tDoPedReport DoPedReport = (tDoPedReport)0x4603d6;
typedef void(__cdecl* tRenderProximityRays)(br_pixelmap* pRender_screen, br_pixelmap* pDepth_buffer, br_actor* pCamera, br_matrix34* pCamera_to_world, tU32 pTime);
static tRenderProximityRays RenderProximityRays = (tRenderProximityRays)0x460696;
typedef tSO_result(__cdecl* tDoEndRaceSummary)(int* pFirst_summary_done, tRace_result pRace_result);
static tDoEndRaceSummary DoEndRaceSummary = (tDoEndRaceSummary)0x418590;
